{"version":3,"sources":["lib/ParseSolidity.ts","lib/FileHandling.ts","remix-utils/RemixFileHandler.ts","lib/Graph.ts","lib/ContractHandling.ts","graph/utils/NodePositionOptimizer.ts","graph/utils/NodePosition.ts","shared/Icon.tsx","shared/ViewSelect.tsx","shared/Menu.tsx","graph/utils/EdgeSegments.ts","graph/utils/GraphStyle.ts","graph/views/Node.tsx","graph/utils/SequenceParts.ts","lib/TransactionSequence.ts","graph/utils/ThreeEnv.ts","graph/utils/NodeSelection.ts","graph/views/ContractView.tsx","graph/views/ContractNode.tsx","graph/utils/Zoom.ts","graph/views/ContractGraph.tsx","graph/views/FileNode.tsx","graph/views/ViewEntry.tsx","graph/views/FileView.tsx","graph/views/FileGraph.tsx","graph/views/GraphContainer.tsx","block/utils/Geometries.ts","block/utils/ThreeEnv.ts","block/utils/Materials.ts","block/utils/Shared.ts","block/utils/Block.ts","block/utils/FullBlock.ts","block/utils/Transaction.ts","block/utils/Intersection.ts","block/info-box/BlockInfoBoxView.tsx","block/info-box/TxInfoBoxView.tsx","block/info-box/HelpInfoBoxView.tsx","block/info-box/InfoBoxView.tsx","block/MessageBoxView.tsx","block/BlockView.tsx","graph/views/TxSequenceNode.tsx","graph/views/TxAccountNode.tsx","graph/views/TransactionSequenceView.tsx","StandaloneWrapper.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SolDefinitionType","parseFiles","rawSolFiles","solParser","map","file","rawSolFile","parsedContent","content","e","error","toString","parseFile","getContracts","astNodes","filter","type","ContractDefinition","getImports","ImportDirective","getPragmas","PragmaDirective","getAST","parsedSolFile","children","resolveFolder","folderContext","a","isSolidityFile","path","element","isDirectory","split","pop","resolveDirEntry","context","getFolder","Path","resolve","getFile","R","p","Promise","all","isDuplicateFile","Object","keys","execImport","importDirectiveContext","resolveImport","contentImport","parsedFiles","retrieveExternalContent","url","getAllFiles","baseFolderPath","localFiles","resolveExternalImports","iDA","iDB","files","isExternalFile","pathElement","match","baseUrl","resolveImportPathToAbsoluteUrl","importDirective","URL","href","addContextToImportDirective","buildInputGraph","getImportsAsEdge","to","from","dirname","getImportRootFiles","edges","fileToCheck","edge","length","getFileDisplayName","basename","name","slice","CONTRACT_DIR","getAllRemixFiles","client","fileManager","getIncomingEdges","key","getOutgoingEdges","getContractsFromFile","node","contract","getAllLinkedEdges","importPathExists","findBaseContracts","inheritanceContext","isConnected","candidate","inheritanceSpecifier","baseName","namePath","contracts","createEdge","link","getContractId","createInheritanceEdges","filesDag","baseContracts","nodes","getAllContracts","getRootContracts","walkUp","startNodeId","nodeId","walkDown","createCluster","nodeIds","uncheckedNodeIds","nodeToCheck","clusterId","clusterMap","Map","cluster","clusterIdToUse","forEach","has","get","set","buildLayer","startXPos","startYPos","idCreation","index","xPos","yPos","yRelative","id","createDAG","rawNodes","rootRawNodes","getId","retrieveIncomingEdges","retrieveOutgoingEdges","edgeToFromRawNode","edgePointsOnlyToRawNodes","rawNode","rawNodePointsOnlyToRawNodes","edgesPerRawNode","edgePerRawNode","onlyRawNodePointingToRawNodes","rawNodeIsNotIncluded","existingNodeIds","getLayerFiles","lowerLayerNodes","b","n","nodePosForCluster","offset","filteredRootNodes","rootRawNode","maxY","Infinity","offsetNodes","values","nodeWithPost","getContractsDAG","filesDAG","getFilesDAG","newRootFiles","Icon","props","className","iconClass","ViewSelect","defaultValue","defaultView","onChange","event","setView","target","value","Menu","zoomIn","onClick","zoomOut","autoZoom","infoBox","showImportPaths","exec","fromNode","find","toNode","segments","i","getSegmentValues","x","y","graphStyle","ELEMENT_WIDTH","COL_DISTANCE","SEGMENT_THICKNESS","ELEMENT_HEIGHT","getSegments","getSegment","isLeftArrow","segment","document","createElement","style","width","height","borderTop","borderBottom","borderRight","SEGMENT_COLOR","segmentObject","CSS3DObject","position","initialValues","seg","SeqNodeType","ArrowHead","DefaultGraphStyle","ELEMENT_BORDER_COLOR","SEGMENT_HIGHLIGHTED_COLOR","SEGMENT_NOT_HIGHLIGHTED_COLOR","ANIMATION_DURATION","EXPAND_HEIGHT","nodePosToThreePos","camera","vec","THREE","threePos","unproject","sub","normalize","distance","z","copy","add","multiplyScalar","createNodes","dag","posMappingData","threeNodes","portals","nodeDiv","objectCSS","Math","random","object","nodeXIndexToPos","nodeYIndexToPos","push","segmentsInitialValues","initialPosition","onMouseLeave","emptyNodes","o","borderRightColor","backgroundColor","onMouseOver","maxX","max","fillEmptyNodes","pos","parseInt","createSequenceBody","trace","three","accountAddresses","replayTx","action","getAllAcccountAddresses","accountAdresses","createNode","Account","createAccountNodes","_","createLine","row","returnStack","internalTx","resolveFrom","base","traceAddress","join","connectAccounts","returnInternalTx","returnTx","nextTx","returnEntry","removeTxFromStack","subtraces","scene","css3DObject","transform","txId","isReturn","fromIndex","findIndex","account","toIndex","sequenceDiagramNodes","seqNodeType","TransactionResult","Transaction","createLoop","createPlus","None","Right","Left","indexX","indexY","rotate","partObject","createArrowHead","right","arrowSegment","borderLeft","arrowObject","isT","arrowHead","group","vSegment","vObject","hSegment","hObject","h1Segment","h1Object","h2Segment","h2Object","object3D","setX","setY","portal","createThree","background","renderer","CSS3DRenderer","aspect","updateProjectionMatrix","setSize","controls","TrackballControls","domElement","minDistance","maxDistance","mouseButtons","LEFT","PAN","RIGHT","ROTATE","noRotate","onWindowResize","threeContainer","setThree","current","newWidth","clientWidth","newHeight","clientHeight","handleResize","render","animate","requestAnimationFrame","TWEEN","update","pairs","duration","removeAll","pair","Tween","easing","Easing","Exponential","InOut","start","rotation","this","onUpdate","init","setGraphViewState","appendChild","addEventListener","objects","stepDuration","setTimeout","window","autoFit","GraphViewState","Ready","objects3D","boundingBox","expandByPoint","size","getSize","center","getCenter","fov","PI","fovh","atan","tan","dx","abs","dy","coords","Quadratic","Out","centerNode","selectedNode","onComplete","Vector3","expendNode","selectedNodeId","renderedNodes","restoreOriginal","transformSelectedNodes","getIcon","kind","ContractView","exitMaxNode","ContractNode","isNodeSelected","nodeToMax","nodeDivStyle","borderWidth","borderColor","borderStyle","onMouseDown","graphViewState","setNodeToMax","setSelectedNode","undefined","ContractGraph","useState","setSelectedNodeId","Wait","useRef","setRenderedNodes","useEffect","view","contractsDag","maxNode","newNodeToMax","threeNode","NodeMaxed","maxedNode","portalPart","ReactDOM","createPortal","ref","display","FileNode","version","solVersionPragma","pragma","ViewEntry","top","title","FileView","icon","FileGraph","GraphContainer","setFilesDag","setContractsDag","createFilesDAG","createContractsDAG","CUBE_LENGTH","ACCOUNT_PLANE_LENGT","Geometries","BlockPlane","Cube","TxPlane","TxValue","SelectedTxPlane","Frame","loadFont","loader","FontLoader","reject","load","response","antialias","setPixelRatio","devicePixelRatio","outputEncoding","OrbitControls","ethNodesGroup","blockchainGroup","renderScene","RenderPass","effectFXAA","ShaderPass","FXAAShader","uniforms","resolution","bloomPass","UnrealBloomPass","threshold","strength","radius","renderToScreen","composer","EffectComposer","addPass","raycaster","cloudGroups","fonts","geometries","blockObjects","animateCloud","nodeData","vertexpos","colorpos","numConnected","settings","particleCount","particlesData","numConnections","particleData","nodesParticlePositions","velocity","rHalfY","rHalf","limitConnections","maxConnections","j","particleDataB","dz","dist","sqrt","alpha","positions","colors","linesMesh","geometry","setDrawRange","attributes","needsUpdate","color","pointCloud","threeEnv","txData","time","Date","now","stats","autoClear","clear","layers","clearDepth","createCloud","cloudSettings","r","maxNodeParticleCount","Float32Array","particleMaterial","pointColor","dotSize","transparent","sizeAttenuation","nodeParticles","setAttribute","setUsage","enable","computeBoundingSphere","material","vertexColors","blending","visible","showLines","setThreeEnv","showStats","Stats","dom","nodeCloud","txCloud","showDots","TxPlaneMaterial","side","TxDataPlaneMaterial","TxValueMaterial","FrameMaterial","CubeMaterial","opacity","SelectedCubeMaterial","LinkMaterial","TextMaterial","SelectedTransactionMaterial","scaleTo","scale","objectToScale","CHAIN_START_X_SHIFT","INITIAL_BLOCK_PART_SCALE","timeDiffToDistance","timeDiff","vanishTransparency","createBlocks","blockBatchs","blocks","lastBlockNumber","block","removeFromParent","textGeometry","dispose","removeBlocks","number","startX","blockTime","timestamp","blockGroupTimeDiff","blockGroup","cubeMaterial","linkMaterial","currentBlock","gasUsedRelation","gasUsed","toNumber","createBlock","createLink","moveOldChainPart","moveNewChainPart","newBG","remove","flexSize","blockChainGroup","showLink","font","cube","userData","setFromCenterAndSize","TextGeometry","textMesh1","computeBoundingBox","textMeshSize","cubePosition","frame1","frame2","frame3","frame4","frame5","setZ","frame6","frame7","frame8","frame9","frame10","frame11","frame12","createFramgeSegments","wp","getWorldPosition","setFromObject","nextStartX","moveMesh","mesh","rotateMesh","createFullBlock","ethProvider","fullBlockGroup","createTxPlane","transactions","txPerRow","ceil","getBlockWithTransactions","blockWithTransactions","txGasLimit","tx","gasLimit","maxGasLimit","dataSize","data","ethValue","parseFloat","ethers","utils","formatEther","maxEthValue","plane","transaction","rotateY","gasLimitScale","farX","farY","floor","wait","valueBoxHeight","valueBox","createText","text","textGeo","textMesh","bBox","selectBlock","selectTransaction","mouse","canvasBounds","getContext","canvas","getBoundingClientRect","clientX","left","clientY","bottom","setFromCamera","traverseVisible","obj","intersects","intersectObjects","sort","sortIntersections","selectedElement","intersect","selectedBlock","parent","fullBlock","blockSelected","selectedTransaction","transactionFrame","selectedTxView","parameters","frameGroup","createFrame","parnentBBox","parentSize","txMeshGroup","toPlane","ACCOUNT_DISTNCE","toText","rotateZ","remainder","mod","valueText","fromPlane","fromText","createTransactionMesh","transactionSelected","BlockInfoBoxView","minimize","unselect","hash","TxInfoBoxView","HelpInfoBoxView","InfoBoxView","blockViewState","BlockViewState","HelpSelected","TransactionSelectedMin","BlockSelectedMin","maximize","TransactionSelected","BlockSelected","NoSelection","showHelp","MessageBoxView","setProvider","setBlockViewState","rpc","providers","JsonRpcProvider","decodeURIComponent","detectEthereumProvider","provider","ethersProvider","Web3Provider","NoConnection","getBlocks","loadedBlocks","setBlocks","setGetBlocksTimeout","getBlockNumber","currentBlockNumber","blocksToLoad","lastBlock","newLoadedBlocks","Array","getBlock","BlockView","queryString","parse","useLocation","search","getBlocksTimeout","setEthProvider","setSelectedElement","WaitForConnection","createConnection","clearTimeout","isVisable","TxSequenceNode","input","callType","result","output","TxAccountNode","TransactionSequenceView","initSequenceDiagram","Trace","fit","StandaloneWrapper","App","setClient","setFiles","createClient","PluginClient","allowOrigins","onload","solidityParser","SolidityParser","graphContainer","remixView","getSelectedView","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode","getElementById"],"mappings":"84fA4BYA,E,qHAWL,SAASC,EACZC,EACAC,GAEA,OAAOD,EAAYE,KAAI,SAACC,GAAD,mBAAC,eACjBA,GAKX,SACIC,EACAH,GAEA,IACI,MAAO,CACHI,cAAeD,EAAWE,QACpBL,EAAUG,EAAWE,SACrB,MAEZ,MAAOC,GACL,MAAO,CACHF,cAAe,KACfG,MAAOD,EAAEE,aAjBVC,CAAUP,EAAMF,OA0BpB,SAASU,EAAaC,GACzB,OAAOA,EAASC,QACZ,SAACD,GAAD,OAAcA,EAASE,OAAShB,EAAkBiB,sBAInD,SAASC,EAAWJ,GACvB,OAAOA,EAASC,QACZ,SAACD,GAAD,OAAcA,EAASE,OAAShB,EAAkBmB,mBAInD,SAASC,EAAWN,GACvB,OAAOA,EAASC,QACZ,SAACD,GAAD,OAAcA,EAASE,OAAShB,EAAkBqB,mBAKnD,SAASC,EAAOC,GACnB,OAAOA,EAAchB,cACfgB,EAAchB,cAAciB,SAC5B,I,SAjEExB,K,wCAAAA,E,oCAAAA,E,8CAAAA,E,wCAAAA,E,sCAAAA,E,gCAAAA,E,kCAAAA,E,mCAAAA,M,yGCUGyB,E,8EAAf,WACIC,GADJ,iBAAAC,EAAA,6DAGUC,EAAiB,SAACC,GAAD,OACnBH,EAAcI,QAAQD,GAAME,aAtBT,QAuBnBF,EAAKG,MAAM,KAAKC,OAEdC,EAPV,+BAAAP,EAAA,MAO4B,WAAOE,GAAP,SAAAF,EAAA,0DACpBD,EAAcI,QAAQD,GAAME,YADR,6BAERN,EAFQ,KAGDC,EAAcS,QAHb,SAIKT,EAAcS,QAAQC,UAAUP,GAJrC,gCAGVM,QAHU,KAIVL,QAJU,qFAQAO,IAAKC,QAAQT,GARb,UASSH,EAAcS,QAAQI,QAAQV,GATvC,0BAQNA,KARM,KASNrB,QATM,qGAP5B,wEAoBWgC,IACHA,IAASZ,GACTY,IAAMN,IACN,SAACO,GAAD,OAAOC,QAAQC,IAAIF,KACnBD,IAAUA,KACVA,IAAUA,IAAWI,IALlBJ,CAMLK,OAAOC,KAAKpB,EAAcI,WA1BhC,2C,wBA6BA,IAAMiB,EAAU,uCAAG,WACfC,GADe,mBAAArB,EAAA,+EAKDqB,EAAuBb,QAAQc,cACjCD,EAAuBlB,QAAQD,MAN5B,UAILqB,EAJK,OASLC,EAAclD,EAChB,CACI,CACI4B,KAAMmB,EAAuBlB,QAAQD,KACrCrB,QAAS0C,EAAc1C,QACvBQ,KAAMkC,EAAclC,OAG5BgC,EAAuBb,QAAQhC,WAjBxB,yBAqBJgD,GArBI,UAsBHA,EAAY,GAAG5C,cAtBZ,kCAuBK6C,EAAuB,UACzBD,EAAY,GAAG5C,qBADU,aACzB,EAA8BiB,SAC9BwB,EAAuBb,QAAQc,cAC/BD,EAAuBb,QAAQhC,UAC/B+C,EAAcG,KA3BjB,iDA6BD,GA7BC,4JAgCJpD,EACH,CACI,CACI4B,KAAMmB,EAAuBlB,QAAQD,KACrCnB,MAAO,KAAEC,aAGjBqC,EAAuBb,QAAQhC,YAvCxB,0DAAH,sDA4CT,SAAemD,EAAtB,0C,4CAAO,WACHlB,EACAG,EACAU,EACAM,EACApD,GALG,eAAAwB,EAAA,kEAOgB1B,EAPhB,KAQOwB,EARP,KASc,CAAEW,YAAWG,WAT3B,SAUoBH,EAAUmB,GAV9B,gCASKpB,QATL,KAUKL,QAVL,6DAYC3B,EALEqD,GAPH,wBAeIhB,IAAWI,GAff,UAgBOa,EAAuBD,EAAYP,EAAe9C,GAhBzD,0G,sBAoBP,SAASyC,EAAsCc,EAAQC,GACnD,OAAOD,EAAI7B,OAAS8B,EAAI9B,KAGrB,SAAe4B,EAAtB,sC,4CAAO,WACHG,EACAX,EACA9C,GAHG,SAAAwB,EAAA,+EAKIa,IACHA,IAAA,uCAAM,WAAOnC,GAAP,SAAAsB,EAAA,mEACFtB,GADE,kBAEQ+C,EACN9B,EAAOjB,GACP4C,EACA9C,GALF,wIAAN,wDAQA,SAACwB,GAAD,OAAOe,QAAQC,IAAIhB,KACnBa,IAAUA,KAVPA,CAWLoB,IAhBC,2C,wBAmBP,SAASC,EAAeC,GACpB,QAAOA,EAAYjC,KAAKkC,MAAM,yC,SAKnBX,E,oFAAf,WACItC,EACAmC,EACA9C,EACA6D,GAJJ,iBAAArC,EAAA,6DAMUsC,EAAiC,SACnCC,GADmC,OAGnCF,EAAO,2BAEME,GAFN,IAGGrC,KAAM,IAAIsC,IAAID,EAAgBrC,KAAMmC,GAASI,OAHhD,eAKIF,IAETG,EAA8B,SAACH,GAAD,MAAuC,CACvE/B,QAAS,CAAEc,gBAAe9C,aAC1B2B,QAASoC,IAlBjB,kBAqBW1B,IACHtB,EACAsB,IAAMyB,GACNzB,IAASqB,GACTrB,IAAM6B,GACN7B,IAAMO,IACN,SAACpB,GAAD,OAAOe,QAAQC,IAAIhB,KACnBa,IAAUA,KACVA,IAAUA,IAAWI,IARlBJ,CASL1B,IA9BN,4C,sBAiCO,SAASwD,EAAgBnB,GAC5B,OAAOX,IAAOA,IAAM+B,GAAmB/B,IAAhCA,CAA0CW,GAGrD,SAASoB,EAAiBhD,GAatB,OAAOiB,IAAOlB,EAAQJ,EAAYsB,KAZb,SAAC0B,GAAD,MAA6C,CAC9DM,GAAIjD,EAAcM,KAClB4C,KAAMZ,EAAeK,GACfA,EAAgBrC,KAChBgC,EAAetC,GACf,IAAI4C,IAAID,EAAgBrC,KAAMN,EAAcM,MAAMuC,KAClD/B,IAAKC,QACDD,IAAKqC,QAAQnD,EAAcM,MAC3BqC,EAAgBrC,UAIvBW,CAAgDjB,GAGpD,SAASoD,EACZf,EACAgB,GAMA,OAAOpC,KAJc,SAACqC,GAAD,OAED,IADhBrC,KAAS,SAACsC,GAAD,OAAgBD,EAAYhD,OAASiD,EAAKL,OAAMG,GACpDG,SAEqBnB,GAG3B,SAASoB,EAAmBnD,GAU/B,OAAOW,KAFa,SAACX,GAAD,OAA0BQ,IAAK4C,SAASpD,EAAM,WAPhD,SAACqD,GAAD,OACdA,EAAKH,OAAS,GACRG,EAAKC,MAAM,EAAG,GACd,MACAD,EAAKC,MAAMD,EAAKH,OAAS,EAAGG,EAAKH,QACjCG,IAIH1C,CAA+BX,GCpO1C,IAAMuD,EAAe,aAEd,SAAeC,EAAtB,oC,4CAAO,WACHC,EAEAnF,GAHG,SAAAwB,EAAA,+EAKI2B,EACHgC,EAAOC,YAAYnD,UACnBkD,EAAOC,YAAYhD,QACnB+C,EAAOpC,cAAcZ,QACrB8C,EACAjF,IAVD,4C,kJCIA,SAASqF,GAAiBC,EAAab,GAC1C,OAAOpC,KAAS,SAACsC,GAAD,OAAgBA,EAAKN,KAAOiB,IAAKb,GAG9C,SAASc,GAAiBD,EAAab,GAC1C,OAAOpC,KAAS,SAACsC,GAAD,OAAgBA,EAAKL,OAASgB,IAAKb,G,kCCWvD,SAASe,GACLC,GAcA,OAAOpD,KALa,SAACoD,GAAD,mBAChB,UAAAA,EAAK9D,eAAL,mBAAcvB,qBAAd,SAA6BiB,SAA7B,UACMoE,EAAK9D,eADX,iBACM,EAAcvB,qBADpB,aACM,EAA6BiB,SAC7B,KAINgB,KAASA,MACT3B,EACA2B,KAhB8B,SAC9BqD,GAD8B,MAEgB,CAC9C1D,QAASyD,EAAK9D,QACdA,QAAS+D,MAQNrD,CAKLoD,GAGN,SAASE,GAAkBrB,EAAcG,GACrC,OAAOpC,IACHA,KAAwB,SAACsC,GAAD,OAAyBA,EAAKL,OAASA,KAC/DjC,KAAM,SAACsC,GAAD,OAAWA,GAAX,mBAAoBgB,GAAkBhB,EAAKN,GAAII,QACrDpC,IAHGA,CAILoC,GAGN,SAASmB,GAAiBtB,EAAcD,EAAYI,GAChD,OAAOpC,KACH,SAACiC,GAAD,OAAkBqB,GAAkBrB,EAAMG,KAC1CpC,KAAwB,SAACsC,GAAD,OAAUA,EAAKN,KAAOA,KAC9ChC,KACAA,KAJGA,CAKLiC,GAGN,SAASuB,GAAkBC,GACvB,IAAMC,EAAc,SAChBC,GADgB,OAGhB3D,KACI2D,EAAUhE,QAAQN,OAASoE,EAAmB9D,QAAQ9B,KAAKwB,KAC3DkE,GACII,EAAUhE,QAAQN,KAClBoE,EAAmB9D,QAAQ9B,KAAKwB,KAChCoE,EAAmB9D,QAAQyC,SAqBvC,OAAOpC,KAjBkB,SAAC4D,GAAD,MAAiD,CACtEjE,QAAQ,2BACD8D,EAAmB9D,SADnB,IAEHiE,yBAEJtE,QAASU,IACLA,KACI,SAACqD,GAAD,OACIA,EAAS/D,QAAQoD,OACjBkB,EAAqBC,SAASC,YAEtC9D,IACI0D,GAPC1D,CASPyD,EAAmB9D,QAAQoE,cAGFN,EAAmBnE,SAGtD,SAAS0E,GAAWC,GAChB,MAAO,CACHjC,GAAIiC,EAAKtE,QAAQ0D,SAASX,KAAO,IAAMuB,EAAKtE,QAAQ9B,KAAKwB,KACzD4C,KAAMiC,GAAcD,EAAK3E,QAAQ,KAIlC,SAAS6E,GAAuBC,GAiBnC,OAAOpE,IACHA,IAAMmD,IACNnD,KAlB0C,SAC1C+D,GAD0C,OAG1C/D,KACI,SAACqD,GAAD,MAA2D,CACvD1D,QAAS,CACL0D,SAAUA,EAAS/D,QACnBzB,KAAMwF,EAAS1D,QACfoE,YACA3B,MAAOgC,EAAShC,OAEpB9C,QAAS+D,EAAS/D,QAAQ+E,iBAE9BN,KAOJ/D,IAAMwD,IACNxD,IACAA,MAAqC,SAAC/B,GAAD,OAAO+B,KAAU/B,EAAEqB,YACxDU,IAAMgE,IAPHhE,CAQLoE,EAASE,OAGR,SAASJ,GACZb,GAEA,OAAOA,EAAS/D,QAAQoD,KAAO,IAAMW,EAAS1D,QAAQN,KAGnD,SAASkF,GAAgBH,GAC5B,OAAOpE,IAAOA,IAAMmD,IAAuBnD,IAApCA,CAA8CoE,EAASE,OAG3D,SAASE,GACZT,EACA3B,GAQA,OAAOpC,KANgB,SACnBqD,GADmB,OAIH,IADhBrD,KAAS,SAACsC,GAAD,OAAgB4B,GAAcb,KAAcf,EAAKL,OAAMG,GAC3DG,SAEuBwB,GCzJpC,SAASU,GAAOC,EAAqBtC,GACjC,OAAOpC,IACHA,KAAwB,SAACsC,GAAD,OAAUA,EAAKL,OAASyC,KAChD1E,KAAoB,SAACsC,GAAD,OAAUA,EAAKN,MACnChC,KAAM,SAAC2E,GAAD,OAAYF,GAAOE,EAAQvC,MACjCpC,KACA,SAACsE,GAAD,OAAYI,GAAZ,mBAA4BJ,MALzBtE,CAMLoC,GAGN,SAASwC,GAASF,EAAqBtC,GACnC,OAAOpC,IACHA,KAAwB,SAACsC,GAAD,OAAUA,EAAKN,KAAO0C,KAC9C1E,KAAoB,SAACsC,GAAD,OAAUA,EAAKL,QACnCjC,KAAM,SAAC2E,GAAD,OAAYC,GAASD,EAAQvC,MACnCpC,KACA,SAACsE,GAAD,OAAYI,GAAZ,mBAA4BJ,MALzBtE,CAMLoC,GAGC,SAASyC,GACZC,EACA1C,GAOA,IALA,IAAM2C,EAAgB,YAAOD,GACzBE,EAAcD,EAAiBtF,MAC/BwF,EAAY,EACVC,EAAa,IAAIC,IAJJ,aAOf,IAAMC,EAAUpF,KAAA,sBACT4E,GAASI,EAAa5C,IADb,YAETqC,GAAOO,EAAa5C,MAEvBiD,EAAyBJ,EAC7BG,EAAQE,SAAQ,SAACX,GACTO,EAAWK,IAAIZ,KACfU,EAAiBH,EAAWM,IAAIb,OAIxCS,EAAQE,SAAQ,SAACX,GAAD,OAAYO,EAAWO,IAAId,EAAQU,MAEnDJ,EAAYI,IAAmBJ,EAAYA,EAAY,EAAIA,EAC3DD,EAAcD,EAAiBtF,OAf5BuF,GAAc,IAkBrB,OAAOE,ECVX,SAASQ,GACLC,EACAC,EACAC,GAEA,OAAO7F,IAA4BA,IAA5BA,EACH,SAACV,EAAYwG,GAAb,MAA8C,CAC1CC,KAAMJ,EAAY,EAClBK,KAAMJ,EAAYE,EAClBG,UAAWH,EACXxG,UACA4G,GAAIL,EAAWvG,OAKpB,SAAe6G,GAAtB,yC,8CAAO,WACHC,EACAC,EACAjE,EACAkE,GAJG,6CAAAnH,EAAA,sDAMGoH,EAAwB,SAACjH,GAAD,OAC1B0D,GAAiBsD,EAAMhH,GAAU8C,IAE/BoE,EAAwB,SAAClH,GAAD,OAC1B4D,GAAiBoD,EAAMhH,GAAU8C,IAE/BqE,EAAoB,SAACnE,GAAD,OACtBtC,KAAO,SAACV,GAAD,OAAgBgH,EAAMhH,KAAagD,EAAKL,OAAMmE,IAEnDM,EAA2B,SAACN,EAAe9D,GAAhB,OAC7BtC,IACIA,KAAM,SAAC2G,GAAD,OAAgBL,EAAMK,MAC5B3G,IAAWsC,EAAKN,IAFpBhC,CAGEoG,IAEAQ,EAA8B,SAChCR,EACAS,GAFgC,OAIhC7G,IACIA,KAAM,SAAC8G,GAAD,OACFJ,EAAyBN,EAAUU,MAEvC9G,KAAO,SAACb,GAAD,OAAsB,IAANA,KAJ3Ba,CAKE6G,IAEAE,EAAgC,SAACX,EAAehE,GAAhB,OAClCpC,KACI,SAACoC,GAAD,OAAmBwE,EAA4BR,EAAUhE,KACzDA,IAGF4E,EAAuB,SAACC,EAA2BN,GAA5B,OACxB3G,IAAWsG,EAAMK,GAAUM,IAE1BC,EAAgB,SAAhBA,EACFvB,EACAC,EACAuB,EACAF,GA2BA,OAAOjH,IACHA,IAAMuG,GAENvG,IACAA,IAA2ByG,GAC3BzG,KAASA,OAdY,SAACV,GAAD,OACrBU,IACIA,IAAMwG,IACN,SAACpE,GAAD,OACI2E,EAA8BI,EAAiB/E,KACnDpC,IACAA,IAA2ByG,GAL/BzG,CAMEV,KASFU,KAASA,MACTA,KAAW,SAACb,EAAMiI,GAAP,OAAgBd,EAAMnH,KAAOmH,EAAMc,MAC9CpH,IAASA,KAAQgH,EAARhH,CAA8BiH,IACvCvB,GAAcC,EAAWC,GAAW,SAACxC,GAAD,OAAUkD,EAAMlD,OAnCtC,SAACkB,GAAD,OACdA,EAAM/B,OAAS,EAAf,sBAEa+B,GAFb,YAGa4C,EACCvB,EAAY,EACZC,EAFY,sBAILuB,GAJK,YAKL7C,EAAM1G,KAAI,SAACyJ,GAAD,OAAOA,EAAE/H,aALd,sBAORU,IAAMA,KAAO,MAAOsE,IAPZ,YAOuB2C,OAVjD,YAaU3C,KAWPtE,CAYLmH,IApFH,sBAwFIzB,GAAc,EAAG,EAAGY,EAApBZ,CAA2BW,IAxF/B,YAyFIa,EAAc,EAAG,EAAGb,EAAcrG,IAAMsG,EAAOD,MAGhDnB,EAAaL,GACf7E,KAAM,SAACoD,GAAD,OAAakD,EAAMlD,KAAzBpD,CAAgCqG,GAChCjE,GAGEkF,EAAoB,SAACrC,EAAmBsC,GAC1C,IAAMC,EAAoBxH,KACtB,SAACyH,GAAD,OAAiBvC,EAAWM,IAAIc,EAAMmB,MAAkBxC,IACxDoB,GAEE/B,EAAK,sBACJoB,GAAc,EAAG,EAAGY,EAApBZ,CAA2B8B,IADvB,YAEJN,EACC,EACA,EACAM,EACAxH,IAAMsG,EAAOkB,MAIrB,MAAO,CACHE,KAAM1H,IACFA,KAA4B,SAACoD,GAAD,OAAUA,EAAK4C,QAC3ChG,KAAyBA,MAAQ2H,KAF/B3H,CAGJsE,GACFA,MAAOtE,KACH,SAACoD,GAAD,mBAAC,eACMA,GADP,IAEI4C,KAAM5C,EAAK4C,KAAOuB,MAEtBjD,KAKRsD,EAA8B,GAC9BL,EAAS,EAhIV,cAkIqBvH,KAAA,YAAWkF,EAAW2C,YAlI3C,IAkIH,2BAAW5C,EAA+C,QAChD6C,EAAeR,EAAkBrC,EAAWsC,GAClDK,EAAW,sBAAOA,GAAP,YAAuBE,EAAaxD,QAC/CiD,GAAUO,EAAaJ,KAAO,EArI/B,uDAwII,CACHtF,QACAkC,MAAOsD,IA1IR,6C,sBA8IA,SAAeG,GAAtB,mC,8CAAO,WAA+BC,GAA/B,iBAAA7I,EAAA,6DACGiD,EAAQ+B,GAAuB6D,GAE/BjE,EAAYQ,GAAgByD,GAH/B,kBAKI7B,GACHpC,EACAS,GAAiBT,EAAW3B,GAC5BA,EACA8B,KATD,4C,sBAaA,SAAe+D,GAAtB,mC,8CAAO,WACH7G,GADG,iBAAAjC,EAAA,6DAGGiD,EAAQN,EAAgBV,GAExB8G,EAAe/F,EAAmBf,EAAOgB,GAL5C,kBAOI+D,GACH/E,EACA8G,EACA9F,GACA,SAACvE,GAAD,OAAyBA,EAAKwB,SAX/B,4C,+CCzMQ8I,OAJf,SAAcC,GACV,OAAO,oBAAGC,UAAWD,EAAME,a,OCgBhBC,OAff,SAAoBH,GAChB,OACI,0BACIC,UAAU,2BACVG,aAAcJ,EAAMK,YACpBC,SAAU,SAACC,GAAD,OAAWP,EAAMQ,QAAQD,EAAME,OAAOC,QAHpD,UAKI,yBAAQA,MAAM,QAAd,mBACA,yBAAQA,MAAM,YAAd,uBACA,yBAAQA,MAAM,eAAd,yBACA,yBAAQA,MAAM,QAAd,uBC0CGC,OA9Cf,SAAcX,GACV,OACI,uBAAKC,UAAU,0CAAf,UACI,uBAAKA,UAAU,gCAAf,UACKD,EAAMK,aAAeL,EAAMQ,SACxB,eAAC,GAAD,CACIA,QAASR,EAAMQ,QACfH,YAAaL,EAAMK,cAI1BL,EAAMY,QACH,yBACIxK,KAAK,SACL6J,UAAU,iDACVY,QAASb,EAAMY,OAHnB,SAKI,eAAC,GAAD,CAAMV,UAAU,yBAGvBF,EAAMc,SACH,yBACI1K,KAAK,SACL6J,UAAU,kCACVY,QAASb,EAAMc,QAHnB,SAKI,eAAC,GAAD,CAAMZ,UAAU,0BAGvBF,EAAMe,UACH,yBACI3K,KAAK,SACL6J,UAAU,kCACVY,QAASb,EAAMe,SAHnB,SAKI,eAAC,GAAD,CAAMb,UAAU,uBAI5B,sBAAKD,UAAU,uDAAf,SACKD,EAAMgB,c,oCCjDhB,SAASC,GACZjH,EACAkC,EACAgF,GACD,IAAD,gBACqBlH,GADrB,yBACaE,EADb,QAEYiH,EAAWjF,EAAMkF,MAAK,SAACpG,GAAD,OAAUA,EAAK8C,KAAO5D,EAAKL,QACjDwH,EAASnF,EAAMkF,MAAK,SAACpG,GAAD,OAAUA,EAAK8C,KAAO5D,EAAKN,MACrD,GAAIuH,GAAYE,EAAQ,CAIpB,GAHAH,EAAKC,EAASG,SAAS,GAAIH,EAASxD,MACpCuD,EAAKG,EAAOC,SAAS,GAAIH,EAASxD,MAClCuD,EAAKG,EAAOC,SAAS,GAAIH,EAASxD,MAAM,GACpCwD,EAASxD,KAAO0D,EAAO1D,KAAO,EAAG,CACjCuD,EAAKG,EAAOC,SAAS,GAAIH,EAASxD,MAClCuD,EAAKG,EAAOC,SAAS,GAAIH,EAASxD,MAClC,IAHiC,eAGxB4D,GACL,IAAMvG,EAAOkB,EAAMkF,MACf,SAACnC,GAAD,OAAOA,EAAErB,OAASyD,EAAOzD,MAAQqB,EAAEtB,OAAS4D,KAE5CvG,GACAkG,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,OAL/B4D,EAAIF,EAAO1D,KAAO,EAAG4D,EAAIJ,EAASxD,KAAO,EAAG4D,IAAM,EAAlDA,GAUb,GAAIJ,EAASvD,KAAOyD,EAAOzD,KACvB,IAD8B,IAAD,WACpB2D,GACL,IAAMvG,EAAOkB,EAAMkF,MACf,SAACnC,GAAD,OAAOA,EAAEtB,KAAO,IAAMwD,EAASxD,MAAQsB,EAAErB,OAAS2D,KAElDvG,IACIuG,IAAMJ,EAASvD,KACfsD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,MACzB4D,IAAMF,EAAOzD,MACpBsD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,MAC5BwD,EAASxD,KAAO0D,EAAO1D,KAAO,GAC9BuD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,QAGpCuD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,MAChCuD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,SAdnC4D,EAAIJ,EAASvD,KAAM2D,GAAKF,EAAOzD,KAAM2D,IAAM,EAA3CA,QAkBN,GAAIJ,EAASvD,KAAOyD,EAAOzD,KAC9B,IADqC,IAAD,WAC3B2D,GACL,IAAMvG,EAAOkB,EAAMkF,MACf,SAACnC,GAAD,OAAOA,EAAEtB,KAAO,IAAMwD,EAASxD,MAAQsB,EAAErB,OAAS2D,KAElDvG,IACIuG,IAAMJ,EAASvD,KACfsD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,MACzB4D,IAAMF,EAAOzD,MACpBsD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,MAC5BwD,EAASxD,KAAO0D,EAAO1D,KAAO,GAC9BuD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,QAGpCuD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,MAChCuD,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,SAdnC4D,EAAIF,EAAOzD,KAAM2D,GAAKJ,EAASvD,KAAM2D,IAAM,EAA3CA,QAmBT,GAAIJ,EAASxD,KAAO0D,EAAO1D,KAAO,EAAG,CACjCuD,EAAKG,EAAOC,SAAS,GAAIH,EAASxD,MAClC,IAAM3C,EAAOkB,EAAMkF,MACf,SAACnC,GAAD,OACIA,EAAEtB,KAAO,IAAMwD,EAASxD,MACxBsB,EAAErB,OAASuD,EAASvD,QAExB5C,GACAkG,EAAKlG,EAAKsG,SAAS,GAAIH,EAASxD,SAnEpD,2BAA2B,IAD7B,+BA4EK,IAAM6D,GAAmB,CAC5B,SAACC,EAAWC,EAAWC,GACnB,MAAO,CACHF,EAAIE,EAAWC,cAAgB,EAAID,EAAWE,aAAe,EAC7DH,EACAC,EAAWE,aAAe,EAC1BF,EAAWG,oBAInB,SAACL,EAAWC,EAAWC,GACnB,MAAO,CACHF,EACIE,EAAWC,cAAgB,EAC3BD,EAAWE,aAAe,EACM,EAA/BF,EAAWG,kBAAyB,EACzCJ,EACAC,EAAWE,aAAe,EAAmC,EAA/BF,EAAWG,kBACzCH,EAAWG,oBAInB,SAACL,EAAWC,EAAWC,GACnB,MAAO,CACHF,EAAIE,EAAWC,cAAgB,EAAID,EAAWE,aAAe,EAC7DH,GACKC,EAAWI,eAAiB,EAAIJ,EAAWE,aAAe,GACvD,EACRF,EAAWG,kBACXH,EAAWI,eAAiB,EAAIJ,EAAWE,aAAe,IAGlE,SAACJ,EAAWC,EAAWC,GACnB,MAAO,CACHF,EAAIE,EAAWC,cAAgB,EAAID,EAAWE,aAAe,EAC7DH,GACKC,EAAWI,eAAiB,EAAIJ,EAAWE,aAAe,GACvD,EACRF,EAAWG,kBACXH,EAAWI,eAAiB,EAAIJ,EAAWE,aAAe,IAGlE,SAACJ,EAAWC,EAAWC,GACnB,MAAO,CACHF,EAAIE,EAAWC,cAAgBD,EAAWE,aAC1CH,GAAKC,EAAWI,eAAiB,EAAIJ,EAAWE,aAAe,GAC/DF,EAAWC,cAAgBD,EAAWE,aACtCF,EAAWG,oBAGnB,SAACL,EAAWC,EAAWC,GACnB,MAAO,CACHF,EACIE,EAAWC,cAAgB,EACK,EAA/BD,EAAWG,kBAAyB,EACzCJ,EACAC,EAAWE,aAAe,EAC1BF,EAAWG,qBAKhB,SAASE,GAAYP,EAAWC,EAAWC,GAC9C,IAAMM,EAAa,SACfxC,EACAyC,GAEA,IAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQlC,UAAYiC,EAAc,GAAK,OACvCC,EAAQG,MAAMC,MAAQL,EAAc,MAAQzC,EAAO,GAAK,KACxD0C,EAAQG,MAAME,OAASN,EAAc,MAAQzC,EAAO,GAAK,KAErDyC,IACAC,EAAQG,MAAMG,UACqB,EAA/Bd,EAAWG,kBAAwB,uBACvCK,EAAQG,MAAMI,aACqB,EAA/Bf,EAAWG,kBAAwB,uBACvCK,EAAQG,MAAMK,YACqB,EAA/BhB,EAAWG,kBACX,YACAH,EAAWiB,eAGnB,IAAMC,EAAgB,IAAIC,KAAYX,GAItC,OAHAU,EAAcE,SAAStB,EAAIhC,EAAO,GAClCoD,EAAcE,SAASrB,EAAIjC,EAAO,GAE3BoD,GAGLvB,EAAW,CACbW,EAAWT,GAAiB,GAAGC,EAAGC,EAAGC,IACrCM,EAAWT,GAAiB,GAAGC,EAAGC,EAAGC,IACrCM,EAAWT,GAAiB,GAAGC,EAAGC,EAAGC,IACrCM,EAAWT,GAAiB,GAAGC,EAAGC,EAAGC,IACrCM,EAAWT,GAAiB,GAAGC,EAAGC,EAAGC,IACrCM,EAAWT,GAAiB,GAAGC,EAAGC,EAAGC,IAAa,IAGtD,MAAO,CACHL,WACA0B,cAAe1B,EAAS9L,KAAI,SAACyN,GAAD,MAAU,CAClCxB,EAAGwB,EAAIF,SAAStB,EAChBC,EAAGuB,EAAIF,SAASrB,EAChBc,OAAQS,EAAI/L,QAAQoL,MAAME,YChL/B,ICLKU,GCOPC,GFFQC,GAAgC,CACzCxB,cAAe,IACfG,eAAgB,IAChBsB,qBAAsB,4BACtBxB,aAAc,IACdC,kBAAmB,GACnBwB,0BAA2B,UAC3BC,8BAA+B,UAC/BX,cAAe,UACfY,mBAAoB,IACpBC,cAAe,KCyBZ,SAASC,GACZjC,EACAC,EACAc,EACAD,EACAoB,GAEA,IAAMC,EAAM,IAAIC,KACVC,EAAW,IAAID,KAErBD,EAAIvG,IAAKoE,EAAIc,EAAS,EAAI,GAAKb,EAAIc,EAAU,EAAI,EAAG,IAEpDoB,EAAIG,UAAUJ,GAEdC,EAAII,IAAIL,EAAOZ,UAAUkB,YAEzB,IAAMC,GAAYP,EAAOZ,SAASoB,EAAIP,EAAIO,EAI1C,OAFAL,EAASM,KAAKT,EAAOZ,UAAUsB,IAAIT,EAAIU,eAAeJ,IAE/CJ,EAGJ,SAASS,GACZC,EACAC,GAEA,IADgB,EACVC,EAAkC,GAClCC,EAA4B,GAFlB,cAIGH,EAAItI,OAJP,yBAILlB,EAJK,QAKZ,GAAIA,EAAK9D,QAAS,CACd,IAAM0N,EAAUxC,SAASC,cAAc,OAEjCwC,EAAY,IAAI/B,KAAY8B,GAClCC,EAAU9B,SAAStB,EAAoB,IAAhBqD,KAAKC,SAAkB,IAC9CF,EAAU9B,SAASrB,EAAoB,IAAhBoD,KAAKC,SAAkB,IAC9CF,EAAU9B,SAASoB,EAAoB,IAAhBW,KAAKC,SAAkB,IAE9C,IAsCMC,EAAS,IAAInB,KACnBmB,EAAOjC,SAAStB,EAAIwD,GAAgBjK,EAAK2C,KAAM8G,GAE/CO,EAAOjC,SAASrB,EAAIwD,GAAgBlK,EAAK4C,KAAM6G,GAE/C,IAAMnD,EAAWU,GACbgD,EAAOjC,SAAStB,EAChBuD,EAAOjC,SAASrB,EAChB+C,EAAe9C,YAGnB+C,EAAWS,KAAX,2BACOnK,GADP,IAEIgK,SACAH,YACAvD,SAAUA,EAASA,SACnB8D,sBAAuB9D,EAAS0B,cAChCqC,gBAAiB,CAAE5D,EAAGuD,EAAOjC,SAAStB,EAAGC,EAAGsD,EAAOjC,SAASrB,MAGhEiD,EAAQQ,KAAK,CACTxD,WAAY8C,EAAe9C,WAC3B3G,OACAsK,aApCiB,WACjBrE,GACIuD,EAAIxK,MADO,UAEP0K,EAFO,YAEQa,KACnB,SAACC,EAAgB7H,EAAcuE,GAA/B,OACIA,EACOsD,EAAEtO,QAAQoL,MAAMmD,iBACbhB,EAAe9C,WAAWiB,cAC7B4C,EAAEtO,QAAQoL,MAAMoD,gBACbjB,EAAe9C,WAAWiB,kBA4B5C+C,YA9DgB,WAChB1E,GACIuD,EAAIxK,MADO,UAEP0K,EAFO,YAEQa,KACnB,SAACC,EAAgB7H,EAAcuE,GAA/B,OACIA,EACOsD,EAAEtO,QAAQoL,MAAMmD,iBACbhB,EAAe9C,WAAW4B,8BAC7BiC,EAAEtO,QAAQoL,MAAMoD,gBACbjB,EAAe9C,WAAW4B,iCAE5CtC,GACIuD,EAAIxK,MAAM7D,QACN,SAAC+D,GAAD,OAAUA,EAAKL,OAASmB,EAAK8C,IAAM5D,EAAKN,KAAOoB,EAAK8C,MAF7C,UAIP4G,EAJO,YAIQa,KACnB,SAACC,EAAgB7H,EAAcuE,GAA/B,OACIA,EACOsD,EAAEtO,QAAQoL,MAAMmD,iBACbhB,EAAe9C,WAAW2B,0BAC7BkC,EAAEtO,QAAQoL,MAAMoD,gBACbjB,EAAe9C,WAAW2B,8BA0C5CsB,cAxEZ,2BAA+B,IAJf,8BAiFhB,IAAMW,EA0CV,SACIb,EACAD,GAKA,IAHA,IAAMmB,EAAOd,KAAKe,IAAL,MAAAf,KAAI,YAAQJ,EAAWlP,KAAI,SAACwF,GAAD,OAAUA,EAAK2C,UACjD2B,EAAOwF,KAAKe,IAAL,MAAAf,KAAI,YAAQJ,EAAWlP,KAAI,SAACwF,GAAD,OAAUA,EAAK4C,UACjD2H,EAAkC,GAHrB,WAIV9D,GACL,IALe,eAKNC,GACL,IACKgD,EAAWtD,MAAK,SAACpG,GAAD,OAAUA,EAAK2C,OAAS8D,GAAKzG,EAAK4C,OAAS8D,KAC9D,CACE,IAAMJ,EAAWU,GACbiD,GAAgBxD,EAAGgD,GACnBS,GAAgBxD,EAAG+C,GACnBA,EAAe9C,YAGnB4D,EAAWJ,KAAK,CACZxH,KAAM8D,EACN7D,KAAM8D,EACN7D,UAAW,EACXC,GAAI,QAAU2D,EAAIC,EAClBJ,SAAUA,EAASA,SACnB8D,sBAAuB9D,EAAS0B,kBAhBnCtB,EAAI,EAAGA,GAAKpC,EAAMoC,IAAM,EAAxBA,IADJD,EAAI,EAAGA,GAAKmE,EAAMnE,IAAM,EAAxBA,GAuBT,OAAO8D,EAxEYO,CAAepB,EAAYD,GAE9C,MAAO,CACHC,WAAW,GAAD,OAAMA,EAAN,YAAqBa,IAC/BZ,UACAhD,WAAY8C,EAAe9C,YAI5B,SAASsD,GAAgBvH,EAAe+G,GAC3C,IAAMsB,EAAMrC,GACR,EACA,GACAe,EAAejC,OACfiC,EAAelC,MACfkC,EAAed,QAEnB,OACIqC,SAAStI,EAAM3H,aACV0O,EAAe9C,WAAWC,cACvB6C,EAAe9C,WAAWE,cAClCkE,EAAItE,EAIL,SAASyD,GAAgBxH,EAAe+G,GAC3C,IAAMsB,EAAMrC,GACR,EACA,GACAe,EAAejC,OACfiC,EAAelC,MACfkC,EAAed,QAEnB,OAEQqC,SAAStI,EAAM3H,aACd0O,EAAe9C,WAAWI,eACvB0C,EAAe9C,WAAWE,cAC9BkE,EAAIrE,EC5KT,SAASuE,GACZC,EACAzB,EACA0B,GAEA,IAAMC,ECJH,SAAiCF,GACpC,OAAOtO,IACHA,KAAM,SAACyO,GAAD,MAAiC,CACnCA,EAASC,OAAOzM,KAChBwM,EAASC,OAAO1M,OAEpBhC,IACAA,KANGA,CAOLsO,GDJuBK,CAAwBL,GAE7ChK,EA2aD,SACHsK,EACA/B,GAEA,OAAO+B,EAAgBhR,KAAI,SAACgR,EAAiB9I,GAAlB,OACvB+I,GACY,EAAR/I,EACA,EACA+G,EACA+B,EACAtD,GAAYwD,SACX,MAtb0BC,CAC/BP,EACA3B,GAGJ2B,EAAiBlJ,SAAQ,SAAC0J,EAAGlJ,GACzBmJ,GAAmB,EAARnJ,EAAW,EAAG+G,EAAgB0B,GAAO,MAOpD,IAJA,IAAIW,EAAM,EAEJC,EAA6D,GAdrE,WAgBWxF,GACL,IAAMyF,EAAad,EAAM3E,GAEzB6E,EAAiBlJ,SAAQ,SAAC0J,EAAGlJ,GACzBmJ,GAAmB,EAARnJ,EAAWoJ,EAAKrC,EAAgB0B,GAAO,MAEtDW,IAEA,IAAMG,EAAc,wBAChB1F,EAAI,EAAJ,UACM2E,EAAM9E,MAAK,SAACiF,GACR,IAAIa,EAAI,YAAOF,EAAWG,cAO1B,OAN8B,IAA1BD,EAAKA,EAAK/M,OAAS,GACnB+M,EAAOA,EAAK3M,MAAM,EAAG2M,EAAK/M,OAAS,GAEnC+M,EAAKA,EAAK/M,OAAS,GAAK,EAGrBkM,EAASc,aAAaC,KAAK,OAASF,EAAKE,KAAK,eAT/D,aACM,EASId,OAAO1M,GACXoN,EAAWV,OAAOzM,MAE5BqC,EAAK,sBACEA,GADF,YAEEmL,GACCJ,IACAD,EAAWV,OAAO1M,GAClBkN,EACAV,EACAD,EACA1B,EACAuC,EACAzF,KAIRuF,IAEA,IAAMQ,EAAgB,2BACfN,GADe,IAElBV,OAAO,2BACAU,EAAWV,QADZ,IAEFzM,KAAMmN,EAAWV,OAAO1M,GACxBA,GAAIqN,QAIZF,EAAY5B,KAAK,CAAErH,GAAIyD,EAAGgG,SAAS,eAAMD,KAEzC,IAAME,EAAStB,EAAM3E,EAAI,GAEzB,GACKiG,GACGA,EAAOL,aAAaK,EAAOL,aAAahN,OAAS,GAAK,IACzDqN,EACH,CAAC,IAAD,EACMN,EACAM,IACAN,EAAI,YAAOM,EAAOL,eACbK,EAAOL,aAAahN,OAAS,KAGtC,IAAIsN,EAAcV,EAAYA,EAAY5M,OAAS,GAE7CuN,EAAoB,WACtBtB,EAAiBlJ,SAAQ,SAAC0J,EAAGlJ,GACzBmJ,GAAmB,EAARnJ,EAAWoJ,EAAKrC,EAAgB0B,GAAO,MAEtDW,IAEA,MAAyBW,EAAjB3J,EAAR,EAAQA,GAAIyJ,EAAZ,EAAYA,SAEZrL,EAAK,sBACEA,GADF,YAEEmL,GACCE,EAASjB,OAAO1M,GAChB2N,EAASjB,OAAOzM,KAChBiN,EACAV,EACAD,EACA1B,EACA8C,EACAzJ,GACA,KAGRsI,EAAiBlJ,SAAQ,SAAC0J,EAAGlJ,GACzBmJ,GAAmB,EAARnJ,EAAWoJ,EAAKrC,EAAgB0B,GAAO,MAEtDW,IAEAC,EAAY1P,OAGhB,GACI6P,IACW,QAAX,EAAAO,SAAA,eAAaF,SAASJ,aAAaC,KAAK,QACpCF,EAAKE,KAAK,MACqB,IAAnCK,EAAYF,SAASI,WAGf,IAFNF,EAAYF,SAASJ,aACjBM,EAAYF,SAASJ,aAAahN,OAAS,GAG/CuN,SAEA,MACMF,GAAUT,EAAY5M,OAAS,GAChC+M,IACc,QAAX,EAAAO,SAAA,eAAaF,SAASJ,aAAaC,KAAK,QACpCF,EAAKE,KAAK,MACpB,CAAC,IAAD,EACEM,IACAD,EAAcV,EAAYA,EAAY5M,OAAS,MAhHtDoH,EAAI,EAAGA,EAAI2E,EAAM/L,OAAQoH,IAAM,EAA/BA,GA0HT,OAJArF,EAAMgB,SAAQ,SAAClC,GAAD,OAAUmL,EAAMyB,MAAMvD,IAAIrJ,EAAK6M,gBAE7CC,GAAU5L,EAAOuI,EAAe9C,WAAW6B,oBAEpCtH,EAGJ,SAASmL,GACZxN,EACAD,EACAkN,EACAV,EACAD,EACA1B,EACA4B,EACA0B,EACAC,GAEA,IAAMC,EAAY7B,EAAiB8B,WAAU,SAACC,GAAD,OAAatO,IAASsO,KAC7DC,EAAUhC,EAAiB8B,WAAU,SAACC,GAAD,OAAavO,IAAOuO,KACzDE,EAA8C,GAC9CC,EAAcN,EACd9E,GAAYqF,kBACZrF,GAAYsF,YAElB,IAAmB,IAAfP,IAAiC,IAAbG,EACpB,IAAK,IAAI7G,EAAI,EAAGA,EAAI6E,EAAiBjM,OAAQoH,IACrCA,IAAM0G,GAAaG,IAAYH,GAC/BQ,GAAe,EAAJlH,EAAOuF,EAAKrC,EAAgB0B,GACvCkC,EAAqBlD,KACjBsB,GACQ,EAAJlF,EAAQ,EACRuF,EACArC,EACA4B,EACAiC,EACAP,KAGDxG,EAAI0G,GAAa1G,EAAI6G,GAC5BM,GACQ,EAAJnH,EACAuF,EACArC,EACA0B,GACA,EACAhD,GAAUwF,MAEd9B,GAAe,EAAJtF,EAAQ,EAAGuF,EAAKrC,EAAgB0B,GAAO,IAC3C5E,EAAI0G,GAAa1G,EAAI6G,GAC5BM,GACQ,EAAJnH,EACAuF,EACArC,EACA0B,GACA,EACAhD,GAAUwF,MAEd9B,GAAe,EAAJtF,EAAQ,EAAGuF,EAAKrC,EAAgB0B,GAAO,IAC3C5E,IAAM0G,EACTA,EAAYG,GACZM,GACQ,EAAJnH,EACAuF,EACArC,EACA0B,GACA,EACA6B,EAAW7E,GAAUyF,MAAQzF,GAAUwF,MAE3CN,EAAqBlD,KACjBsB,GACQ,EAAJlF,EAAQ,EACRuF,EACArC,EACA4B,EACAiC,EACAP,MAIRW,GACQ,EAAJnH,EACAuF,EACArC,EACA0B,GACA,EACA6B,EAAW7E,GAAU0F,KAAO1F,GAAUwF,MACtC,GAEJN,EAAqBlD,KACjBsB,GACQ,EAAJlF,EAAQ,EACRuF,EACArC,EACA4B,EACAiC,EACAP,KAILxG,IAAM6G,EACTH,EAAYG,EACZM,GACQ,EAAJnH,EACAuF,EACArC,EACA0B,GACA,EACA6B,EAAW7E,GAAUwF,KAAOxF,GAAUyF,OAG1CF,GACQ,EAAJnH,EACAuF,EACArC,EACA0B,GACA,EACA6B,EAAW7E,GAAUwF,KAAOxF,GAAU0F,MACtC,GAIRhC,GAAe,EAAJtF,EAAOuF,EAAKrC,EAAgB0B,GAAO,GAI1D,OAAOkC,EAGJ,SAASxB,GACZiC,EACAC,EACAtE,EACA0B,EACA6C,GAEA,IAAM7G,EAAUC,SAASC,cAAc,OACvCF,EAAQlC,UAAY,OACpBkC,EAAQG,MAAMC,OACTyG,EACKvE,EAAe9C,WAAWC,cAC1B6C,EAAe9C,WAAWG,mBAAqB,KACzDK,EAAQG,MAAME,QACTwG,EACKvE,EAAe9C,WAAWG,kBAC1B2C,EAAe9C,WAAWI,gBAAkB,KAEtD,IAAMkH,EAAa,IAAInG,KAAYX,GAEnC8G,EAAWlG,SAAStB,EAAIwD,GAAgB6D,EAAQrE,GAChDwE,EAAWlG,SAASrB,EAAIwD,GAAgB6D,EAAQtE,GAEhD0B,EAAMyB,MAAMvD,IAAI4E,GAGpB,SAASC,GACLzE,EACA1B,EACAoG,GAEA,IAAMC,EAAehH,SAASC,cAAc,OAE5C+G,EAAa9G,MAAMC,MAAQ,MAC3B6G,EAAa9G,MAAME,OAAS,MAE5B4G,EAAa9G,MAAMG,UAC+B,EAA9CgC,EAAe9C,WAAWG,kBAC1B,uBACJsH,EAAa9G,MAAMI,aAC+B,EAA9C+B,EAAe9C,WAAWG,kBAC1B,uBAEAqH,EACAC,EAAa9G,MAAMK,YAC+B,EAA9C8B,EAAe9C,WAAWG,kBAC1B,YACA2C,EAAe9C,WAAWiB,cAE9BwG,EAAa9G,MAAM+G,WAC+B,EAA9C5E,EAAe9C,WAAWG,kBAC1B,YACA2C,EAAe9C,WAAWiB,cAGlC,IAAM0G,EAAc,IAAIxG,KAAYsG,GAOpC,OALAE,EAAYvG,SAAStB,EACjBsB,EAAStB,EACqC,EAA9CgD,EAAe9C,WAAWG,mBAAyBqH,EAAQ,GAAK,GACpEG,EAAYvG,SAASrB,EAAIqB,EAASrB,EAE3B4H,EAGJ,SAASZ,GACZI,EACAC,EACAtE,EACA0B,EACAoD,EACAC,EACAR,GAEA,IAAMS,EAAQ,IAAI5F,KACZ6F,EAAWtH,SAASC,cAAc,OACxCqH,EAASzJ,UAAY,OACrByJ,EAASpH,MAAMC,MAAQkC,EAAe9C,WAAWG,kBAAoB,KACrE4H,EAASpH,MAAME,OAASiC,EAAe9C,WAAWI,eAAiB,KAEnE,IAAM4H,EAAU,IAAI7G,KAAY4G,GAOhC,OALAC,EAAQ5G,SAAStB,EAAIwD,GAAgB6D,EAAQrE,GAC7CkF,EAAQ5G,SAASrB,EAAIwD,GAAgB6D,EAAQtE,GAE7CgF,EAAMpF,IAAIsF,GAEFH,GACJ,KAAKrG,GAAU0F,KACXY,EAAMpF,IAAI6E,GAAgBzE,EAAgBkF,EAAQ5G,UAAU,IAC5D,MACJ,KAAKI,GAAUyF,MACXa,EAAMpF,IAAI6E,GAAgBzE,EAAgBkF,EAAQ5G,UAAU,IAEhE,KAAKI,GAAUwF,MAKnB,IAAMiB,EAAWxH,SAASC,cAAc,OACxCuH,EAAS3J,UAAY,OACrB2J,EAAStH,MAAMC,MACXkC,EAAe9C,WAAWC,eAAiB2H,EAAM,EAAI,GAAK,KAC9DK,EAAStH,MAAME,OAASiC,EAAe9C,WAAWG,kBAAoB,KAEtE,IAAM+H,EAAU,IAAI/G,KAAY8G,GAEhCC,EAAQ9G,SAAStB,EACbkI,EAAQ5G,SAAStB,GAChB8H,EAAM9E,EAAe9C,WAAWC,cAAgB,EAAI,IAChDoH,GAAU,EAAI,GACvBa,EAAQ9G,SAASrB,EAAIiI,EAAQ5G,SAASrB,EACtC+H,EAAMpF,IAAIwF,GAEV1D,EAAMyB,MAAMvD,IAAIoF,GAGb,SAAShB,GACZK,EACAC,EACAtE,EACA0B,GAEA,IAAMsD,EAAQ,IAAI5F,KACZ6F,EAAWtH,SAASC,cAAc,OACxCqH,EAASzJ,UAAY,OACrByJ,EAASpH,MAAMC,MAAQkC,EAAe9C,WAAWG,kBAAoB,KACrE4H,EAASpH,MAAME,OAASiC,EAAe9C,WAAWI,eAAiB,KAEnE,IAAM4H,EAAU,IAAI7G,KAAY4G,GAEhCC,EAAQ5G,SAAStB,EAAIwD,GAAgB6D,EAAQrE,GAC7CkF,EAAQ5G,SAASrB,EAAIwD,GAAgB6D,EAAQtE,GAE7CgF,EAAMpF,IAAIsF,GAEV,IAAMG,EAAY1H,SAASC,cAAc,OACzCyH,EAAU7J,UAAY,OACtB6J,EAAUxH,MAAMC,MAAQkC,EAAe9C,WAAWC,cAAgB,EAAI,KACtEkI,EAAUxH,MAAME,OAASiC,EAAe9C,WAAWG,kBAAoB,KAEvE,IAAMiI,EAAW,IAAIjH,KAAYgH,GAEjCC,EAAShH,SAAStB,EACdkI,EAAQ5G,SAAStB,EAAIgD,EAAe9C,WAAWC,cAAgB,EACnEmI,EAAShH,SAASrB,EACdiI,EAAQ5G,SAASrB,EAAI+C,EAAe9C,WAAWI,eAAiB,EAEpE0H,EAAMpF,IAAI0F,GAEV,IAAMC,EAAY5H,SAASC,cAAc,OACzC2H,EAAU/J,UAAY,OACtB+J,EAAU1H,MAAMC,MAAQkC,EAAe9C,WAAWC,cAAgB,EAAI,KACtEoI,EAAU1H,MAAME,OAASiC,EAAe9C,WAAWG,kBAAoB,KAEvE,IAAMmI,EAAW,IAAInH,KAAYkH,GAEjCC,EAASlH,SAAStB,EACdkI,EAAQ5G,SAAStB,EAAIgD,EAAe9C,WAAWC,cAAgB,EACnEqI,EAASlH,SAASrB,EACdiI,EAAQ5G,SAASrB,EAAI+C,EAAe9C,WAAWI,eAAiB,EAEpE0H,EAAMpF,IAAI4F,GAEV9D,EAAMyB,MAAMvD,IAAIoF,GAmBpB,SAAShD,GACLqC,EACAC,EACAtE,EACA7O,EACA0S,EACAP,GAEA,IAAMnD,EAAUxC,SAASC,cAAc,OAEjCwF,EAAc,IAAI/E,KAAY8B,GACpCiD,EAAY9E,SAAStB,EAAoB,IAAhBqD,KAAKC,SAAkB,IAChD8C,EAAY9E,SAASrB,EAAoB,IAAhBoD,KAAKC,SAAkB,IAChD8C,EAAY9E,SAASoB,EAAoB,IAAhBW,KAAKC,SAAkB,IAEhD,IAAMmF,EAAW,IAAIrG,KAKrB,OAJAqG,EAASnH,SAASoH,KAAKlF,GAAgB6D,EAAQrE,IAE/CyF,EAASnH,SAASqH,KAAKlF,GAAgB6D,EAAQtE,IAExC,CACHoD,cACAqC,WACA5B,cACA+B,OAAQ,CACJ1I,WACI2G,IAAgBpF,GAAYwD,QAA5B,2BAEajC,EAAe9C,YAF5B,IAGUC,cAC8C,IAA1C6C,EAAe9C,WAAWC,gBAElC6C,EAAe9C,WACzB3G,KAAM,CACF8C,GAAI,UAAYgL,EAAS,IAAMC,EAC/BpL,KAAMmL,EACNlL,KAAMmL,EACNlL,UAAWkL,EACX7R,QAAStB,GAEb0P,aAAc,aACdK,YAAa,aACbf,WAEJmD,QE9dR,SAASuC,GAAY/H,EAAeC,GAChC,IAAMmB,EAAS,IAAIE,KAAwB,GAAItB,EAAQC,EAAQ,EAAG,KAClEmB,EAAOZ,SAASoB,EAAI,KAEpB,IAAMyD,EAAQ,IAAI/D,KAClB+D,EAAM2C,WAAa,KAEnB,IAAMC,EAAW,IAAIC,KAErB9G,EAAO+G,OAASnI,EAAQC,EACxBmB,EAAOgH,yBACPH,EAASI,QAAQrI,EAAOC,GAExB,IAAMqI,EAAW,IAAIC,KAAkBnH,EAAQ6G,EAASO,YAQxD,OAPAF,EAASG,YAAc,GACvBH,EAASI,YAAc,KAEvBJ,EAASK,aAAaC,KAAOtH,KAAYuH,IACzCP,EAASK,aAAaG,MAAQxH,KAAYyH,OAC1CT,EAASU,UAAW,EAEb,CACH5H,SACA6G,WACA5C,QACAiD,YAID,SAASW,GACZrF,EACAsF,EACAC,GAEA,GAAID,EAAeE,QAAS,CACxB,IAAMC,EAAWH,EAAeE,QAAQE,YAClCC,EAAYL,EAAeE,QAAQI,aACzC5F,EAAMqE,SAASI,QAAQgB,EAAUE,GACjC3F,EAAMxC,OAAO+G,OAASkB,EAAWE,EACjC3F,EAAMxC,OAAOgH,yBACbxE,EAAM0E,SAASmB,eACfN,EAAS,eACFvF,KAKf,SAAS8F,GAAO9F,GACRA,GACAA,EAAMqE,SAASyB,OAAO9F,EAAMyB,MAAOzB,EAAMxC,QAI1C,SAASuI,GAAQ/F,GACpBgG,uBAAsB,kBAAMD,GAAQ/F,MAEpCiG,KAAMC,SAENlG,EAAM0E,SAASwB,SAEfJ,GAAO9F,GAGJ,SAAS2B,GAAUwE,EAA0BC,GAChDH,KAAMI,YAD4D,oBAG/CF,GAH+C,IAGlE,2BAA0B,CAAC,IAAhBG,EAAe,QAChBzH,EAASyH,EAAK5E,YACdpH,EAASgM,EAAKvC,SAEhBlF,GAAUvE,IACV,IAAI2L,KAAMM,MAAM1H,EAAOjC,UAClBnJ,GACG,CACI6H,EAAGhB,EAAOsC,SAAStB,EACnBC,EAAGjB,EAAOsC,SAASrB,EACnByC,EAAG1D,EAAOsC,SAASoB,GAEvBW,KAAKC,SAAWwH,EAAWA,GAE9BI,OAAOP,KAAMQ,OAAOC,YAAYC,OAChCC,QAEL,IAAIX,KAAMM,MAAM1H,EAAOgI,UAClBpT,GACG,CACI6H,EAAGhB,EAAOuM,SAASvL,EACnBC,EAAGjB,EAAOuM,SAAStL,EACnByC,EAAG1D,EAAOuM,SAAS7I,GAEvBW,KAAKC,SAAWwH,EAAWA,GAE9BI,OAAOP,KAAMQ,OAAOC,YAAYC,OAChCC,UA9BqD,8BAmClE,IAAIX,KAAMM,MAAMO,MACXrT,GAAG,GAAe,EAAX2S,GACPW,SAASjB,IACTc,QAiDF,SAASI,GACZzB,EACAlH,EACAiH,EACA2B,GAEA,IAAMzL,EAAayB,GACbZ,EAAUiJ,EAAeE,QAAgBI,aACzCxJ,EAASkJ,EAAeE,QAAgBE,YAExC1F,EAAQmE,GAAY/H,EAAOC,GAEhCiJ,EAAeE,QAAgB0B,YAAYlH,EAAMqE,SAASO,YAC3D5E,EAAM0E,SAASyC,iBAAiB,UAAU,kBAAMrB,GAAO9F,MACvDA,EAAM0E,SAASmB,eACf,IAVgB,EAiBVuB,EAAyB,GAEzBrR,EAAQqI,GAAYC,EATa,CACnCb,OAAQwC,EAAMxC,OACdhC,aACAa,SACAD,UAdY,cAqBGrG,EAAMwI,YArBT,IAqBhB,2BAAqC,CAAC,IAA3B1J,EAA0B,QAC7BA,EAAK6J,YACLsB,EAAMyB,MAAMvD,IAAIrJ,EAAK6J,WACrB0I,EAAQpI,KAAKnK,EAAK6J,aAxBV,8BA2BhB,IAAMyH,EAA2BpQ,EAAMwI,WAClCvO,QAAO,SAAC6E,GAAD,SAAWA,EAAKgK,SAAUhK,EAAK6J,cACtCrP,KACG,SAACwF,GAAD,MACK,CACG6M,YAAa7M,EAAK6J,UAClBqF,SAAUlP,EAAKgK,WAG/B8C,GAAUwE,EAAO3K,EAAW6B,oBAE5B,IAAMoC,EAAOd,KAAKe,IAAL,MAAAf,KAAI,YAAQ5I,EAAMwI,WAAWlP,KAAI,SAACwF,GAAD,OAAUA,EAAK2C,UACvD6P,EAAe7L,EAAW6B,mBAAqBoC,EA4BrD,OA1BA3E,GACIuD,EAAIxK,MACJkC,EAAMwI,YACN,SAACc,EAAgB7H,GACb8P,YAAW,kBAAMtH,EAAMyB,MAAMvD,IAAImB,KAAI7H,EAAO6P,EAAe,MAInEE,OAAOJ,iBACH,UACA,kBAAM9B,GAAerF,EAAOsF,EAAgBC,MAE5C,GAGJiC,GACIxH,EACAjK,EAAMwI,WACDvO,QAAO,SAAC6E,GAAD,OAAUA,EAAKgK,UACtBxP,KAAI,SAACwF,GAAD,OAAUA,EAAKgK,UACxBrD,GAGJ+J,EAASvF,GACTiH,EAAkBQ,GAAeC,OAE1B3R,EAGJ,SAASyR,GACZxH,EACA2H,EACAnM,GAEA,IADF,EACQoM,EAAc,IAAIlK,KAD1B,cAGyBiK,GAHzB,IAGE,2BAAkC,CAAC,IAAxB5D,EAAuB,QAC9B6D,EAAYC,cACR,IAAInK,KAAcqG,EAASnH,SAAStB,EAAGyI,EAASnH,SAASrB,KALnE,8BASE,IAAMuM,EAAO,IAAIpK,KACjBkK,EAAYG,QAAQD,GAEpB,IAAME,EAAS,IAAItK,KACnBkK,EAAYK,UAAUD,GAEtBhI,EAAMxC,OAAOZ,SAAStB,EAAI0M,EAAO1M,EACjC0E,EAAMxC,OAAOZ,SAASrB,EAAIyM,EAAOzM,EACjCyE,EAAM0E,SAASpK,OAAO2D,KAAK,IAAIP,KAAcsK,EAAO1M,EAAG0M,EAAOzM,EAAG,IAEjE,IAAM2M,EAAMlI,EAAMxC,OAAO0K,KAAOvJ,KAAKwJ,GAAK,KACpCC,EAAO,EAAIzJ,KAAK0J,KAAK1J,KAAK2J,IAAIJ,EAAM,GAAKlI,EAAMxC,OAAO+G,QACtDgE,EAAK5J,KAAK6J,KACXV,EAAKxM,EAAIE,EAAWC,eAAiB,EAAIkD,KAAK2J,IAAIF,EAAO,IAExDK,EAAK9J,KAAK6J,KACXV,EAAKvM,EAAIC,EAAW8B,eAAiB,EAAIqB,KAAK2J,IAAIJ,EAAM,IAGvDQ,EAAS,CACXpN,EAAG0E,EAAMxC,OAAOZ,SAAStB,EACzBC,EAAGyE,EAAMxC,OAAOZ,SAASrB,EACzByC,EAAGgC,EAAMxC,OAAOZ,SAASoB,GAE7B,IAAIiI,KAAMM,MAAMmC,GACXjV,GACG,CACI6H,EAAG0E,EAAMxC,OAAOZ,SAAStB,EACzBC,EAAGyE,EAAMxC,OAAOZ,SAASrB,EACzByC,EAAsB,IAAnBW,KAAKe,IAAI6I,EAAIE,IAEpB,KAEHjC,OAAOP,KAAMQ,OAAOkC,UAAUC,KAC9B7B,UAAS,WACN/G,EAAMxC,OAAOZ,SAAS1F,IAAIwR,EAAOpN,EAAGoN,EAAOnN,EAAGmN,EAAO1K,MAExD4I,QAEL5G,EAAMxC,OAAOgH,yBAEbxE,EAAM0E,SAASwB,SChQZ,SAAS2C,GACZC,EACAtL,EACAkH,EACAqE,GAEA,GAAIvL,GAAUsL,EAAapK,WAAagG,EAAU,CAC9C,IAAMgE,EAAS,CACXpN,EAAGkC,EAAOZ,SAAStB,EACnBC,EAAGiC,EAAOZ,SAASrB,EACnByC,EAAGR,EAAOZ,SAASoB,GAEvB,IAAIiI,KAAMM,MAAMmC,GACXjV,GACG,CACI6H,EAAGwN,EAAapK,UAAU9B,SAAStB,EACnCC,EAAGuN,EAAapK,UAAU9B,SAASrB,EACnCyC,EAAG,GAEP,KAEHwI,OAAOP,KAAMQ,OAAOkC,UAAUC,KAC9B7B,UAAS,WACNvJ,EAAOZ,SAAS1F,IAAIwR,EAAOpN,EAAGoN,EAAOnN,EAAGmN,EAAO1K,GAC3C8K,EAAapK,YACbgG,EAASpK,OAAS,IAAI0O,KAAQN,EAAOpN,EAAGoN,EAAOnN,EAAG,OAGzDqL,QACAmC,WAAWA,IAIjB,SAASE,GACZC,EACAC,IAtFG,SACHA,GAEIA,GACAA,EAAc5K,WAAWxH,SAAQ,SAAClC,GAC1BA,EAAK6J,WAAa7J,EAAKqK,kBACvBrK,EAAK6J,UAAU9B,SAAStB,EAAIzG,EAAKqK,gBAAgB5D,EACjDzG,EAAK6J,UAAU9B,SAASrB,EAAI1G,EAAKqK,gBAAgB3D,GAGrD1G,EAAKsG,SAASpE,SAAQ,SAACiF,EAASzE,GAC5ByE,EAAQY,SAAStB,EAAIzG,EAAKoK,sBAAsB1H,GAAO+D,EACvDU,EAAQY,SAASrB,EAAI1G,EAAKoK,sBAAsB1H,GAAOgE,EACvDS,EAAQjL,QAAQoL,MAAME,OAClBxH,EAAKoK,sBAAsB1H,GAAO8E,aA0ElD+M,CAAgBD,GAChB,IAAML,EACFI,IAAc,OACdC,QADc,IACdA,OADc,EACdA,EAAe5K,WAAWtD,MAAK,SAACpG,GAAD,OAAUA,EAAK8C,KAAOuR,MAEzD,GAAIJ,GAAgBK,EAAe,CAC/B,IAAMhN,EAAQgN,EAAc3N,WAExBsN,EAAapK,WAAaoK,EAAa5J,kBACvC4J,EAAapK,UAAU9B,SAASrB,EAC5BuN,EAAa5J,gBAAgB3D,EAAIY,EAAMmB,cAAgB,GAE/D6L,EAAc5K,WACTvO,QAAO,SAAC6E,GAAD,OAAUA,EAAK4C,MAAQqR,EAAarR,QAC3CV,SAAQ,SAAClC,IAlFtB,SACIA,EACAsH,EACA2M,GAEIjU,EAAK4C,KAAOqR,EAAarR,OACrB5C,EAAKqK,iBAAmBrK,EAAK6J,YAC7B7J,EAAK6J,UAAU9B,SAASrB,EACpB1G,EAAKqK,gBAAgB3D,EAAIY,EAAMmB,eAGvCzI,EAAKsG,SAASpE,SAAQ,SAACiF,EAASzE,GAC5ByE,EAAQY,SAASrB,EACb1G,EAAKoK,sBAAsB1H,GAAOgE,EAAIY,EAAMmB,kBAIpDzI,EAAK4C,OAASqR,EAAarR,OAC3B5C,EAAKsG,SAAS,GAAGyB,SAASrB,EACtB1G,EAAKoK,sBAAsB,GAAG1D,EAAIY,EAAMmB,cAAgB,EAE5DzI,EAAKsG,SAAS,GAAGpK,QAAQoL,MAAME,OAC3BF,EAAMP,eAAiB,EACvBO,EAAMT,aAAe,EACrBS,EAAMmB,cACN,KACJzI,EAAKsG,SAAS,GAAGyB,SAASrB,EACtB1G,EAAKoK,sBAAsB,GAAG1D,EAAIY,EAAMmB,eAwDpC+L,CAAuBxU,EAAMsH,EAAO2M,OChG7C,SAASQ,GAAQC,GACpB,OAAQA,GACJ,IAAK,YACD,OAAO,eAAC,GAAD,CAAMxP,UAAU,uBAC3B,IAAK,UACD,OAAO,eAAC,GAAD,CAAMA,UAAU,gBAG3B,QACI,OAAO,eAAC,GAAD,CAAMA,UAAU,2B,SLjBvBgD,O,qBAAAA,I,6BAAAA,I,0CAAAA,Q,cCOPC,O,eAAAA,I,eAAAA,I,kBAAAA,Q,KIqDUwM,OAvCf,SAAsB3P,GAClB,OAAOA,EAAMhF,KAAK9D,QACd,uBACI+I,UAAS,0BAC+B,aAApCD,EAAMhF,KAAK9D,QAAQA,QAAQwY,KACrB,gBACA,kBAJd,UAOI,sBAAKzP,UAAU,MAAf,SACI,sBAAKA,UAAU,iBAAf,SACI,yBACI7J,KAAK,SACL6J,UAAU,kCACVY,QAASb,EAAM4P,YAHnB,SAKI,eAAC,GAAD,CAAM1P,UAAU,uBAI5B,uBAAKD,UAAU,2BAAf,UACI,sBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,wBAAf,SACKD,EAAMhF,KAAK9D,QAAQA,QAAQoD,SAGpC,sBAAK2F,UAAU,gBAAf,SACI,sBAAKA,UAAU,SAAf,SACI,wBAAMA,UAAU,2BAAhB,iBACWwP,GAAQzP,EAAMhF,KAAK9D,QAAQA,QAAQwY,MAD9C,WAEiB1P,EAAMhF,KAAK9D,QAAQA,QAAQwY,KAF5C,oBAQhB,MCoCOG,OA9Ef,SAAsB7P,GAClB,IAAM8P,EACF9P,EAAMqP,iBAAmBrP,EAAMhF,KAAK8C,IACpCkC,EAAM+P,YAAc/P,EAAMhF,KAAK8C,GAE7BkS,EAAoC,CACtCzN,MAAOvC,EAAM2B,WAAWC,cAAc7L,WAAa,KACnDyM,QACKsN,EACK9P,EAAM2B,WAAWI,eACjB/B,EAAM2B,WAAW8B,cACjBzD,EAAM2B,WAAWI,gBACrBhM,WAAa,KACnBka,YAAajQ,EAAM2B,WAAWG,kBAAoB,KAClDoO,YAAaJ,EACP9P,EAAM2B,WAAW2B,0BACjBtD,EAAM2B,WAAW0B,qBACvB8M,YAAa,SAGjB,OAAOnQ,EAAMhF,KAAK9D,QACd,uBACI+I,UAAS,eAC+B,aAApCD,EAAMhF,KAAK9D,QAAQA,QAAQwY,KACrB,gBACA,kBAEVpN,MAAO0N,EACPI,YAAa,WAELpQ,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMsQ,cACNtQ,EAAMsF,eAENtF,EAAMsQ,aAAatQ,EAAMhF,KAAK8C,IAC9BkC,EAAMsF,iBAGdA,aAAc,WAENtF,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMuQ,iBACNvQ,EAAMsF,eAENtF,EAAMuQ,qBAAgBC,GACtBxQ,EAAMsF,iBAGdK,YAAa,WAEL3F,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMuQ,iBACNvQ,EAAM2F,cAEN3F,EAAMuQ,gBAAgBvQ,EAAMhF,KAAK8C,IACjCkC,EAAM2F,gBAlClB,UAsCI,sBAAK1F,UAAU,MAAf,SACI,sBAAKA,UAAU,2BAAf,SACK7F,EAAmB4F,EAAMhF,KAAK9D,QAAQA,QAAQoD,UAGtDwV,GACG,sBAAK7P,UAAU,gBAAf,SACI,sBAAKA,UAAU,SAAf,SACI,wBAAMA,UAAU,2BAAhB,iBACWwP,GAAQzP,EAAMhF,KAAK9D,QAAQA,QAAQwY,MAD9C,WAEiB1P,EAAMhF,KAAK9D,QAAQA,QAAQwY,KAF5C,iBAQhB,MChGD,SAAS9O,GAAOuF,GACfA,GAASA,EAAM0E,SAASG,YAAwC,GAA1B7E,EAAMxC,OAAOZ,SAASoB,IAC5DgC,EAAMxC,OAAOZ,SAASoB,GAAK,GAC3BgC,EAAMxC,OAAOgH,yBAEbxE,EAAM0E,SAASwB,UAIhB,SAASvL,GAAQqF,GAChBA,GAASA,EAAM0E,SAASI,YAAwC,IAA1B9E,EAAMxC,OAAOZ,SAASoB,IAC5DgC,EAAMxC,OAAOZ,SAASoB,GAAK,IAC3BgC,EAAMxC,OAAOgH,yBACbxE,EAAM0E,SAASwB,UC+JRoE,OAjJf,SAAuBzQ,GACnB,MAA0B0Q,qBAA1B,mBAAOvK,EAAP,KAAcuF,EAAd,KACA,EAA4CgF,qBAA5C,mBAAOrB,EAAP,KAAuBsB,EAAvB,KACA,EAA4CD,mBACxC9C,GAAegD,MADnB,mBAAOP,EAAP,KAAuBjD,EAAvB,KAGM3B,EAAiBoF,iBAAuB,MAC9C,EACIH,qBADJ,mBAAOpB,EAAP,KAAsBwB,EAAtB,KAmBA1B,GAAWC,EAAgBC,GAE3ByB,qBAAU,WACFV,IAAmBzC,GAAeC,OAAS1H,GAC3CqF,GAAerF,EAAOsF,EAAgBC,KAE3C,CAAC2E,IAEJU,qBAAU,WACF5K,GAASmJ,GACT3B,GACIxH,EACAmJ,EAAc5K,WACTvO,QAAO,SAAC6E,GAAD,OAAUA,EAAKgK,UACtBxP,KACG,SAACwF,GAAD,OAAUA,EAAKgK,UAEvBsK,EAAc3N,cAGvB,CAAC3B,EAAMgR,KAAM1B,EAAenJ,IAE/B4K,qBAAU,WACFtF,IAAmBtF,GACnB2K,EACI3D,GACIzB,EACA1L,EAAMiR,aACNxF,EACA2B,MAIb,CAAC3B,EAAgBtF,EAAOnG,EAAOA,EAAMiR,eAExCF,qBAAU,WACF5K,GACA+F,GAAQ/F,KAEb,CAACA,IAEJ,IAAM+K,EAAU,SAAC3U,GACb,IAAM4U,EAAY,OAAG7B,QAAH,IAAGA,OAAH,EAAGA,EAAe5K,WAAWtD,MAC3C,SAACgQ,GAAD,OAAeA,EAAUtT,KAAOvB,KAGhC4U,IACAR,EAAkBQ,EAAarT,IAC/BsP,EAAkBQ,GAAegD,MACjC5B,GAAWmC,EAAD,OAAehL,QAAf,IAAeA,OAAf,EAAeA,EAAOxC,OAAtB,OAA8BwC,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAO0E,UAAU,kBACrDuC,EAAkBQ,GAAeyD,gBAKvCC,EACFhC,GACAe,IAAmBzC,GAAeyD,WAClC/B,EAAc5K,WAAWtD,MAAK,SAACpG,GAAD,OAAUA,EAAK8C,KAAOuR,KAElD1K,EAAU2K,EACVA,EAAc3K,QAAQnP,KAAI,SAAC+b,GAAD,OACtBC,IAASC,aACL,eAAC,GAAD,CACI9P,WAAY4P,EAAW5P,WACvB3G,KAAMuW,EAAWvW,KACjBsK,aAAciM,EAAWjM,aACzBK,YAAa4L,EAAW5L,YACxB4K,gBAAiBI,EACjBtB,eAAgBA,EAChBiB,aAAcY,EACdb,eAAgBA,EAChBN,UAAWV,IAEfkC,EAAW3M,YAGnB,KAeN,OACI,uCACK0M,GAAahC,GACV,eAAC,GAAD,CACI3N,WAAY2N,EAAc3N,WAC1B3G,KAAMsW,EACN1B,YAlHI,WAChBxC,EAAkBQ,GAAeC,OACjC8C,OAAkBH,GACd/E,GAAkBtF,GAASmJ,GAC3B3B,GACIxH,EACAmJ,EAAc5K,WACTvO,QAAO,SAAC6E,GAAD,OAAUA,EAAKgK,UACtBxP,KACG,SAACwF,GAAD,OAAUA,EAAKgK,UAEvBsK,EAAc3N,eA0GlB,uBACI+P,IAAKjG,EACLnJ,MAAO,CAAEqP,QAAUL,EAAsB,OAAV,SAC/BrR,UAAU,8BAHd,UAKK0E,EACD,eAAC,GAAD,CACI/D,OAAQ,kBAAMA,GAAOuF,IACrBrF,QAAS,kBAAMA,GAAQqF,IACvBpF,SA/BJ,WACJoF,GAASmJ,GACT3B,GACIxH,EACAmJ,EAAc5K,WACTvO,QAAO,SAAC6E,GAAD,OAAUA,EAAKgK,UACtBxP,KACG,SAACwF,GAAD,OAAUA,EAAKgK,UAEvBsK,EAAc3N,aAuBVnB,QAASR,EAAMQ,QACfH,YAAaL,EAAMgR,cChDxBY,OAlGf,SAAkB5R,GAAuB,IAAD,MAChC6R,EAEJ,aAAI7R,EAAMhF,KAAK9D,eAAf,OAAI,EAAoBvB,cAAe,CACnC,IAAMmc,EAAmBtb,EACrBwJ,EAAMhF,KAAK9D,QAAQvB,cAAciB,UACnCwK,MAAK,SAAC2Q,GAAD,MAA4B,aAAhBA,EAAOzX,QAC1BuX,EAAUC,GAAoBA,EAAiBpR,MAGnD,IAAMoP,EACF9P,EAAMqP,iBAAmBrP,EAAMhF,KAAK8C,IACpCkC,EAAM+P,YAAc/P,EAAMhF,KAAK8C,GAE7BkS,EAAoC,CACtCzN,MAAOvC,EAAM2B,WAAWC,cAAc7L,WAAa,KACnDyM,QACKsN,EACK9P,EAAM2B,WAAWI,eACjB/B,EAAM2B,WAAW8B,cACjBzD,EAAM2B,WAAWI,gBACrBhM,WAAa,KACnBka,YAAajQ,EAAM2B,WAAWG,kBAAoB,KAClDoO,YAAaJ,EACP9P,EAAM2B,WAAW2B,0BACjBtD,EAAM2B,WAAW0B,qBACvB8M,YAAa,SAGjB,OAAOnQ,EAAMhF,KAAK9D,QACd,uBACI+I,UAAS,eACL,UAAAD,EAAMhF,KAAK9D,eAAX,SAAoBd,KAAO,gBAAkB,aADxC,SAGTkM,MAAO0N,EACPI,YAAa,WAELpQ,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMsQ,cACNtQ,EAAMsF,eAENtF,EAAMsQ,aAAatQ,EAAMhF,KAAK8C,IAC9BkC,EAAMsF,iBAGdA,aAAc,WAENtF,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMuQ,iBACNvQ,EAAMsF,eAENtF,EAAMuQ,qBAAgBC,GACtBxQ,EAAMsF,iBAGdK,YAAa,WAEL3F,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMuQ,iBACNvQ,EAAM2F,cAEN3F,EAAMuQ,gBAAgBvQ,EAAMhF,KAAK8C,IACjCkC,EAAM2F,gBAhClB,UAoCI,sBAAK1F,UAAU,MAAf,SACI,uBAAKA,UAAU,2BAAf,WACK,UAAAD,EAAMhF,KAAK9D,eAAX,eAAoBpB,QACjB,kDAEI,eAAC,GAAD,CAAMoK,UAAU,oCAFpB,cAMH9F,EAAmB4F,EAAMhF,KAAK9D,QAAQD,MAR3C,YAWH4a,GAAW/B,GACR,uBAAK7P,UAAU,gBAAf,UACI,sBAAKA,UAAU,0DAAf,SACI,eAAC,GAAD,CAAMC,UAAU,kBAEpB,sBAAKD,UAAU,SAAf,SAAyB4R,OAGhC/B,GACG,uBAAK7P,UAAU,gBAAf,UACI,sBAAKA,UAAU,0DAAf,SACI,eAAC,GAAD,CAAMC,UAAU,yBAEpB,sBAAKD,UAAU,SAAf,SAAyBD,EAAMhF,KAAK9D,QAAQD,aAIxD,M,OCjGO+a,OAXf,SAAmBhS,GACf,OACI,uBAAKC,UAAS,mBAAcD,EAAMiS,IAAM,aAAe,IAAvD,UACI,sBAAKhS,UAAU,+BAAf,SAA+CD,EAAMkS,QACrD,sBAAKjS,UAAU,iCAAf,SACKD,EAAMpK,cC+GRuc,OArFf,SAAkBnS,GAAuB,IAAD,IAChC6R,EAEEO,EA3BH,SAAiBlb,GACpB,UAAIA,QAAJ,IAAIA,KAASpB,MACT,OAAO,eAAC,GAAD,CAAMoK,UAAU,oCAG3B,IAAIhJ,EAeA,OAAO,eAAC,GAAD,CAAMgJ,UAAU,oBAdvB,OAAQhJ,EAAQd,MACZ,IAAK,OACL,IAAK,QACL,IAAK,OACL,IAAK,QACD,OAAO,eAAC,GAAD,CAAM8J,UAAU,oBAE3B,IAAK,SACD,OAAO,eAAC,GAAD,CAAMA,UAAU,kBAE3B,QACI,OAAO,eAAC,GAAD,CAAMA,UAAU,qBAUtBuP,CAAQzP,EAAMhF,KAAK9D,SAEhC,aAAI8I,EAAMhF,KAAK9D,eAAf,OAAI,EAAoBvB,cAAe,CACnC,IAAMmc,EAAmBtb,EACrBwJ,EAAMhF,KAAK9D,QAAQvB,cAAciB,UACnCwK,MAAK,SAAC2Q,GAAD,MAA4B,aAAhBA,EAAOzX,QAC1BuX,EAAUC,GAAoBA,EAAiBpR,MAGnD,OAAOV,EAAMhF,KAAK9D,QACd,uBACI+I,UAAS,0BACL,UAAAD,EAAMhF,KAAK9D,eAAX,SAAoBd,KAAO,gBAAkB,aADxC,SADb,UAKI,sBAAK6J,UAAU,MAAf,SACI,sBAAKA,UAAU,iBAAf,SACI,yBACI7J,KAAK,SACL6J,UAAU,kCACVY,QAASb,EAAM4P,YAHnB,SAKI,eAAC,GAAD,CAAM1P,UAAU,uBAI5B,uBAAKD,UAAU,2BAAf,UACI,sBAAKA,UAAU,OAAf,SACI,uBAAKA,UAAU,wBAAf,UACK7F,EAAmB4F,EAAMhF,KAAK9D,QAAQD,MAD3C,YAIJ,sBAAKgJ,UAAU,gBAAf,SACI,sBAAKA,UAAU,sBAAf,SACI,wBACIA,UAAS,kCACLD,EAAMhF,KAAK9D,QAAQpB,MAAQ,SAAW,IAF9C,iBAKWsc,EALX,0BASR,sBAAKnS,UAAU,OAAf,SACI,uBAAKA,UAAU,8BAAf,UACI,eAAC,GAAD,CAAMC,UAAU,uBADpB,4BAKH2R,GACG,eAAC,GAAD,CACIK,MAAM,mBACNtc,QAASic,EACTI,KAAK,IAIb,eAAC,GAAD,CACIC,MAAM,MACNtc,QAASoK,EAAMhF,KAAK9D,QAAQD,KAC5Bgb,KAAKJ,IAER7R,EAAMhF,KAAK9D,QAAQpB,OAChB,uCACI,sBAAKmK,UAAU,OAAf,SACI,uBAAKA,UAAU,8BAAf,UACI,eAAC,GAAD,CAAMC,UAAU,8BAA+B,IADnD,aAKJ,eAAC,GAAD,CACIgS,MAAM,UACNtc,QAASoK,EAAMhF,KAAK9D,QAAQpB,MAC5Bmc,KAAK,aAMzB,MCoDOI,IC7JHzE,GD6JGyE,GAlJf,SAAmBrS,GACf,MAA0B0Q,qBAA1B,mBAAOvK,EAAP,KAAcuF,EAAd,KACA,EAA4CgF,qBAA5C,mBAAOrB,EAAP,KAAuBsB,EAAvB,KACA,EAA4CD,mBACxC9C,GAAegD,MADnB,mBAAOP,EAAP,KAAuBjD,EAAvB,KAGM3B,EAAiBoF,iBAAuB,MAC9C,EACIH,qBADJ,mBAAOpB,EAAP,KAAsBwB,EAAtB,KAmBA1B,GAAWC,EAAgBC,GAE3ByB,qBAAU,WACFV,IAAmBzC,GAAeC,OAAS1H,GAC3CqF,GAAerF,EAAOsF,EAAgBC,KAE3C,CAAC2E,IAEJU,qBAAU,WACF5K,GAASmJ,GACT3B,GACIxH,EACAmJ,EAAc5K,WACTvO,QAAO,SAAC6E,GAAD,OAAUA,EAAKgK,UACtBxP,KACG,SAACwF,GAAD,OAAUA,EAAKgK,UAEvBsK,EAAc3N,cAGvB,CAAC3B,EAAMgR,KAAM1B,EAAenJ,IAE/B4K,qBAAU,WACFtF,IAAmBtF,GACnB2K,EACI3D,GACIzB,EACA1L,EAAMJ,SACN6L,EACA2B,MAIb,CAAC3B,EAAgBtF,EAAOnG,EAAOA,EAAMJ,WAExCmR,qBAAU,WACF5K,GACA+F,GAAQ/F,KAEb,CAACA,IAEJ,IAAM+K,EAAU,SAAC3U,GACb,IAAM4U,EAAY,OAAG7B,QAAH,IAAGA,OAAH,EAAGA,EAAe5K,WAAWtD,MAC3C,SAACgQ,GAAD,OAAeA,EAAUtT,KAAOvB,KAGhC4U,IACAR,EAAkBQ,EAAarT,IAC/BsP,EAAkBQ,GAAegD,MACjC5B,GAAWmC,EAAD,OAAehL,QAAf,IAAeA,OAAf,EAAeA,EAAOxC,OAAtB,OAA8BwC,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAO0E,UAAU,kBACrDuC,EAAkBQ,GAAeyD,gBAKvCC,EACFhC,GACAe,IAAmBzC,GAAeyD,WAClC/B,EAAc5K,WAAWtD,MAAK,SAACpG,GAAD,OAAUA,EAAK8C,KAAOuR,KAElD1K,EAAU2K,EACVA,EAAc3K,QAAQnP,KAAI,SAAC+b,GAAD,OACtBC,IAASC,aACL,eAAC,GAAD,CACI9P,WAAY4P,EAAW5P,WACvB3G,KAAMuW,EAAWvW,KACjBsK,aAAciM,EAAWjM,aACzBK,YAAa4L,EAAW5L,YACxB4K,gBAAiBI,EACjBtB,eAAgBA,EAChBiB,aAAcY,EACdb,eAAgBA,EAChBN,UAAWV,IAEfkC,EAAW3M,YAGnB,KAgBN,OACI,uCACK0M,GAAahC,GACV,eAAC,GAAD,CACI3N,WAAY2N,EAAc3N,WAC1B3G,KAAMsW,EACN1B,YAnHI,WAChBxC,EAAkBQ,GAAeC,OACjC8C,OAAkBH,GACd/E,GAAkBtF,GAASmJ,GAC3B3B,GACIxH,EACAmJ,EAAc5K,WACTvO,QAAO,SAAC6E,GAAD,OAAUA,EAAKgK,UACtBxP,KACG,SAACwF,GAAD,OAAUA,EAAKgK,UAEvBsK,EAAc3N,eA2GlB,uBACI+P,IAAKjG,EACLnJ,MAAO,CAAEqP,QAAUL,EAAsB,OAAV,SAC/BrR,UAAU,8BAHd,UAKK0E,EACD,eAAC,GAAD,CACI/D,OAAQ,kBAAMA,GAAOuF,IACrBrF,QAAS,kBAAMA,GAAQqF,IACvBpF,SAhCJ,WACJoF,GAASmJ,GACT3B,GACIxH,EACAmJ,EAAc5K,WACTvO,QAAO,SAAC6E,GAAD,OAAUA,EAAKgK,UACtBxP,KACG,SAACwF,GAAD,OAAUA,EAAKgK,UAEvBsK,EAAc3N,aAwBVnB,QAASR,EAAMQ,QACfH,YAAaL,EAAMgR,e,SCtJ3BpD,O,eAAAA,I,iBAAAA,I,+BAAAA,I,0BAAAA,Q,KAuDG0E,OAhDf,SAAwBtS,GACpB,MAAgC0Q,qBAAhC,mBAAO1U,EAAP,KAAiBuW,EAAjB,KACA,EAAwC7B,qBAAxC,mBAAOO,EAAP,KAAqBuB,EAArB,KAIMC,EAAc,uCAAG,sBAAA1b,EAAA,yDACdiF,EADc,4BAEfuW,EAFe,SAEG1S,GAAYG,EAAMhH,OAFrB,6EAAH,qDAMd0Z,EAAkB,uCAAG,sBAAA3b,EAAA,yDAClBka,IAAgBjV,EADE,4BAEnBwW,EAFmB,SAEG7S,GAAgB3D,GAFnB,6EAAH,qDAgBxB,OAVA+U,qBAAU,WACN0B,MACD,CAACzS,EAAMhH,QAEV+X,qBAAU,WACF/U,IAAaiV,GACbyB,MAEL,CAAC1W,EAAUiV,IAGV,uCACoB,cAAfjR,EAAMgR,MAAwBC,GAC3B,eAAC,GAAD,CACIA,aAAcA,EACdzQ,QAASR,EAAMQ,QACfwQ,KAAMhR,EAAMgR,OAGJ,UAAfhR,EAAMgR,MAAoBhV,GACvB,eAAC,GAAD,CACI4D,SAAU5D,EACVwE,QAASR,EAAMQ,QACfwQ,KAAMhR,EAAMgR,W,+EC9DnB2B,GAAc,IACdC,GAAsB,IAkBtBC,GAAgC,CACzCC,WAAY,IAAIjP,KAAoB,IAAK,KAEzCkP,KAAM,IAAIlP,KAAkB8O,GAAaA,GAAaA,IAEtDK,QAAS,IAAInP,KApBY,OAsBzBoP,QAAS,IAAIpP,KArBY,MAqBoC,GAE7DqP,gBAAiB,IAAIrP,KAAoB+O,GAAqB,IAE9DzP,UAAW,IAAIU,KA3BY,MA8BvB,EACA,GAGJsP,MAAO,IAAItP,KA/BgB,QCoExB,SAASuP,GAASnc,GACrB,IAAMoc,EAAS,IAAIC,KACnB,OAAO,IAAIxb,SAAQ,SAACJ,EAAS6b,GACzBF,EAAOG,KAAKvc,GAAM,SAAUwc,GACxB/b,EAAQ+b,S,SAKLnJ,G,mFAAf,WAA2B/H,EAAeC,GAA1C,iCAAAzL,EAAA,6DACU4M,EAAS,IAAIE,KAAwB,GAAItB,EAAQC,EAAQ,EAAG,MAC3DO,SAASoB,EAAI,IACpBR,EAAOZ,SAAStB,GAAK,IACrBkC,EAAOZ,SAASrB,EAAI,KAEdkG,EAAQ,IAAI/D,MAEZ2G,EAAW,IAAI3G,KAAoB,CAAE6P,WAAW,KAC7CC,cAAcjG,OAAOkG,kBAC9BpJ,EAASI,QAAQrI,EAAOC,GACxBgI,EAASqJ,eAAiBhQ,MAEpBgH,EAAW,IAAIiJ,KAAcnQ,EAAQ6G,EAASO,aAC3CC,YAAc,IACvBH,EAASI,YAAc,IAEjB8I,EAAgB,IAAIlQ,KACpBmQ,EAAkB,IAAInQ,KAC5B+D,EAAMvD,IAAI0P,GACVnM,EAAMvD,IAAI2P,GAEJC,EAAc,IAAIC,KAAWtM,EAAOjE,IAEpCwQ,EAAa,IAAIC,KAAWC,OACvBC,SAASC,WAAW7T,MAAMrD,IACjC,GAAKkF,EAAQmL,OAAOkG,kBACpB,GAAKpR,EAASkL,OAAOkG,oBAGnBY,EAAY,IAAIC,KAClB,IAAI5Q,KAActB,EAAOC,GACzB,IACA,GACA,MAEMkS,UAAY,GACtBF,EAAUG,SAAW,IACrBH,EAAUI,OAAS,IACnBJ,EAAUK,gBAAiB,GAErBC,EAAW,IAAIC,KAAevK,IAC3BI,QAAQrI,EAAOC,GAExBsS,EAASE,QAAQf,GAEjBa,EAASE,QAAQR,GACjBM,EAASE,QAAQb,GA/CrB,KAoDQxQ,EApDR,KAqDQ6G,EArDR,KAsDQ5C,EAtDR,KAuDQiD,EAvDR,KAwDmB,IAAIhH,KAxDvB,KAyDqB,GAzDrB,KA0DQmQ,EA1DR,UA2DsBZ,GAAS,4CA3D/B,4CA4DQ0B,EA5DR,MA6DoBjC,GA7DpB,MA8DsB,GA9DtB,mBAoDQlP,OApDR,KAqDQ6G,SArDR,KAsDQ5C,MAtDR,KAuDQiD,SAvDR,KAwDQoK,UAxDR,KAyDQC,YAzDR,KA0DQlB,gBA1DR,KA2DQmB,MA3DR,KA4DQL,SA5DR,KA6DQM,WA7DR,MA8DQC,aA9DR,qD,sBAkEO,SAAS7J,GACZrF,EACAsF,EACAC,GAEA,GAAID,EAAeE,QAAS,CACxB,IAAMC,EAAWH,EAAeE,QAAQE,YAClCC,EAAYL,EAAeE,QAAQI,aACzC5F,EAAMqE,SAASI,QAAQgB,EAAUE,GACjC3F,EAAMxC,OAAO+G,OAASkB,EAAWE,EACjC3F,EAAMxC,OAAOgH,yBACbxE,EAAM2O,SAASlK,QAAQgB,EAAUE,IAyBzC,SAASwJ,GAAaC,GAKlB,IAJA,IAAIC,EAAY,EACZC,EAAW,EACXC,EAAe,EAEVnU,EAAI,EAAGA,EAAIgU,EAASI,SAASC,cAAerU,IACjDgU,EAASM,cAActU,GAAGuU,eAAiB,EAE/C,IAAK,IAAIvU,EAAI,EAAGA,EAAIgU,EAASI,SAASC,cAAerU,IAAK,CAEtD,IAAMwU,EAAeR,EAASM,cAActU,GA0B5C,GAxBAgU,EAASS,uBAA2B,EAAJzU,IAAoC,GAA1BwU,EAAaE,SAASxU,EAChE8T,EAASS,uBAA2B,EAAJzU,EAAQ,IACV,GAA1BwU,EAAaE,SAASvU,EAC1B6T,EAASS,uBAA2B,EAAJzU,EAAQ,IACV,GAA1BwU,EAAaE,SAAS9R,GAGtBoR,EAASS,uBAA2B,EAAJzU,EAAQ,IAAMgU,EAASW,QACvDX,EAASS,uBAA2B,EAAJzU,EAAQ,GAAKgU,EAASW,UAEtDH,EAAaE,SAASvU,GAAKqU,EAAaE,SAASvU,IAGjD6T,EAASS,uBAA2B,EAAJzU,IAAUgU,EAASY,OACnDZ,EAASS,uBAA2B,EAAJzU,GAASgU,EAASY,SAElDJ,EAAaE,SAASxU,GAAKsU,EAAaE,SAASxU,IAGjD8T,EAASS,uBAA2B,EAAJzU,EAAQ,IAAMgU,EAASY,OACvDZ,EAASS,uBAA2B,EAAJzU,EAAQ,GAAKgU,EAASY,SAEtDJ,EAAaE,SAAS9R,GAAK4R,EAAaE,SAAS9R,KAGjDoR,EAASI,SAASS,kBAClBL,EAAaD,gBAAkBP,EAASI,SAASU,gBAKrD,IAAK,IAAIC,EAAI/U,EAAI,EAAG+U,EAAIf,EAASI,SAASC,cAAeU,IAAK,CAC1D,IAAMC,EAAgBhB,EAASM,cAAcS,GAC7C,KACIf,EAASI,SAASS,kBAClBG,EAAcT,gBAAkBP,EAASI,SAASU,gBAFtD,CAMA,IAAM3H,EACF6G,EAASS,uBAA2B,EAAJzU,GAChCgU,EAASS,uBAA2B,EAAJM,GAC9B1H,EACF2G,EAASS,uBAA2B,EAAJzU,EAAQ,GACxCgU,EAASS,uBAA2B,EAAJM,EAAQ,GACtCE,EACFjB,EAASS,uBAA2B,EAAJzU,EAAQ,GACxCgU,EAASS,uBAA2B,EAAJM,EAAQ,GACtCG,EAAO3R,KAAK4R,KAAKhI,EAAKA,EAAKE,EAAKA,EAAK4H,EAAKA,GAEhD,GAAIC,EAAOlB,EAASI,SAAS3K,YAAa,CACtC+K,EAAaD,iBACbS,EAAcT,iBAEd,IAAMa,EAAQ,EAAMF,EAAOlB,EAASI,SAAS3K,YAE7CuK,EAASqB,UAAUpB,KACfD,EAASS,uBAA2B,EAAJzU,GACpCgU,EAASqB,UAAUpB,KACfD,EAASS,uBAA2B,EAAJzU,EAAQ,GAC5CgU,EAASqB,UAAUpB,KACfD,EAASS,uBAA2B,EAAJzU,EAAQ,GAC5CgU,EAASqB,UAAUpB,KACfD,EAASS,uBAA2B,EAAJM,GACpCf,EAASqB,UAAUpB,KACfD,EAASS,uBAA2B,EAAJM,EAAQ,GAC5Cf,EAASqB,UAAUpB,KACfD,EAASS,uBAA2B,EAAJM,EAAQ,GAE5Cf,EAASsB,OAAOpB,KAAckB,EAC9BpB,EAASsB,OAAOpB,KAAckB,EAC9BpB,EAASsB,OAAOpB,KAAckB,EAE9BpB,EAASsB,OAAOpB,KAAckB,EAC9BpB,EAASsB,OAAOpB,KAAckB,EAC9BpB,EAASsB,OAAOpB,KAAckB,EAE9BjB,OAKZH,EAASuB,UAAUC,SAASC,aAAa,EAAkB,EAAftB,GAC5CH,EAASuB,UAAUC,SAASE,WAAWlU,SAASmU,aAAc,EAC9D3B,EAASuB,UAAUC,SAASE,WAAWE,MAAMD,aAAc,EAE3D3B,EAAS6B,WAAWL,SAASE,WAAWlU,SAASmU,aAAc,EAG5D,SAAShL,GACZmL,EACA9B,EACA+B,GAEI/B,GACAD,GAAaC,GAGb+B,GACAhC,GAAagC,GAGjBlL,KAAMC,SAENF,uBAAsB,kBAAMD,GAAQmL,EAAU9B,EAAU+B,MAzI5D,SAAgBD,GACZ,GAAIA,EAAU,CACV,IAAME,EAAoB,KAAbC,KAAKC,MAClBJ,EAASnC,YAAYhY,SACjB,SAACuM,GAAD,OAAYA,EAAMuD,SAAStL,EAAW,IAAP6V,KAE/BF,EAASK,OACTL,EAASK,MAAMrL,SAEnBgL,EAAS7M,SAASmN,WAAY,EAC9BN,EAAS7M,SAASoN,QAElBP,EAAS1T,OAAOkU,OAAOxa,IAAI,GAC3Bga,EAASvC,SAAS7I,SAElBoL,EAAS7M,SAASsN,aAClBT,EAAS1T,OAAOkU,OAAOxa,IAAI,GAC3Bga,EAAS7M,SAASyB,OAAOoL,EAASzP,MAAOyP,EAAS1T,SA0HtDsI,CAAOoL,GAGX,SAASU,GACLtO,EACAuO,GAuBA,IArBA,IAAMC,EAAID,EAAcC,EAClB9B,EAAQ8B,EAAI,EACZ/B,EAAS+B,EAAID,EAAc9B,OAE3BL,EAAiC,GACjCqC,EAAuB,IAGvBtB,EAAY,IAAIuB,aAAa7W,MAC7BuV,EAAS,IAAIsB,aAAa7W,MAE1B8W,EAAmB,IAAIvU,KAAqB,CAC9CsT,MAAOa,EAAcK,WACrBpK,KAAM+J,EAAcM,QAEpBC,YAAaP,EAAcO,YAC3BC,gBAAiBR,EAAcQ,kBAG7BxC,EAAyB,IAAImC,aAAaD,MAEvC3W,EAAI,EAAGA,EAAI2W,EAAsB3W,IAAK,CAC3C,IAAME,EAAIqD,KAAKC,SAAWkT,EAAIA,EAAI,EAC5BvW,EAAIoD,KAAKC,SAAWmR,EAAS,EAAIA,EACjC/R,EAAIW,KAAKC,SAAWkT,EAAIA,EAAI,EAElCjC,EAA2B,EAAJzU,GAASE,EAChCuU,EAA2B,EAAJzU,EAAQ,GAAKG,EACpCsU,EAA2B,EAAJzU,EAAQ,GAAK4C,EAGpC0R,EAAc1Q,KAAK,CACf8Q,SAAU,IAAIpS,KACW,EAAhBiB,KAAKC,SAAT,EACoB,EAAhBD,KAAKC,SAAT,EACoB,EAAhBD,KAAKC,SAAT,GAEL+Q,eAAgB,IAGxB,IAAM2C,EAAgB,IAAI5U,KAC1B4U,EAAczB,aAAa,EAAGgB,EAAcpC,eAC5C6C,EAAcC,aACV,WACA,IAAI7U,KAAsBmS,EAAwB,GAAG2C,SACjD9U,OAKR,IAAMuT,EAAa,IAAIvT,KAAa4U,EAAeL,GACnD3O,EAAM1G,SAAS1F,IACX2a,EAAcjV,SAAStB,EACvBuW,EAAcjV,SAASrB,EACvBsW,EAAcjV,SAASoB,GAE3BiT,EAAWS,OAAOe,OAAO,GACzBnP,EAAMpF,IAAI+S,GAEV,IAAML,EAAW,IAAIlT,KAErBkT,EAAS2B,aACL,WACA,IAAI7U,KAAsB+S,EAAW,GAAG+B,SACpC9U,OAGRkT,EAAS2B,aACL,QACA,IAAI7U,KAAsBgT,EAAQ,GAAG8B,SAAS9U,OAGlDkT,EAAS8B,wBAET9B,EAASC,aAAa,EAAG,GAEzB,IAAM8B,EAAW,IAAIjV,KAAwB,CACzCkV,cAAc,EACdC,SAAUnV,KACV0U,aAAa,IAGXzB,EAAY,IAAIjT,KAAmBkT,EAAU+B,GAInD,OAHAhC,EAAUmC,QAAUjB,EAAckB,UAClCzP,EAAMpF,IAAIyS,GAEH,CACHmB,IACA9B,QACAD,SACAW,SACAC,YACAd,yBACAH,gBACAuB,aACAR,YACAjB,SAAUqC,G,8CAIX,WACHmB,EACA1N,EACA2N,GAHG,yBAAAriB,EAAA,6DAKGyL,EAAUiJ,EAAeE,QAAgBI,aACzCxJ,EAASkJ,EAAeE,QAAgBE,YAN3C,SAOoBvB,GAAY9H,EAAQD,GAPxC,OAOG8U,EAPH,OAQF5L,EAAeE,QAAgB0B,YAAYgK,EAAS7M,SAASO,YAC1DqO,IACM1B,EAAa2B,eAClB5N,EAAeE,QAAgB0B,YAAYqK,EAAM4B,KAClDjC,EAASK,MAAQA,GAGrBhK,OAAOJ,iBACH,UACA,kBAAM9B,GAAe6L,EAAU5L,MAE/B,GAGE8N,EAAY,IAAI1V,KAChB2V,EAAU,IAAI3V,KACpBwT,EAASzP,MAAMvD,IAAIkV,GACnBlC,EAASzP,MAAMvD,IAAImV,GACnBtN,GACImL,EACAU,GAAYwB,EAAW,CACnBtB,EAAG,IACH/B,OAAQ,EACRnT,SAAU,IAAIc,KAAc,EAAG,EAAG,GAClC4V,UAAU,EACVP,WAAW,EACXlO,YAAa,IACboL,kBAAkB,EAClBC,eAAgB,GAChBT,cAAe,IACf0C,QAAS,EACTD,WAAY,UACZE,aAAa,EACbC,iBAAiB,IAErBT,GAAYyB,EAAS,CACjBvB,EAAG,IACH/B,OAAQ,EACRnT,SAAU,IAAIc,KAAc,EAAG,EAAG,GAClC4V,UAAU,EACVP,WAAW,EACXlO,YAAa,IACboL,kBAAkB,EAClBC,eAAgB,EAChBT,cAAe,IACf0C,QAAS,EACTD,WAAY,UACZE,aAAa,EACbC,iBAAiB,KAGzBW,EAAY9B,GA3DT,6C,wDC1ZMqC,GAAkB,IAAI7V,KAAwB,CACvDsT,MAAO,KACPwC,KAAM9V,OAGG+V,GAAsB,IAAI/V,KAAwB,CAC3DsT,MAAO,MACPwC,KAAM9V,OAGGgW,GAAkB,IAAIhW,KAAwB,CACvDsT,MAAO,MAEPwC,KAAM9V,OAGGiW,GAAgB,IAAIjW,KAAwB,CAAEsT,MAAO,WAErD4C,GAAe,IAAIlW,KAAwB,CACpDsT,MAAO,KACP6C,QAAS,EACTzB,aAAa,IAGJ0B,GAAuB,IAAIpW,KAAwB,CAC5DsT,MAAO,MACPoB,aAAa,EACbyB,QAAS,KAGAE,GAAe,IAAIrW,KAAwB,CACpDsT,MAAO,QACP6C,QAAS,EACTzB,aAAa,IAGJ4B,GAAe,IAAItW,KAAwB,CAAEsT,MAAO,WAOpDiD,IALqB,IAAIvW,KAAwB,CAC1DsT,MAAO,KACPwC,KAAM9V,OAGiC,IAAIA,KAAwB,CACnEsT,MAAO,QACPwC,KAAM9V,Q,SC3CH,SAASwW,GACZC,EACAC,EACAhD,GAEA,IAAInL,KAAMM,MAAM6N,EAAcD,OACzB1gB,GAAG0gB,EAAO/C,GAAc,KAExBxK,QCAT,IAAMyN,IAAuB,IACvBC,GAA2B,GAOjC,SAASC,GAAmBC,GACxB,OANiB,GAMVA,EAPkB,IAU7B,SAASC,GAAmB9B,GACxB,IAAI1M,KAAMM,MAAMoM,GACXlf,GAAG,CAAEogB,QAAS,GAAK,KACnBjN,QACAmC,YAAW,WACR4J,EAASP,aAAc,KAqD5B,SAASsC,GACZxD,EACAyD,GAEA,IAAMC,EAASD,EAAYA,EAAY3gB,OAAS,IAdpD,SAAsBkd,EAAoB2D,GACtC/iB,OAAOC,KAAKmf,EAAShC,cAChBlf,QAAO,SAAC0E,GAAD,OAASmL,SAASnL,IAAQmgB,EAxDZ,MAyDrB9d,SAAQ,SAACrC,GAAS,IAAD,EACdwc,EAAShC,aAAarP,SAASnL,IAAMogB,MAAMC,mBAC3C,UAAA7D,EAAShC,aAAarP,SAASnL,IAAMgB,YAArC,SAA2Cqf,mBAC3C7D,EAAShC,aAAarP,SAASnL,IAAMsgB,aAAaC,iBAC3C/D,EAAShC,aAAarP,SAASnL,OAS9CwgB,CAAahE,EAAU0D,EAAO,GAAGO,QAyBjC,IAvBA,IAAIC,EAASf,GACTgB,EAAYT,EAAO,GAAGU,UAEtBC,EACAZ,EAAY3gB,OAAS,EACf2gB,EAAYA,EAAY3gB,OAAS,GAC7B2gB,EAAYA,EAAY3gB,OAAS,GAAGA,OAAS,GAC/CshB,UAAYX,EAAYA,EAAY3gB,OAAS,GAAG,GAAGshB,UACrD,EAEJE,EAAa,IAAI9X,KAEjB+X,EAAe,IAAI/X,KAAwB,CAC7CsT,MAAO,KACP6C,QAASc,EAAY3gB,OAAS,EAAI,GAAM,EACxCoe,YAAauC,EAAY3gB,OAAS,IAEhC0hB,EAAe,IAAIhY,KAAwB,CAC7CsT,MAAO,QACP6C,QAASc,EAAY3gB,OAAS,EAAI,GAAM,EACxCoe,YAAauC,EAAY3gB,OAAS,IAG7BoH,EAAI,EAAGA,EAAIwZ,EAAO5gB,OAAQoH,IAAK,CACpC,IAAMua,EAAef,EAAOxZ,GACtBwa,GACDhB,EAAOxZ,GAAGya,QAAQC,WAnGH,GAmGhB,KAEEtB,EAAWa,EAAYM,EAAaL,UAC1CF,EAASW,GACL7E,EACAkE,EACAO,EACA,IAAMC,EACNpB,EACAgB,EACM,IAANpa,EACAqa,EACAC,EACAxE,EAASlC,MAAM,IAEnBqG,EAAYM,EAAaL,UAGzBX,EAAY3gB,OAAS,IACrBwhB,EAAW5Y,SAASoH,OAEZoR,EACAf,GACAE,GAAmBgB,IAEnB,EACAjB,IAERkB,EAAWrB,MAAMjd,IACbod,GACAA,GACAA,KAIJiB,EAAqB,GACrBC,EAAWtX,IACP8X,GACIzB,GAAmBgB,GA5IN,IA6IbH,EACAM,EACAxE,IAKZA,EAASzP,MAAMvD,IAAIsX,GAjIvB,SACItE,EACAkE,EACAG,EACAxM,GAEA,IAAI9C,KAAMM,MAAM2K,EAASrD,gBAAgBjR,UACpCnJ,GACG,CACI6H,EACI4V,EAASrD,gBAAgBjR,SAAStB,EAClC8Z,EACAf,GACAE,GAAmBgB,GACvBha,EAAG,EACHyC,EAAG,GAEP,KAEHwI,OAAOP,KAAMQ,OAAOkC,UAAUC,KAC9BhC,QACAmC,WAAWA,GA8GhBkN,CAAiB/E,EAAUkE,EAAQG,GAAoB,WAC/CZ,EAAY3gB,OAAS,GACrBygB,GAAmBgB,GA7G/B,SAA0BD,EAAyBzM,GAC/C,IAAI9C,KAAMM,MAAMiP,EAAW5Y,UACtBnJ,GACG,CACI6H,EAAG,EACHC,EAAG,EACHyC,EAAG,GAEP,KAEHwI,OAAOP,KAAMQ,OAAOkC,UAAUC,KAC9BhC,QACAmC,WAAWA,GAoGZmN,CAAiBV,GAAY,WACrBb,EAAY3gB,OAAS,GACrBygB,GAAmBiB,GAEvB,IAAMS,EAAQ,IAAIzY,KAClBwT,EAASzP,MAAM2U,OAAOlF,EAASrD,iBAC/BqD,EAASzP,MAAM2U,OAAOZ,GACtBW,EAAMjY,IAAIgT,EAASrD,iBAEnBsI,EAAMjY,IAAIsX,GAEVtE,EAASzP,MAAMvD,IAAIiY,GACnBjF,EAASrD,gBAAkBsI,KAE3BxB,EAAY3gB,OAAS,GACrBkgB,GAAQ,IAAIxW,KAAc,EAAG,EAAG,GAAI8X,MAKhD,SAASO,GACL7E,EACAkE,EACAN,EACAuB,EACA7B,EACA8B,EACAC,EACAd,EACAC,EACAc,GACO,IAAD,EAEArC,GAAS,IAAMkC,GAAY7J,GAE3BiK,EAAO,IAAI/Y,KAAWwT,EAASjC,WAAWrC,KAAM6I,GACtDgB,EAAKC,SAAS5B,MAAQA,EAEtB,IAAMU,EAAa,IAAI9X,MACX,IAAIA,MACZiZ,qBACAF,EAAK7Z,SACL,IAAIc,KAAc8O,GAAaA,GAAaA,KAGhD,IAAMwI,EAAe,IAAI4B,KAAJ,WAAqB9B,EAAMK,QAAU,CACtDqB,OACAna,OAAQ,EACRyL,KAhBa,KAmBX+O,EAAY,IAAInZ,KAAWsX,EAAchB,IAC/C6C,EAAUjG,SAASkG,qBACnB,IAAMC,EAAe,IAAIrZ,KACzB,UAAAmZ,EAAUjG,SAAShJ,mBAAnB,SAAgCG,QAAQgP,GACxCF,EAAUja,SAAS1F,IACf,EAAI6f,EAAa/iB,SAAW,GAC3B,GACDwY,KAEJgJ,EAAWtX,IAAI2Y,GAEfrB,EAAWtX,IAAIuY,GAwDZ,SACHziB,EACAgjB,EACA1T,EACA4N,GAEA,IAAM+F,EAAS,IAAIvZ,KAAWwT,EAASjC,WAAWjC,MAAO2G,IACzDsD,EAAO9C,MAAMnQ,MAAMhQ,EJ9RQ,MI+R3BijB,EAAOra,SAAS1F,IACZ8f,EAAa1b,EACb0b,EAAazb,EAAIvH,EAAS,EAC1BgjB,EAAahZ,EAAIhK,EAAS,GAE9BijB,EAAOvF,OAAOe,OAAO,GACrBnP,EAAMpF,IAAI+Y,GAEV,IAAMC,EAAS,IAAIxZ,KAAWwT,EAASjC,WAAWjC,MAAO2G,IACzDuD,EAAO/C,MAAMnQ,MAAMhQ,EJxSQ,MIyS3BkjB,EAAOta,SAAS1F,IACZ8f,EAAa1b,EACb0b,EAAazb,EAAIvH,EAAS,EAC1BgjB,EAAahZ,EAAIhK,EAAS,GAE9BkjB,EAAOxF,OAAOe,OAAO,GACrBnP,EAAMpF,IAAIgZ,GAEV,IAAMC,EAAS,IAAIzZ,KAAWwT,EAASjC,WAAWjC,MAAO2G,IACzDwD,EAAOhD,MAAMnQ,MAAMhQ,EJlTQ,MImT3BmjB,EAAOva,SAAS1F,IACZ8f,EAAa1b,EACb0b,EAAazb,EAAIvH,EAAS,EAC1BgjB,EAAahZ,EAAIhK,EAAS,GAE9BmjB,EAAOzF,OAAOe,OAAO,GACrBnP,EAAMpF,IAAIiZ,GAEV,IAAMC,EAAS,IAAI1Z,KAAWwT,EAASjC,WAAWjC,MAAO2G,IACzDyD,EAAOjD,MAAMnQ,MAAMhQ,EJ5TQ,MI6T3BojB,EAAOxa,SAAS1F,IACZ8f,EAAa1b,EACb0b,EAAazb,EAAIvH,EAAS,EAC1BgjB,EAAahZ,EAAIhK,EAAS,GAE9BojB,EAAO1F,OAAOe,OAAO,GACrBnP,EAAMpF,IAAIkZ,GAEV,IAAMC,EAAS,IAAI3Z,KAAWwT,EAASjC,WAAWjC,MAAO2G,IACzD0D,EAAOlD,MAAMmD,MAAMtjB,EJtUQ,MIuU3BqjB,EAAOza,SAAS1F,IACZ8f,EAAa1b,EAAItH,EAAS,EAC1BgjB,EAAazb,EAAIvH,EAAS,EAC1BgjB,EAAahZ,GAEjBqZ,EAAO3F,OAAOe,OAAO,GACrBnP,EAAMpF,IAAImZ,GAEV,IAAME,EAAS,IAAI7Z,KAAWwT,EAASjC,WAAWjC,MAAO2G,IACzD4D,EAAOpD,MAAMmD,MAAMtjB,EJhVQ,MIiV3BujB,EAAO3a,SAAS1F,IACZ8f,EAAa1b,EAAItH,EAAS,EAC1BgjB,EAAazb,EAAIvH,EAAS,EAC1BgjB,EAAahZ,GAEjBuZ,EAAO7F,OAAOe,OAAO,GACrBnP,EAAMpF,IAAIqZ,GAEV,IAAMC,EAAS,IAAI9Z,KAAWwT,EAASjC,WAAWjC,MAAO2G,IACzD6D,EAAOrD,MAAMmD,MAAMtjB,EJ1VQ,MI2V3BwjB,EAAO5a,SAAS1F,IACZ8f,EAAa1b,EAAItH,EAAS,EAC1BgjB,EAAazb,EAAIvH,EAAS,EAC1BgjB,EAAahZ,GAEjBwZ,EAAO9F,OAAOe,OAAO,GACrBnP,EAAMpF,IAAIsZ,GAEV,IAAMC,EAAS,IAAI/Z,KAAWwT,EAASjC,WAAWjC,MAAO2G,IACzD8D,EAAOtD,MAAMmD,MAAMtjB,EJpWQ,MIqW3ByjB,EAAO7a,SAAS1F,IACZ8f,EAAa1b,EAAItH,EAAS,EAC1BgjB,EAAazb,EAAIvH,EAAS,EAC1BgjB,EAAahZ,GAEjByZ,EAAO/F,OAAOe,OAAO,GACrBnP,EAAMpF,IAAIuZ,GAEV,IAAMC,EAAS,IAAIha,KAAWwT,EAASjC,WAAWjC,MAAO2G,IACzD+D,EAAOvD,MAAMlQ,MAAMjQ,EJ9WQ,MI+W3B0jB,EAAO9a,SAAS1F,IACZ8f,EAAa1b,EAAItH,EAAS,EAC1BgjB,EAAazb,EACbyb,EAAahZ,EAAIhK,EAAS,GAE9B0jB,EAAOhG,OAAOe,OAAO,GACrBnP,EAAMpF,IAAIwZ,GAEV,IAAMC,EAAU,IAAIja,KAAWwT,EAASjC,WAAWjC,MAAO2G,IAC1DgE,EAAQxD,MAAMlQ,MAAMjQ,EJxXO,MIyX3B2jB,EAAQ/a,SAAS1F,IACb8f,EAAa1b,EAAItH,EAAS,EAC1BgjB,EAAazb,EACbyb,EAAahZ,EAAIhK,EAAS,GAE9B2jB,EAAQjG,OAAOe,OAAO,GACtBnP,EAAMpF,IAAIyZ,GAEV,IAAMC,EAAU,IAAIla,KAAWwT,EAASjC,WAAWjC,MAAO2G,IAC1DiE,EAAQzD,MAAMlQ,MAAMjQ,EJlYO,MImY3B4jB,EAAQhb,SAAS1F,IACb8f,EAAa1b,EAAItH,EAAS,EAC1BgjB,EAAazb,EACbyb,EAAahZ,EAAIhK,EAAS,GAE9B4jB,EAAQlG,OAAOe,OAAO,GACtBnP,EAAMpF,IAAI0Z,GAEV,IAAMC,EAAU,IAAIna,KAAWwT,EAASjC,WAAWjC,MAAO2G,IAC1DkE,EAAQ1D,MAAMlQ,MAAMjQ,EJ5YO,MI8Y3B6jB,EAAQjb,SAAS1F,IACb8f,EAAa1b,EAAItH,EAAS,EAC1BgjB,EAAazb,EACbyb,EAAahZ,EAAIhK,EAAS,GAE9B6jB,EAAQnG,OAAOe,OAAO,GACtBnP,EAAMpF,IAAI2Z,GAnLVC,CAAqBtL,GAAaiK,EAAK7Z,SAAU4Y,EAAYtE,GAE7DsE,EAAW5Y,SAAS1F,IAChBke,EAAU5I,IAAmB2H,EAAQI,GAAmBC,GACxD,EACA,GAEJgB,EAAWrB,MAAMjd,IAAIid,EAAOA,EAAOA,GACnCmC,EAAgBpY,IAAIsX,GAEpBiB,EAAK7F,SAASkG,qBAEd,IAAMiB,EAAK,IAAI/O,KACfyN,EAAKuB,iBAAiBD,GAEtB,IAAMjQ,EAAO,IAAIkB,MACG,IAAItL,MAAaua,cAAczC,GACvCzN,QAAQD,GAEpB,IAEIpS,EAFEwiB,EAAaH,EAAGzc,EAAIwM,EAAKxM,EAAI,EAoBnC,OAhBIib,IACC7gB,EAAOsgB,GACJZ,EAAS8C,EAAapQ,EAAKxM,EAC3B8Z,EACAM,EACAxE,GAEAoF,EAAgBpY,IAAIxI,IAG5Bwb,EAAShC,aAAa4F,EAAMK,QAAU,CAClCL,MAAOU,EACP9f,OACAsf,gBAGGkD,EAGX,SAASlC,GACLhiB,EACAohB,EACAM,EACAxE,GAEA,IAAMxb,EAAO,IAAIgI,KAAWwT,EAASjC,WAAWjC,MAAO0I,GAGvD,OAFAhgB,EAAKye,MAAMnQ,KAAKhQ,EJlRW,GImRvB0B,EAAKkH,SAAS1F,IAAIke,EAASphB,EAAS,EAAG,EAAG,GACvC0B,EChRJ,SAAeyiB,GAAtB,uC,8CAAO,WACHC,EACAxb,EACAwU,GAHG,SAAAxgB,EAAA,+EAKI,IAAIe,SAAQ,SAACJ,EAAc6b,GAC9B,IAAInH,KAAMM,MAAM6R,EAAKxb,UAChBnJ,GACG,CACI6H,EAAGsB,EAAStB,EACZC,EAAGqB,EAASrB,EACZyC,EAAGpB,EAASoB,GAEhBoT,GAEH5K,OAAOP,KAAMQ,OAAOkC,UAAUC,KAC9BhC,QACAmC,YAAW,kBAAMxX,WAjBvB,4C,sBAqBA,SAAe8mB,GAAtB,qC,8CAAO,WACHD,EACAhH,GAFG,SAAAxgB,EAAA,+EAII,IAAIe,SAAQ,SAACJ,EAAc6b,GAC9B,IAAInH,KAAMM,MAAM6R,EAAKvR,UAChBpT,GAAG,CAAE6H,EAAG,EAAGC,EAAG,EAAGyC,EAAG,GAAKoT,GACzB5K,OAAOP,KAAMQ,OAAOkC,UAAUC,KAE9BhC,QACAmC,YAAW,kBAAMxX,WAVvB,4C,sBAkCA,SAAS+mB,GACZxD,EACAX,EACAoE,EACArH,GAEA,IAAMsH,EAAiB,IAAI9a,KAK3B,OAJA8a,EAAerE,MAAMjd,IAAI,EAAIid,EAAM7Y,EAAG,EAAI6Y,EAAM5Y,EAAG,EAAI4Y,EAAMnW,G,2CAE7Dya,CAAc3D,EAAO0D,EAAgBD,EAAarH,GAE3CsH,E,8CAGX,WACI1D,EACA0D,EACAD,EACArH,GAJJ,mCAAAtgB,EAAA,6DAMUmN,EAAW,IAAM+W,EAAM4D,aAAa1kB,OACpCohB,GAAU,GACVuD,EAAWha,KAAKia,KAAKja,KAAK4R,KAAKuE,EAAM4D,aAAa1kB,SAR5D,SAUwCukB,EAAYM,yBAC5C/D,EAAMK,QAXd,OA6BI,IAnBM2D,EAVV,OAcUC,EAAaD,EAAsBJ,aAAarpB,KAAI,SAAC2pB,GAAD,OACtDA,EAAGC,SAASnD,cAEVoD,EAAcva,KAAKe,IAAL,MAAAf,KAAI,YAAQoa,IAE1BI,EAAWL,EAAsBJ,aAAarpB,KAAI,SAAC2pB,GAAD,aACpD,UAAAA,EAAGI,YAAH,eAASplB,QAAS,EAAIglB,EAAGI,KAAKplB,OAAS,EAAI,KAE3B2K,KAAKe,IAAL,MAAAf,KAAI,YAAQwa,IAE1BE,EAAWP,EAAsBJ,aAAarpB,KAAI,SAAC2pB,GAAD,OACpDM,WAAWC,KAAOC,MAAMC,YAAYT,EAAGze,WAErCmf,EAAc/a,KAAKe,IAAL,MAAAf,KAAI,YAAQ0a,IA3BpC,WA6Baje,GACL,IAAM4d,EAAKF,EAAsBJ,aAAatd,GASxCue,EAAQ,IAAIjc,KACdwT,EAASjC,WAAWpC,QACpBmM,EAAGI,KAAKplB,OAAS,EAAIyf,GAAsBF,IAE/CoG,EAAMjD,SAASkD,YAAcZ,EAC7BW,EAAM/c,SAASoH,KAAKoR,EAASrX,EAAW3C,GACxCue,EAAME,QAAQlb,KAAKwJ,GAAK,GACxBqQ,EAAeta,IAAIyb,GACnB,IAAMG,EACF,GAAad,EAAGC,SAASnD,WAAaoD,EAAhC,GACVS,EAAMxF,MAAMjd,IAAI4iB,EAAeA,EAAeA,GAC9C,IAAMC,EAAQ3e,EAAIud,EAAY,GAAuB,IAAhBA,EAAW,GAAW,EACrDqB,EACF,KACW,GAAXrB,EAC2B,GAA3Bha,KAAKsb,MAAM7e,EAAIud,GACG,IAAhBA,EAAW,GAAW,EAEtBuB,EAAuB,IAAhBvb,KAAKC,SAAkB,IAEpCuZ,GAASwB,EAAO,IAAI3Q,KAAQ+Q,EAAMC,EAAM,GAAIE,GAC5C7B,GAAWsB,EAAO,KAElB,IAAMN,EAAWC,WAAWC,KAAOC,MAAMC,YAAYT,EAAGze,QAEpD8e,EAAW,GACX/R,YAAW,WACP,IAAM6S,EAAkBd,EAAWK,EAAe,IAAM,EAClDU,EAAW,IAAI1c,KACjBwT,EAASjC,WAAWnC,QACpB4G,IAEJ0G,EAASxd,SAAS1F,IAAI6iB,EAAMC,EAAM,GAElC,IAAI/T,KAAMM,MAAM6T,EAASjG,OACpB1gB,GAAG,IAAIuV,KAAQ,EAAG,EAAGmR,GAAiB,KACtCpT,UAAS,WACNqT,EAASxd,SAAS1F,IAAI6iB,EAAMC,EAAMI,EAASjG,MAAMnW,EAAI,MAExD4I,QAEL4R,EAAeta,IAAIkc,KACpBF,IApDF9e,EAAI,EAAGA,EAAI0Z,EAAM4D,aAAa1kB,OAAQoH,IAAM,EAA5CA,GA7Bb,6C,sBCjEA,SAASif,GACLC,EACA9D,EACA7D,GAEA,IAAM4H,EAAU,IAAI3D,KAAa0D,EAAM,CACnC9D,OACAna,OAAQ,EACRyL,KAAM,KAEJ0S,EAAW,IAAI9c,KAAW6c,EAAS5H,GAEnC8H,GAAO,IAAI/c,MAAaua,cAAcuC,GACtC1S,EAAO,IAAIpK,KAEjB,OADA+c,EAAK1S,QAAQD,GACN,CAAEsQ,KAAMoC,EAAU1S,QCtBtB,SAASpN,GACZwW,EACA9W,EACAme,EACAmC,EACAC,GAIA,GAAIzJ,EAAU,CAEV,IAAM0J,EAAQ,IAAIld,KAEZmd,EAAe3J,EAAS7M,SACzByW,aACAC,OAAOC,wBACZJ,EAAMtf,GACAlB,EAAM6gB,QAAUJ,EAAaK,OAC1BL,EAAa7X,MAAQ6X,EAAaK,MACnC,EACJ,EACJN,EAAMrf,IAEGnB,EAAM+gB,QAAUN,EAAa/O,MAC7B+O,EAAaO,OAASP,EAAa/O,KAEpC,EACJ,EAEJoF,EAASpC,UAAUuM,cAAcT,EAAO1J,EAAS1T,QACjD,IAAM4J,EAAiB,GACvB8J,EAASrD,gBAAgByN,iBAAgB,SAACC,GAAD,OAASnU,EAAQpI,KAAKuc,MAE/D,IAAMC,EAAatK,EAASpC,UAAU2M,iBAAiBrU,GAAS,GAChEoU,EAAWE,KAAKC,IAChB,IAQMC,EARWJ,EAAWxrB,QAAO,SAAC6rB,GAAD,QAC/BA,EAAUhd,OAAO6X,SAAS5B,SAEX+G,EAAUhd,OAAO6X,SAASkD,eAKoB,GAE7DgC,GAAmBA,EAAgB/c,OAAO6X,SAAS5B,MAW/D,SACI8G,EACA1K,EACAqH,EACAmC,GACD,IAAD,QAEMxJ,EAAS4K,gBACT,UAAAF,EAAgB/c,OAAO6X,SAAS5B,aAAhC,eAAuCK,WAAvC,UACIjE,EAAS4K,cAAcpF,SAAS5B,aADpC,aACI,EAAuCK,UAE1CjE,EAAS4K,cAAsBnJ,SAAWiB,GAC1C1C,EAAS4K,cAAcC,OAAoB3F,OACxClF,EAAS4K,cAAcpF,SAASsF,kBAE7B9K,EAAS4K,cAAcpF,SAASsF,WAG3C,GACK9K,EAAS4K,gBACN,UAAAF,EAAgB/c,OAAO6X,SAAS5B,aAAhC,eAAuCK,WAAvC,UACIjE,EAAS4K,cAAcpF,SAAS5B,aADpC,aACI,EAAuCK,UAC9CjE,EAAS4K,cACZ,CACGF,EAAgB/c,OAAe8T,SAAWmB,GAE3C,IAAM0E,EAAiBF,GACnBsD,EAAgB/c,OAAO6X,SAAS5B,MAC/B8G,EAAgB/c,OAAOkd,OAAoB5H,MAC5CoE,EACArH,GAEH0K,EAAgB/c,OAAOkd,OAAoB7d,IAAIsa,GAChDoD,EAAgB/c,OAAO6X,SAASsF,UAAYxD,EAE5CtH,EAAS4K,cAAgBF,EAAgB/c,OACzC6b,EAAYkB,EAAgB/c,OAAO6X,SAAS5B,QA9CxCmH,CAAcL,EAAiB1K,EAAUqH,EAAamC,GAEtDkB,GACAA,EAAgB/c,OAAO6X,SAASkD,aA+C5C,SACIgC,EACA1K,EACAyJ,GAIA,GAAIiB,EAAgB/c,OAAOkd,OAAQ,CAAC,IAAD,IAGG,IAF5B/C,EAAK4C,EAAgB/c,OAAO6X,SAC7BkD,YACL,GAAI1I,EAASgL,oBACT,UAAAhL,EAASgL,oBAAoBH,cAA7B,SAAqC3F,OACjClF,EAASgL,oBAAoBxF,SAASyF,kBAE1C,UAAAjL,EAASgL,oBAAoBH,cAA7B,SAAqC3F,OACjClF,EAASgL,oBAAoBxF,SAAS0F,gBAI9C,IAAMtU,EAAgB8T,EAAgB/c,OAAe+R,SAASyL,WACzDjgB,MAEC+f,EJhHP,SACHvf,EACAR,EACAC,EACAsW,GAEA,IAAM2J,EAAa,IAAI5e,KAGjBuZ,EAAS,IAAIvZ,KACf,IAAIA,KAAkBtB,EAHH,KAInBuW,GAEJsE,EAAOra,SAAS1F,IAAI,EAAGmF,EAAS,EAAG,GACnC4a,EAAOvF,OAAOe,OAAO,GAErB6J,EAAWpe,IAAI+Y,GAEf,IAAMC,EAAS,IAAIxZ,KACf,IAAIA,KAAkBtB,EAZH,KAanBuW,GAEJuE,EAAOta,SAAS1F,IAAI,GAAImF,EAAS,EAAG,GACpC6a,EAAOxF,OAAOe,OAAO,GACrB6J,EAAWpe,IAAIgZ,GAEf,IAAMC,EAAS,IAAIzZ,KACf,IAAIA,KApBe,EAsBfrB,EAtBe,KAyBnBsW,GAEJwE,EAAOva,SAAS1F,IAAImF,EAAS,EAAG,EAAG,GACnC8a,EAAOzF,OAAOe,OAAO,GACrB6J,EAAWpe,IAAIiZ,GAEf,IAAMC,EAAS,IAAI1Z,KACf,IAAIA,KAhCe,EAkCfrB,EAlCe,KAqCnBsW,GAQJ,OANAyE,EAAOxa,SAAS1F,KAAKmF,EAAS,EAAG,EAAG,GACpC+a,EAAO1F,OAAOe,OAAO,GACrB6J,EAAWpe,IAAIkZ,GAEfkF,EAAW1f,SAAS1F,IAAI0F,EAAStB,EAAGsB,EAASrB,EAAGqB,EAASoB,GAElDse,EI4DsBC,CACrBX,EAAgB/c,OAAOjC,SACvBkL,EAAO,EACPA,EAAO,EACP6L,IAEJ,UAAAiI,EAAgB/c,OAAOkd,cAAvB,SAA+B7d,IAAIie,GACnCP,EAAgB/c,OAAO6X,SAASyF,iBAAmBA,EAEnD,IAAMC,EDtGP,SACH5F,EACAuF,EACA/C,EACA9H,GAEA,IAAMsL,GAAc,IAAI9e,MAAaua,cAAc8D,GAC7CU,EAAa,IAAI/e,KACvB8e,EAAYzU,QAAQ0U,GAEpB,IAAMC,EAAc,IAAIhf,KAElBif,EAAU,IAAIjf,KAChBwT,EAASjC,WAAWlC,gBACpBkH,IAEJ0I,EAAQ/f,SAAS1F,IAAI0lB,IAA+C,GAAI,GACxEF,EAAYxe,IAAIye,GAEhB,IAAME,EAASxC,GACXrB,EAAGvlB,GACGulB,EAAGvlB,GAAGW,MAAM,EAAG,GACX,MACA4kB,EAAGvlB,GAAGW,MAAM4kB,EAAGvlB,GAAGO,OAAS,EAAGglB,EAAGvlB,GAAGO,QACxC,MACNwiB,EACAxC,IAEJ6I,EAAOzE,KAAKxb,SAAS1F,IAAI0lB,KAA2BC,EAAO/U,KAAKvM,EAAI,GAAI,GACxEmhB,EAAYxe,IAAI2e,EAAOzE,MAEvB,IAAM/U,EAAY,IAAI3F,KAClBwT,EAASjC,WAAWjS,UACpB+W,IAEJ1Q,EAAUzG,SAAS1F,IAAI0lB,IAA0B,GAAI,GACrDvZ,EAAUwW,QAAQlb,KAAKwJ,GAAK,GAC5B9E,EAAUyZ,QAAQne,KAAKwJ,GAAK,GAC5BuU,EAAYxe,IAAImF,GAEhB,IAAM0Z,EAAY/D,EAAGze,MAAMyiB,IAAI,MAGzBC,EAAY5C,GAFDd,KAAOC,MAAMC,YAAYT,EAAGze,MAAMsD,IAAIkf,IAEf,OAAQvG,EAAMzC,IAEtDkJ,EAAU7E,KAAKxb,SAAS1F,IACpB0lB,IAAsBK,EAAUnV,KAAKxM,EN3Ed,GM2EoC,IAC1D2hB,EAAUnV,KAAKvM,EAAI,GACnB,GAGLmhB,EAAYxe,IAAI+e,EAAU7E,MAE1B,IAAM8E,EAAY,IAAIxf,KAClBwT,EAASjC,WAAWlC,gBACpBkH,IAEJiJ,EAAUtgB,SAAS1F,IACf+lB,EAAU7E,KAAKxb,SAAStB,EAAImR,IAA0B,GACtD,GACC,GAELiQ,EAAYxe,IAAIgf,GAEhB,IAAMC,EAAW9C,GACbrB,EAAGtlB,KAAKU,MAAM,EAAG,GACb,MACA4kB,EAAGtlB,KAAKU,MAAM4kB,EAAGtlB,KAAKM,OAAS,EAAGglB,EAAGtlB,KAAKM,QAC9CwiB,EACAxC,IAEJmJ,EAAS/E,KAAKxb,SAAS1F,IACnB+lB,EAAU7E,KAAKxb,SAAStB,EAAImR,GAAsB,GAAK,IACtD0Q,EAASrV,KAAKvM,EAAI,GAClB,GAELmhB,EAAYxe,IAAIif,EAAS/E,MAEzB,IAAMqC,GAAO,IAAI/c,MAAaua,cAAcyE,GACtC5U,EAAO,IAAIpK,KAWjB,OAVA+c,EAAK1S,QAAQD,GAEb4U,EAAY9f,SAAS1F,IACjB6kB,EAAOnf,SAAStB,EAAImhB,EAAWnhB,EAAI,EAAKwM,EAAKxM,EAAI,EAAK,EAAI,IAC1D,KACAygB,EAAOnf,SAASoB,GAEpB0e,EAAYvI,MAAMjd,IAAI,IAAM,IAAM,KAClCgd,GAAQ,IAAIxW,KAAc,EAAG,EAAG,GAAIgf,EAAa,KAE1CA,ECYoBU,CACnBlM,EAASlC,MAAM,GACf4M,EAAgB/c,OAAOkd,OACvB/C,EACA9H,GAEJ,UAAA0K,EAAgB/c,OAAOkd,cAAvB,SAA+B7d,IAAIke,GACnCR,EAAgB/c,OAAO6X,SAAS0F,eAAiBA,EAEjDlL,EAASgL,oBAAsBN,EAAgB/c,OAE/C8b,EAAkB3B,IAvFdqE,CAAoBzB,EAAiB1K,EAAUyJ,IA2F3D,SAASgB,GAAkB/qB,EAAQiI,GAC/B,OAAOjI,EAAEmN,SAAWlF,EAAEkF,S,MCjFXuf,OA7Df,SAA0BzjB,GACtB,OACI,sBAAKC,UAAU,wBAAf,SACI,uBAAKA,UAAU,YAAf,UACI,uBAAKA,UAAU,gBAAf,UACI,sBAAKA,UAAU,QAAf,SACI,8CAAgBD,EAAMib,MAAMK,YAEhC,uBAAKrb,UAAU,uBAAf,UACI,yBACI7J,KAAK,SACL6J,UAAU,sBACVY,QAASb,EAAM0jB,SAHnB,SAKI,eAAC,GAAD,CAAMxjB,UAAU,6BAGpB,yBACI9J,KAAK,SACL6J,UAAU,sBACVY,QAASb,EAAM2jB,SAHnB,SAKI,eAAC,GAAD,CAAMzjB,UAAU,yBAK5B,uBAAKD,UAAU,YAAf,UACI,sBAAKA,UAAU,QAAf,uBACA,sBAAKA,UAAU,mBAAf,SACKD,EAAMib,MAAMe,QAAQjmB,gBAG7B,uBAAKkK,UAAU,YAAf,UACI,sBAAKA,UAAU,QAAf,2BACA,sBAAKA,UAAU,mBAAf,SACKD,EAAMib,MAAM4D,aAAa1kB,YAGlC,uBAAK8F,UAAU,sBAAf,UACI,sBAAKA,UAAU,QAAf,mBACA,sBAAKA,UAAU,yBAAf,SACKD,EAAMib,MAAM2I,UAGrB,sBAAK3jB,UAAU,aAAf,SACI,sBAAKA,UAAU,SAAf,SACI,oBACIA,UAAU,4CACVzG,KAAI,qCAAgCwG,EAAMib,MAAMK,QAChD7a,OAAO,SAHX,yCCsBTojB,OArEf,SAAuB7jB,GACnB,OACI,sBAAKC,UAAU,wBAAf,SACI,uBAAKA,UAAU,YAAf,UACI,uBAAKA,UAAU,gBAAf,UACI,sBAAKA,UAAU,QAAf,SACI,kDACgB,IACXD,EAAM+f,YAAY6D,KAAKrpB,MAAM,EAAG,GAC7B,MACAyF,EAAM+f,YAAY6D,KAAKrpB,MACnByF,EAAM+f,YAAY6D,KAAKzpB,OAAS,EAChC6F,EAAM+f,YAAY6D,KAAKzpB,aAIvC,uBAAK8F,UAAU,uBAAf,UACI,yBACI7J,KAAK,SACL6J,UAAU,sBACVY,QAASb,EAAM0jB,SAHnB,SAKI,eAAC,GAAD,CAAMxjB,UAAU,6BAGpB,yBACI9J,KAAK,SACL6J,UAAU,uBACVY,QAASb,EAAM2jB,SAHnB,SAKI,eAAC,GAAD,CAAMzjB,UAAU,yBAK5B,uBAAKD,UAAU,YAAf,UACI,sBAAKA,UAAU,QAAf,wBACA,sBAAKA,UAAU,mBAAf,SACKD,EAAM+f,YAAYX,SAASrpB,gBAGpC,uBAAKkK,UAAU,YAAf,UACI,sBAAKA,UAAU,QAAf,mBACA,uBAAKA,UAAU,mBAAf,WACMD,EAAM+f,YAAYR,KAAKplB,OAAS,GAAK,EAD3C,eAIJ,uBAAK8F,UAAU,sBAAf,UACI,sBAAKA,UAAU,QAAf,mBACA,sBAAKA,UAAU,yBAAf,SACKD,EAAM+f,YAAY6D,UAG3B,sBAAK3jB,UAAU,aAAf,SACI,sBAAKA,UAAU,SAAf,SACI,oBACIA,UAAU,4CACVzG,KAAI,kCAA6BwG,EAAM+f,YAAY6D,MACnDnjB,OAAO,SAHX,yC,OCmHTqjB,OA3Kf,SAAyB9jB,GACrB,OACI,sBAAKC,UAAU,iBAAf,SACI,uBAAKA,UAAU,YAAf,UACI,uBAAKA,UAAU,gBAAf,UACI,sBAAKA,UAAU,QAAf,SACI,2CAEJ,sBAAKA,UAAU,uBAAf,SACI,yBACI7J,KAAK,SACL6J,UAAU,uBACVY,QAASb,EAAM2jB,SAHnB,SAKI,eAAC,GAAD,CAAMzjB,UAAU,wBAK5B,sBAAKD,UAAU,YAAf,SACI,sBAAKA,UAAU,SAAf,SACI,uBACIA,UAAU,4BACVnC,GAAG,wBAFP,UAII,uBAAKmC,UAAU,iBAAf,UACI,qBACIA,UAAU,mBACVnC,GAAG,8BAFP,SAII,yBACImC,UAAU,oBACV7J,KAAK,SACL,iBAAe,WACf,iBAAe,gCACf,gBAAc,QACd,gBAAc,+BANlB,+BAWJ,sBACI0H,GAAG,+BACHmC,UAAU,mCACV,kBAAgB,8BAChB,iBAAe,yBAJnB,SAMI,sBAAKA,UAAU,gCAAf,SACI,sBAAIA,UAAU,QAAd,UACI,gCACI,uBAAMA,UAAU,QAAhB,SACI,eAAC,GAAD,CAAMC,UAAU,kBAFxB,mDAOA,gCACI,uBAAMD,UAAU,QAAhB,SACI,eAAC,GAAD,CAAMC,UAAU,gBAFxB,yGAahB,uBAAKD,UAAU,iBAAf,UACI,qBACIA,UAAU,mBACVnC,GAAG,mBAFP,SAII,yBACImC,UAAU,6BACV7J,KAAK,SACL,iBAAe,WACf,iBAAe,4BACf,gBAAc,QACd,gBAAc,2BANlB,8BAWJ,sBACI0H,GAAG,2BACHmC,UAAU,8BACV,kBAAgB,mBAChB,iBAAe,yBAJnB,SAMI,sBAAKA,UAAU,gCAAf,SACI,sBAAIA,UAAU,QAAd,UACI,gCACI,uBAAMA,UAAU,QAAhB,SACI,eAAC,GAAD,CAAMC,UAAU,+BAFxB,yBAMA,gCACI,uBAAMD,UAAU,QAAhB,SACI,eAAC,GAAD,CAAMC,UAAU,0BAFxB,wCAOA,gCACI,uBAAMD,UAAU,QAAhB,SACI,eAAC,GAAD,CAAMC,UAAU,yBAFxB,wCAOA,gCACI,uBAAMD,UAAU,QAAhB,SACI,eAAC,GAAD,CAAMC,UAAU,qBAFxB,oCAMA,gCACI,uBAAMD,UAAU,QAAhB,SACI,eAAC,GAAD,CAAMC,UAAU,uBAFxB,yDAWhB,uBAAKD,UAAU,iBAAf,UACI,qBACIA,UAAU,mBACVnC,GAAG,qBAFP,SAII,yBACImC,UAAU,6BACV7J,KAAK,SACL,iBAAe,WACf,iBAAe,uBACf,gBAAc,QACd,gBAAc,sBANlB,qBAWJ,sBACI0H,GAAG,sBACHmC,UAAU,8BACV,kBAAgB,qBAChB,iBAAe,yBAJnB,SAMI,uBAAKA,UAAU,iBAAf,oDAC4C,IACxC,oBACIA,UAAU,gBACVzG,KAAK,4BAFT,kDC7EzBuqB,OAlEf,SAAqB/jB,GACjB,OAAQA,EAAMgkB,gBACV,KAAKC,GAAeC,aAChB,OAAO,eAAC,GAAD,CAAiBP,SAAU3jB,EAAM2jB,WAE5C,KAAKM,GAAeE,uBACpB,KAAKF,GAAeG,iBAChB,OACI,sBAAKnkB,UAAU,mDAAf,SACI,iCACI,yBACI7J,KAAK,SACL6J,UAAU,sBACVY,QAASb,EAAMqkB,SAHnB,SAKI,eAAC,GAAD,CAAMnkB,UAAU,6BAGpB,yBACI9J,KAAK,SACL6J,UAAU,uBACVY,QAASb,EAAM2jB,SAHnB,SAKI,eAAC,GAAD,CAAMzjB,UAAU,wBAMpC,KAAK+jB,GAAeK,oBAChB,OACI,eAAC,GAAD,CACIvE,YACI/f,EAAM+hB,gBAEV2B,SAAU1jB,EAAM0jB,SAChBC,SAAU3jB,EAAM2jB,WAI5B,KAAKM,GAAeM,cAChB,OACI,eAAC,GAAD,CACItJ,MAAOjb,EAAM+hB,gBACb2B,SAAU1jB,EAAM0jB,SAChBC,SAAU3jB,EAAM2jB,WAG5B,KAAKM,GAAeO,YACpB,QACI,OACI,sBAAKvkB,UAAU,mDAAf,SACI,+BACI,yBACI7J,KAAK,SACL6J,UAAU,uBACVY,QAASb,EAAMykB,SAHnB,SAKI,eAAC,GAAD,CAAMvkB,UAAU,4B,uCClD7BwkB,ICPHT,GDOGS,GA1Bf,WACI,OACI,sBAAKzkB,UAAU,mDAAf,SACI,sBAAKA,UAAU,2CAAf,SACI,sBAAKA,UAAU,QAAf,SACI,sBAAKA,UAAU,mBAAf,SACI,sBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,SACI,uBAAKA,UAAU,sBAAf,UACI,oBAAGA,UAAU,UAAb,4CAIA,wF,8CCiBpC,WACI0kB,EAGAC,EACAC,GALJ,iBAAA9tB,EAAA,0DAOQ8tB,EAPR,gBAQQF,EACI,IAAIjF,KAAOoF,UAAUC,gBAAgBC,mBAAmBH,KAE5DD,EAAkBX,GAAeC,cAXzC,sCAa+Be,OAb/B,QAacC,EAbd,SAgBkBC,EAAiB,IAAIzF,KAAOoF,UAAUM,aACxCF,GAEJP,EAAYQ,GACZP,EAAkBX,GAAeC,eAEjCU,EAAkBX,GAAeoB,cAtB7C,4C,+BA2BeC,G,yFAAf,WACIjO,EACAqH,EACA6G,EACAC,EACAC,GALJ,uBAAA1uB,EAAA,sEASqC2nB,EAAYgH,iBATjD,UASUC,EATV,OAUQC,ETnDsB,GSqDtBL,EAAaprB,OAAS,IAChB0rB,EAAYN,EAAaA,EAAaprB,OAAS,GAAG,GACxDyrB,EAAeD,EAAqBE,EAAUvK,QAG9CwK,EAjBR,YAiB8BP,KAEtBK,EAAe,GAnBvB,oBAoBc7K,EAA4C,YAC3CgL,MAAMH,GAAc1tB,QACzB1C,KAAI,SAACkI,GAAD,OAAWghB,EAAYsH,SAASL,EAAqBjoB,OAEzC6nB,EAAaA,EAAaprB,OAAS,GAxB7D,6BAyBeorB,EAAaA,EAAaprB,OAAS,GAzBlD,UAyB4DrC,QAAQC,IAAIgjB,GAzBxE,8EA0BqBjjB,QAAQC,IAAIgjB,GA1BjC,wCAwBQ+K,EAxBR,KA4BQN,EAAUM,GA5BlB,QA+BIL,EACIhY,YACI,kBACI6X,GACIjO,EACAqH,EACAoH,EACAN,EACAC,KAER,MAzCZ,6C,gCAtCYxB,O,yCAAAA,I,+BAAAA,I,6BAAAA,I,+BAAAA,I,iCAAAA,I,uCAAAA,I,6CAAAA,I,oDAAAA,Q,KAkQGgC,OA9Kf,SAAmBjmB,GACf,IAAM6kB,EAAMqB,KAAYC,MAAMC,eAAcC,QAAQxB,IAC9CnN,EAAQwO,KAAYC,MAAMC,eAAcC,QAAQ3O,MAEtD,EAAgDhH,qBAAhD,mBAAO4V,EAAP,KAAyBb,EAAzB,KACMha,EAAiBoF,iBAAuB,MAC9C,EAAgCH,qBAAhC,mBAAO2G,EAAP,KAAiB8B,EAAjB,KACA,EAAsCzI,qBAAtC,mBAAOgO,EAAP,KAAoB6H,EAApB,KAGA,EAA4B7V,mBAAqC,IAAjE,mBAAOqK,EAAP,KAAeyK,EAAf,KACA,EAA8C9U,qBAA9C,mBAAOqR,EAAP,KAAwByE,EAAxB,KAKA,EAA4C9V,mBACxCuT,GAAewC,mBADnB,mBAAOzC,EAAP,KAAuBY,EAAvB,KAIM/D,EAAc,SAAC5F,GACjBuL,EAAmBvL,GACf+I,IAAmBC,GAAeG,kBAClCQ,EAAkBX,GAAeM,gBAInCzD,EAAoB,SACtBf,GAEAyG,EAAmBzG,GACfiE,IAAmBC,GAAeE,wBAClCS,EAAkBX,GAAeK,sBAsGzC,OA1CAvT,qBAAU,WAYN,OAXK2N,EAEMrH,GAA8B,IAAlB0D,EAAO5gB,QAC1BmrB,GACIjO,EACAqH,EACA3D,EACAyK,EACAC,G,yCAPJiB,CAAiBH,EAAgB3B,EAAmBC,GAUjD,WACCyB,GACAK,aAAaL,MAGtB,CAAC5H,EAAarH,IAEjBtG,qBAAU,WACFgK,EAAO5gB,OAAS,GAAKkd,GACrBwD,GAAaxD,EAAU0D,KAE5B,CAACA,EAAQ1D,IAEZtG,qBAAU,WACFtF,IAAmB4L,GZ6LxB,SAAP,gCY5LYlK,CACIgM,EAEA1N,EACU,SAAViM,KAGT,CAACjM,EAAgB4L,IAEpBtG,qBAAU,WACFsG,GACA7L,GAAe6L,EAAU5L,KAE9B,CAAC4L,IAGA,eAAC,KAAD,CAAgB/W,SAhEM,SAACsmB,IAClBA,GAAaN,GACdK,aAAaL,GACbb,OAAoBjV,IAEpBoW,IACCN,GACDjP,GACAqH,GACA3D,EAAO5gB,OAAS,GAEhBmrB,GACIjO,EACAqH,EACA3D,EACAyK,EACAC,IAgDR,SACI,uBACI/T,IAAKjG,EACLxL,UAAU,8BACVY,QAAS,SACLN,GAEIme,GACA7d,GACIwW,EACA9W,EACAme,EACAmC,EACAC,IAZhB,UAgBKkD,IAAmBC,GAAeoB,cAC/B,eAAC,GAAD,IAEJ,eAAC,GAAD,CACI7kB,QAASR,EAAMQ,QACfH,YAAaL,EAAMgR,KACnBhQ,QACI,eAAC,GAAD,CACI+gB,gBAAiBA,EACjBiC,eAAgBA,EAChBN,SA9HP,WACTM,IAAmBC,GAAeM,cAClCK,EAAkBX,GAAeG,kBAC1BJ,IAAmBC,GAAeK,qBACzCM,EAAkBX,GAAeE,yBA2HjBE,SAvHP,WACTL,IAAmBC,GAAeG,iBAClCQ,EAAkBX,GAAeM,eAC1BP,IAAmBC,GAAeE,wBACzCS,EAAkBX,GAAeK,sBAoHjBX,SAhHP,WACb,GACIK,IAAmBC,GAAeO,aAClCR,IAAmBC,GAAeC,cAClC7M,EACF,CACE,IAAM4D,EAAQ5D,EAAS4K,cACvBhH,EAAMnC,SAAWiB,GAChBkB,EAAMiH,OAAoB3F,OAAOtB,EAAM4B,SAASsF,kBAC1ClH,EAAM4B,SAASsF,UACtB9K,EAAS4K,mBAAgBzR,EAE7BoU,EAAkBX,GAAeO,cAqGbC,SAlGP,WACbG,EAAkBX,GAAeC,yB,UCjB1B2C,OAtIf,SAAwB7mB,GACpB,IAAM8P,EACF9P,EAAMqP,iBAAmBrP,EAAMhF,KAAK8C,IACpCkC,EAAM+P,YAAc/P,EAAMhF,KAAK8C,GAE7BkS,EAAoC,CACtCzN,MAAOvC,EAAM2B,WAAWC,cAAc7L,WAAa,KACnDyM,QACKsN,EACK9P,EAAM2B,WAAWI,eACjB/B,EAAM2B,WAAW8B,cACjBzD,EAAM2B,WAAWI,gBACrBhM,WAAa,KACnBka,YAAajQ,EAAM2B,WAAWG,kBAAoB,KAClDoO,YAAaJ,EACP9P,EAAM2B,WAAW2B,0BACjBtD,EAAM2B,WAAW0B,qBACvB8M,YAAa,SAGjB,OACI,uBACIlQ,UAAS,wBACLD,EAAMgI,SAAW,iBAAmB,iBAExC1F,MAAO0N,EACPI,YAAa,WAELpQ,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMsQ,cACNtQ,EAAMsF,eAENtF,EAAMsQ,aAAatQ,EAAMhF,KAAK8C,IAC9BkC,EAAMsF,iBAGdA,aAAc,WAENtF,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMuQ,iBACNvQ,EAAMsF,eAENtF,EAAMuQ,qBAAgBC,GACtBxQ,EAAMsF,iBAGdK,YAAa,WAEL3F,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMuQ,iBACNvQ,EAAM2F,cAEN3F,EAAMuQ,gBAAgBvQ,EAAMhF,KAAK8C,IACjCkC,EAAM2F,gBAhClB,UAoCI,sBAAK1F,UAAU,MAAf,SACI,uBAAKA,UAAU,6EAAf,UACI,sBAAKA,UAAU,iBAAf,SACKD,EAAMhF,KAAK9D,SAAX,UAEO8I,EAAM+H,KAFb,YAGO/H,EAAMhF,KAAK9D,QAAQoP,OAAOwgB,MAAMvsB,MAAM,EAAG,OAErD,+BACI,uBAAM0F,UAAU,qCAAhB,SACKD,EAAMhF,KAAK9D,UACP8I,EAAMgI,SACD,SACAhI,EAAMhF,KAAK9D,QAAQoP,OAAOygB,mBAKnDjX,GAAkB9P,EAAMhF,KAAK9D,SAC1B,wCACM8I,EAAMgI,UACJ,uBAAK/H,UAAU,cAAf,UACI,sBAAKA,UAAU,mBAAf,SACI,eAAC,GAAD,CAAMC,UAAU,oCAEpB,uBAAKD,UAAU,SAAf,UACI,uBAAMA,UAAU,iBAAhB,UACMD,EAAMhF,KAAK9D,QAAQoP,OAAOwgB,MAAM3sB,OAC9B,GACA,IACA,IALZ,eAUN6F,EAAMgI,UACJ,uBAAK/H,UAAU,cAAf,UACI,sBAAKA,UAAU,mBAAf,SACI,eAAC,GAAD,CAAMC,UAAU,sBAEpB,sBAAKD,UAAU,wBAAf,SACKD,EAAMhF,KAAK9D,QAAQoP,OAAO5F,WAItCV,EAAMgI,UACH,uBAAK/H,UAAU,cAAf,UACI,sBAAKA,UAAU,mBAAf,SACI,eAAC,GAAD,CAAMC,UAAU,mCAEpB,uBAAKD,UAAU,SAAf,UACI,wBAAMA,UAAU,iBAAhB,UACK,KACCD,EAAMhF,KAAK9D,QAAQ8vB,OAAOC,OAAO9sB,OAC/B,GACA,KACA,IANZ,cAWP6F,EAAMgI,UACH,uBAAK/H,UAAU,cAAf,UACI,sBAAKA,UAAU,mBAAf,SACI,eAAC,GAAD,CAAMC,UAAU,sBAEpB,sBAAKD,UAAU,wBAAf,SACKD,EAAMhF,KAAK9D,QAAQ8vB,OAAOhL,oBC1D5CkL,OArEf,SAAuBlnB,GACnB,IAAM8P,EACF9P,EAAMqP,iBAAmBrP,EAAMhF,KAAK8C,IACpCkC,EAAM+P,YAAc/P,EAAMhF,KAAK8C,GAE7BkS,EAAoC,CACtCzN,MAAOvC,EAAM2B,WAAWC,cAAc7L,WAAa,KACnDyM,OAAQxC,EAAM2B,WAAWI,eAAiB,KAC1CkO,YAAajQ,EAAM2B,WAAWG,kBAAoB,KAClDoO,YAAaJ,EACP9P,EAAM2B,WAAW2B,0BACjBtD,EAAM2B,WAAW0B,qBACvB8M,YAAa,SAGjB,OACI,sBACIlQ,UAAS,oBACTqC,MAAO0N,EACPI,YAAa,WAELpQ,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMsQ,cACNtQ,EAAMsF,eAENtF,EAAMsQ,aAAatQ,EAAMhF,KAAK8C,IAC9BkC,EAAMsF,iBAGdA,aAAc,WAENtF,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMuQ,iBACNvQ,EAAMsF,eAENtF,EAAMuQ,qBAAgBC,GACtBxQ,EAAMsF,iBAGdK,YAAa,WAEL3F,EAAMqQ,iBAAmBzC,GAAeC,OACxC7N,EAAMuQ,iBACNvQ,EAAM2F,cAEN3F,EAAMuQ,gBAAgBvQ,EAAMhF,KAAK8C,IACjCkC,EAAM2F,gBA9BlB,SAkCI,sBAAK1F,UAAU,MAAf,SACI,sBAAKA,UAAU,4CAAf,SACKD,EAAMhF,KAAK9D,SAAW8I,EAAMhF,KAAK9D,eC0EvCiwB,OAtHf,SAAiCnnB,GAC7B,IAAMyL,EAAiBoF,iBAAuB,MAC9C,EAA0BH,qBAA1B,mBAAOvK,EAAP,KAAcuF,EAAd,KACA,EAA4CgF,qBAA5C,mBAAOrB,EAAP,KAAuBsB,EAAvB,KACA,EAA0CD,qBAA1C,mBAAOpB,EAAP,KAAsBwB,EAAtB,KACA,EAA4CJ,mBACxC9C,GAAegD,MADnB,mBAAOP,EAAP,KAAuBjD,EAAvB,KAIA2D,qBAAU,WACFV,IAAmBzC,GAAeC,OAAS1H,GAC3CqF,GAAerF,EAAOsF,EAAgBC,KAE3C,CAAC2E,IAEJU,qBAAU,WACFtF,IAAmBtF,GACnB2K,E3BiGL,SACHpF,EACAxF,EACAuF,EACA2B,GAEA,IAAMzL,EAAU,2BACTyB,IADS,IAEZxB,cAAe,IACfC,aAAc,IAEZW,EAAUiJ,EAAeE,QAAgBI,aACzCxJ,EAASkJ,EAAeE,QAAgBE,YAExC1F,EAAQmE,GAAY/H,EAAOC,GAC3BiC,EAAiC,CACnCd,OAAQwC,EAAMxC,OACdhC,aACAa,SACAD,SAGHkJ,EAAeE,QAAgB0B,YAAYlH,EAAMqE,SAASO,YAC3D5E,EAAM0E,SAASyC,iBAAiB,UAAU,kBAAMrB,GAAO9F,MACvDA,EAAM0E,SAASmB,eAEf0B,OAAOJ,iBACH,UACA,kBAAM9B,GAAerF,EAAOsF,EAAgBC,MAE5C,GAEJ,IAAMrD,EAAuBpC,GACzBC,EACAzB,EACA0B,GAKJ,OAHAuF,EAASvF,GACTiH,EAAkBQ,GAAeC,OAE1B,CACHlM,WAAYA,EACZ0G,wB2B1IQ+e,CACI1b,EACA2b,GAAML,OAAO9gB,MACbuF,EACA2B,MAIb,CAAC3B,EAAgBtF,IAEpB4K,qBAAU,WACF5K,GACA+F,GAAQ/F,KAEb,CAACA,IAEJ,IAAMmhB,EAAM,WACJnhB,GAASmJ,GACT3B,GACIxH,EACAmJ,EAAcjH,qBAAqB7S,KAAI,SAACiX,GAAD,OAAUA,EAAKvC,YACtDoF,EAAc3N,aAK1BoP,qBAAU,WACNuW,MACD,CAACtnB,EAAMgR,KAAM1B,EAAenJ,IAE/B,IAAM+K,EAAU,SAAC3U,KAEXoI,EAAU2K,EACVA,EAAcjH,qBAAqB7S,KAAI,SAACwF,GAAD,OACnCA,EAAKsN,cAAgBpF,GAAYwD,QAC3B8K,IAASC,aACL,eAAC,GAAD,CACI9P,WAAY3G,EAAKqP,OAAO1I,WACxB3G,KAAMA,EAAKqP,OAAOrP,KAClBsK,aAActK,EAAKqP,OAAO/E,aAC1BK,YAAa3K,EAAKqP,OAAO1E,YACzB4K,gBAAiBI,EACjBtB,eAAgBA,EAChBiB,aAAcY,EACdb,eAAgBA,EAChBN,UAAWV,IAEfrU,EAAKqP,OAAOzF,SAEhB4M,IAASC,aACL,eAAC,GAAD,CACI9P,WAAY3G,EAAKqP,OAAO1I,WACxB3G,KACIA,EAAKqP,OAAOrP,KAEhBsK,aAActK,EAAKqP,OAAO/E,aAC1BK,YAAa3K,EAAKqP,OAAO1E,YACzB4K,gBAAiBI,EACjBtB,eAAgBA,EAChBiB,aAAcY,EACdb,eAAgBA,EAChBN,UAAWV,EACXrH,SACIhN,EAAKsN,cACLpF,GAAYqF,kBAEhBR,KAAM/M,EAAK+M,OAEf/M,EAAKqP,OAAOzF,YAG1B,KAEN,OACI,qCAQI,uBACI8M,IAAKjG,EAELxL,UAAU,8BAHd,UAKK0E,EACD,eAAC,GAAD,CACI/D,OAAQ,kBAAMA,GAAOuF,IACrBrF,QAAS,kBAAMA,GAAQqF,IACvBpF,SAAUumB,EACV9mB,QAASR,EAAMQ,QACfH,YAAaL,EAAMgR,a,OChIxBuW,OAJf,SAA2BvnB,GACvB,OAAOA,EAAM9I,SCiFFswB,OAvEf,WACI,MAA4B9W,qBAA5B,mBAAOhW,EAAP,KAAe+sB,EAAf,KAMA,EAA0B/W,qBAA1B,mBAAO1X,EAAP,KAAc0uB,EAAd,KACA,EAAwBhX,mBAAiB,SAAzC,mBAAOM,EAAP,KAAaxQ,EAAb,KAEAuQ,qBAAU,WACN,IAAKrW,EAAQ,CACT,IAAMA,EAASitB,uBACX,IAAIC,eAAa,CACbC,aAAc,CAAC,iCAGvBntB,EAAOotB,OAAP,sBAAc,4BAAA/wB,EAAA,6DAEJgxB,EAAiBC,eAAe7B,MAF5B,KAIVuB,EAJU,SAIKjtB,EAAiBC,EAAQqtB,GAJ9B,8EAMdN,EAAU/sB,MAEf,CAACA,IAEJ,IAAMutB,EAAiBpX,iBAAuB,MA2BxCqX,EACF,sBAAKjoB,UAAU,kBAAkByR,IAAKuW,EAAtC,SA1BoB,WACpB,OAAQjX,GACJ,IAAK,QACD,OAAO,eAAC,GAAD,CAAWA,KAAMA,EAAMxQ,QAASA,IAC3C,IAAK,eACD,OACI,eAAC,GAAD,CAAyBwQ,KAAMA,EAAMxQ,QAASA,IAEtD,IAAK,QACL,IAAK,YACD,OAAOynB,EAAetc,SAAW3S,EAC7B,eAAC,GAAD,CACIA,MAAOA,EACPgY,KAAMA,EACNxQ,QAASA,IAGb,+BAGR,QACI,OAAO,0DAMV2nB,KAIT,OACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOlxB,KAAK,SAASC,QAASgxB,IAC9B,eAAC,KAAD,CACIjxB,KAAK,IACLC,QAAS,eAAC,GAAD,CAAmBA,QAAS,eAAC,GAAD,YClEtCkxB,GAdS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqBC,MACjB,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC/BJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCHxB7W,IAASvF,OACL,eAAC,IAAM4c,WAAP,UACI,eAAC,KAAD,UACI,eAAC,GAAD,QAGRzmB,SAAS0mB,eAAe,SAM5BV,M","file":"static/js/main.4e67ae23.chunk.js","sourcesContent":["import { ParseOptions } from '@solidity-parser/parser';\nimport {\n    ASTNode,\n    ContractDefinition,\n    ImportDirective,\n    PragmaDirective,\n    SourceUnit,\n} from '@solidity-parser/parser/dist/src/ast-types';\nimport { Token } from 'antlr4ts';\n\ntype ParseResult = SourceUnit & {\n    errors?: any[];\n    tokens?: Token[];\n};\n\nexport type Parse = (input: string, options?: ParseOptions) => ParseResult;\n\nexport interface RawSolFile {\n    path: string;\n    content?: string;\n    type?: string;\n    error?: string;\n}\n\nexport interface ParsedSolFile extends RawSolFile {\n    parsedContent: ParseResult | null;\n}\n\nexport enum SolDefinitionType {\n    ContractDefinition = 'ContractDefinition',\n    StructDefinition = 'StructDefinition',\n    CustomErrorDefinition = 'CustomErrorDefinition',\n    FunctionDefinition = 'FunctionDefinition',\n    FileLevelConstant = 'FileLevelConstant',\n    EnumDefinition = 'EnumDefinition',\n    ImportDirective = 'ImportDirective',\n    PragmaDirective = 'PragmaDirective',\n}\n\nexport function parseFiles(\n    rawSolFiles: RawSolFile[],\n    solParser: Parse,\n): ParsedSolFile[] {\n    return rawSolFiles.map((file) => ({\n        ...file,\n        ...parseFile(file, solParser),\n    }));\n}\n\nfunction parseFile(\n    rawSolFile: RawSolFile,\n    solParser: Parse,\n): { error?: string; parsedContent: ParseResult | null } {\n    try {\n        return {\n            parsedContent: rawSolFile.content\n                ? solParser(rawSolFile.content)\n                : null,\n        };\n    } catch (e: any) {\n        return {\n            parsedContent: null,\n            error: e.toString(),\n        };\n    }\n}\n\nexport function mergeParsedContent(parsedSolFiles: ParsedSolFile[]): ASTNode[] {\n    return parsedSolFiles.map(getAST).flat();\n}\n\nexport function getContracts(astNodes: ASTNode[]): ContractDefinition[] {\n    return astNodes.filter(\n        (astNodes) => astNodes.type === SolDefinitionType.ContractDefinition,\n    ) as ContractDefinition[];\n}\n\nexport function getImports(astNodes: ASTNode[]): ImportDirective[] {\n    return astNodes.filter(\n        (astNodes) => astNodes.type === SolDefinitionType.ImportDirective,\n    ) as ImportDirective[];\n}\n\nexport function getPragmas(astNodes: ASTNode[]): PragmaDirective[] {\n    return astNodes.filter(\n        (astNodes) => astNodes.type === SolDefinitionType.PragmaDirective,\n    ) as PragmaDirective[];\n}\n\n// TODO: test\nexport function getAST(parsedSolFile: ParsedSolFile): ASTNode[] {\n    return parsedSolFile.parsedContent\n        ? parsedSolFile.parsedContent.children\n        : [];\n}\n","import {\n    getAST,\n    getImports,\n    Parse,\n    ParsedSolFile,\n    parseFiles,\n    RawSolFile,\n} from './ParseSolidity';\nimport { ContentImport } from '@remixproject/plugin-api';\nimport {\n    ASTNode,\n    ImportDirective,\n} from '@solidity-parser/parser/dist/src/ast-types';\nimport URL from 'url-parse';\nimport * as R from 'ramda';\nimport { Folder } from '@remixproject/plugin-api';\n// @ts-ignore\nimport Path from 'path-browserify';\nimport { Context, Edge } from './Graph';\n\nconst SOL_FILE_EXTENSION = 'sol';\n\ntype FolderContext = Context<\n    {\n        getFolder: (path: string) => Promise<Folder>;\n        getFile: (path: string) => Promise<string>;\n    },\n    Folder\n>;\n\ntype ImportDirectiveContext = Context<\n    {\n        resolveImport: (link: string) => Promise<ContentImport>;\n        solParser: Parse;\n    },\n    ImportDirective\n>;\n\nasync function resolveFolder(\n    folderContext: FolderContext,\n): Promise<RawSolFile[]> {\n    const isSolidityFile = (path: string): boolean =>\n        folderContext.element[path].isDirectory ||\n        path.split('.').pop() === SOL_FILE_EXTENSION;\n\n    const resolveDirEntry = async (path: string): Promise<RawSolFile[]> =>\n        folderContext.element[path].isDirectory\n            ? await resolveFolder({\n                  context: folderContext.context,\n                  element: await folderContext.context.getFolder(path),\n              })\n            : [\n                  {\n                      path: Path.resolve(path),\n                      content: await folderContext.context.getFile(path),\n                  },\n              ];\n\n    return R.pipe(\n        R.filter(isSolidityFile) as (a: string[]) => string[],\n        R.map(resolveDirEntry),\n        (p) => Promise.all(p),\n        R.andThen(R.unnest),\n        R.andThen(R.uniqWith(isDuplicateFile)),\n    )(Object.keys(folderContext.element));\n}\n\nconst execImport = async (\n    importDirectiveContext: ImportDirectiveContext,\n): Promise<ParsedSolFile[]> => {\n    try {\n        const contentImport =\n            await importDirectiveContext.context.resolveImport(\n                importDirectiveContext.element.path,\n            );\n\n        const parsedFiles = parseFiles(\n            [\n                {\n                    path: importDirectiveContext.element.path,\n                    content: contentImport.content,\n                    type: contentImport.type,\n                },\n            ],\n            importDirectiveContext.context.solParser,\n        );\n\n        return [\n            ...parsedFiles,\n            ...(parsedFiles[0].parsedContent\n                ? await retrieveExternalContent(\n                      parsedFiles[0].parsedContent?.children,\n                      importDirectiveContext.context.resolveImport,\n                      importDirectiveContext.context.solParser,\n                      contentImport.url,\n                  )\n                : []),\n        ];\n    } catch (e: any) {\n        return parseFiles(\n            [\n                {\n                    path: importDirectiveContext.element.path,\n                    error: e.toString(),\n                },\n            ],\n            importDirectiveContext.context.solParser,\n        );\n    }\n};\n\nexport async function getAllFiles(\n    getFolder: (path: string) => Promise<Folder>,\n    getFile: (path: string) => Promise<string>,\n    resolveImport: (link: string) => Promise<ContentImport>,\n    baseFolderPath: string,\n    solParser: Parse,\n): Promise<ParsedSolFile[]> {\n    const localFiles = parseFiles(\n        await resolveFolder({\n            context: { getFolder, getFile },\n            element: await getFolder(baseFolderPath),\n        }),\n        solParser,\n    );\n\n    return R.uniqWith(isDuplicateFile)(\n        await resolveExternalImports(localFiles, resolveImport, solParser),\n    );\n}\n\nfunction isDuplicateFile<T extends RawSolFile>(iDA: T, iDB: T): boolean {\n    return iDA.path === iDB.path;\n}\n\nexport async function resolveExternalImports(\n    files: ParsedSolFile[],\n    resolveImport: (link: string) => Promise<ContentImport>,\n    solParser: Parse,\n): Promise<ParsedSolFile[]> {\n    return R.pipe(\n        R.map(async (file: ParsedSolFile) => [\n            file,\n            ...(await retrieveExternalContent(\n                getAST(file),\n                resolveImport,\n                solParser,\n            )),\n        ]),\n        (a) => Promise.all(a),\n        R.andThen(R.unnest),\n    )(files);\n}\n\nfunction isExternalFile(pathElement: { path: string }) {\n    return pathElement.path.match('^(github|http|https|swarm|ipfs)://.*$')\n        ? true\n        : false;\n}\n\nasync function retrieveExternalContent(\n    astNodes: ASTNode[],\n    resolveImport: (link: string) => Promise<ContentImport>,\n    solParser: Parse,\n    baseUrl?: string,\n): Promise<ParsedSolFile[]> {\n    const resolveImportPathToAbsoluteUrl = (\n        importDirective: ImportDirective,\n    ): ImportDirective =>\n        baseUrl\n            ? {\n                  ...importDirective,\n                  path: new URL(importDirective.path, baseUrl).href,\n              }\n            : { ...importDirective };\n\n    const addContextToImportDirective = (importDirective: ImportDirective) => ({\n        context: { resolveImport, solParser },\n        element: importDirective,\n    });\n\n    return R.pipe(\n        getImports,\n        R.map(resolveImportPathToAbsoluteUrl),\n        R.filter(isExternalFile),\n        R.map(addContextToImportDirective),\n        R.map(execImport),\n        (a) => Promise.all(a),\n        R.andThen(R.unnest),\n        R.andThen(R.uniqWith(isDuplicateFile)),\n    )(astNodes);\n}\n\nexport function buildInputGraph(parsedFiles: ParsedSolFile[]): Edge[] {\n    return R.pipe(R.map(getImportsAsEdge), R.unnest)(parsedFiles);\n}\n\nfunction getImportsAsEdge(parsedSolFile: ParsedSolFile): Edge[] {\n    const importToEdge = (importDirective: ImportDirective): Edge => ({\n        to: parsedSolFile.path,\n        from: isExternalFile(importDirective)\n            ? importDirective.path\n            : isExternalFile(parsedSolFile)\n            ? new URL(importDirective.path, parsedSolFile.path).href\n            : Path.resolve(\n                  Path.dirname(parsedSolFile.path),\n                  importDirective.path,\n              ),\n    });\n\n    return R.pipe(getAST, getImports, R.map(importToEdge))(parsedSolFile);\n}\n\nexport function getImportRootFiles(\n    files: ParsedSolFile[],\n    edges: Edge[],\n): ParsedSolFile[] {\n    const isImportRoot = (fileToCheck: ParsedSolFile) =>\n        R.filter((edge: Edge) => fileToCheck.path === edge.from, edges)\n            .length === 0;\n\n    return R.filter(isImportRoot, files);\n}\n\nexport function getFileDisplayName(path: string): string {\n    const shortName = (name: string) =>\n        name.length > 20\n            ? name.slice(0, 7) +\n              '...' +\n              name.slice(name.length - 8, name.length)\n            : name;\n\n    const getBasename = (path: string): string => Path.basename(path, '.sol');\n\n    return R.pipe(getBasename, shortName)(path);\n}\n","import { PluginClient } from '@remixproject/plugin';\nimport { IRemixApi } from '@remixproject/plugin-api';\nimport type { PluginApi } from '@remixproject/plugin-utils';\nimport { getAllFiles } from '../lib/FileHandling';\nimport { Parse, ParsedSolFile } from '../lib/ParseSolidity';\n\nconst CONTRACT_DIR = '/contracts';\n\nexport async function getAllRemixFiles(\n    client: PluginClient<any, Readonly<IRemixApi>> &\n        PluginApi<Readonly<IRemixApi>>,\n    solParser: Parse,\n): Promise<ParsedSolFile[]> {\n    return getAllFiles(\n        client.fileManager.getFolder,\n        client.fileManager.getFile,\n        client.contentImport.resolve,\n        CONTRACT_DIR,\n        solParser,\n    );\n}\n","import * as R from 'ramda';\n\nexport interface Edge {\n    from: string;\n    to: string;\n}\n\nexport interface Context<C, E> {\n    context: C;\n    element: E;\n}\n\nexport function getIncomingEdges(key: string, edges: Edge[]): Edge[] {\n    return R.filter((edge: Edge) => edge.to === key, edges);\n}\n\nexport function getOutgoingEdges(key: string, edges: Edge[]): Edge[] {\n    return R.filter((edge: Edge) => edge.from === key, edges);\n}\n\nexport function getElementById<T>(\n    elementId: string,\n    idPropertyName: string,\n    elements: T[],\n): T | undefined {\n    return R.find(\n        (element: T) => (element as any)[idPropertyName] === elementId,\n        elements,\n    );\n}\n","import { DAG, GraphNode } from '../graph/utils/NodePosition';\nimport { getContracts, ParsedSolFile } from './ParseSolidity';\nimport * as R from 'ramda';\nimport {\n    ContractDefinition,\n    InheritanceSpecifier,\n} from '@solidity-parser/parser/dist/src/ast-types';\nimport { Context, Edge } from './Graph';\n\ntype ContractInheritanceContext = Context<\n    {\n        inheritanceSpecifier: InheritanceSpecifier;\n        contract: ContractDefinition;\n        file: ParsedSolFile;\n    },\n    Context<ParsedSolFile, ContractDefinition>[]\n>;\n\ntype InheritanceContext = Context<\n    {\n        contract: ContractDefinition;\n        file: ParsedSolFile;\n        contracts: Context<ParsedSolFile, ContractDefinition>[];\n        edges: Edge[];\n    },\n    InheritanceSpecifier[]\n>;\n\nfunction getContractsFromFile(\n    node: GraphNode<ParsedSolFile>,\n): Context<ParsedSolFile, ContractDefinition>[] {\n    const getFileContextForContract = (\n        contract: ContractDefinition,\n    ): Context<ParsedSolFile, ContractDefinition> => ({\n        context: node.element as ParsedSolFile,\n        element: contract,\n    });\n\n    const getASTNodes = (node: GraphNode<ParsedSolFile>) =>\n        node.element?.parsedContent?.children\n            ? node.element?.parsedContent?.children\n            : [];\n\n    return R.pipe(\n        getASTNodes,\n        R.reject(R.isNil),\n        getContracts,\n        R.map(getFileContextForContract),\n    )(node);\n}\n\nfunction getAllLinkedEdges(from: string, edges: Edge[]): Edge[] {\n    return R.pipe(\n        R.filter<Edge, 'array'>((edge: Edge): boolean => edge.from === from),\n        R.map((edge) => [edge, ...getAllLinkedEdges(edge.to, edges)]),\n        R.unnest,\n    )(edges);\n}\n\nfunction importPathExists(from: string, to: string, edges: Edge[]): boolean {\n    return R.pipe(\n        (from: string) => getAllLinkedEdges(from, edges),\n        R.filter<Edge, 'array'>((edge) => edge.to === to),\n        R.isEmpty,\n        R.not,\n    )(from);\n}\n\nfunction findBaseContracts(inheritanceContext: InheritanceContext) {\n    const isConnected = (\n        candidate: Context<ParsedSolFile, ContractDefinition>,\n    ) =>\n        R.or(\n            candidate.context.path === inheritanceContext.context.file.path,\n            importPathExists(\n                candidate.context.path,\n                inheritanceContext.context.file.path,\n                inheritanceContext.context.edges,\n            ),\n        );\n\n    const findBaseContract = (inheritanceSpecifier: InheritanceSpecifier) => ({\n        context: {\n            ...inheritanceContext.context,\n            inheritanceSpecifier,\n        },\n        element: R.pipe(\n            R.filter<Context<ParsedSolFile, ContractDefinition>, 'array'>(\n                (contract: Context<ParsedSolFile, ContractDefinition>) =>\n                    contract.element.name ===\n                    inheritanceSpecifier.baseName.namePath,\n            ),\n            R.filter<Context<ParsedSolFile, ContractDefinition>, 'array'>(\n                isConnected,\n            ),\n        )(inheritanceContext.context.contracts),\n    });\n\n    return R.map(findBaseContract, inheritanceContext.element);\n}\n\nfunction createEdge(link: ContractInheritanceContext) {\n    return {\n        to: link.context.contract.name + '@' + link.context.file.path,\n        from: getContractId(link.element[0]),\n    };\n}\n\nexport function createInheritanceEdges(filesDag: DAG<ParsedSolFile>) {\n    const getFileContextForInheritanceSpecifier = (\n        contracts: Context<ParsedSolFile, ContractDefinition>[],\n    ) =>\n        R.map(\n            (contract: Context<ParsedSolFile, ContractDefinition>) => ({\n                context: {\n                    contract: contract.element,\n                    file: contract.context,\n                    contracts,\n                    edges: filesDag.edges,\n                },\n                element: contract.element.baseContracts,\n            }),\n            contracts,\n        );\n\n    return R.pipe(\n        R.map(getContractsFromFile),\n        R.unnest,\n        getFileContextForInheritanceSpecifier,\n        R.map(findBaseContracts),\n        R.unnest,\n        R.reject<ContractInheritanceContext>((e) => R.isEmpty(e.element)),\n        R.map(createEdge),\n    )(filesDag.nodes);\n}\n\nexport function getContractId(\n    contract: Context<ParsedSolFile, ContractDefinition>,\n) {\n    return contract.element.name + '@' + contract.context.path;\n}\n\nexport function getAllContracts(filesDag: DAG<ParsedSolFile>) {\n    return R.pipe(R.map(getContractsFromFile), R.unnest)(filesDag.nodes);\n}\n\nexport function getRootContracts(\n    contracts: Context<ParsedSolFile, ContractDefinition>[],\n    edges: Edge[],\n) {\n    const isContractRoot = (\n        contract: Context<ParsedSolFile, ContractDefinition>,\n    ) =>\n        R.filter((edge: Edge) => getContractId(contract) === edge.from, edges)\n            .length === 0;\n\n    return R.filter(isContractRoot, contracts);\n}\n","import { Edge } from '../../lib/Graph';\nimport * as R from 'ramda';\n\nfunction walkUp(startNodeId: string, edges: Edge[]): string[] {\n    return R.pipe(\n        R.filter<Edge, 'array'>((edge) => edge.from === startNodeId),\n        R.map<Edge, string>((edge) => edge.to),\n        R.map((nodeId) => walkUp(nodeId, edges)),\n        R.unnest,\n        (nodes) => [startNodeId, ...nodes],\n    )(edges);\n}\n\nfunction walkDown(startNodeId: string, edges: Edge[]): string[] {\n    return R.pipe(\n        R.filter<Edge, 'array'>((edge) => edge.to === startNodeId),\n        R.map<Edge, string>((edge) => edge.from),\n        R.map((nodeId) => walkDown(nodeId, edges)),\n        R.unnest,\n        (nodes) => [startNodeId, ...nodes],\n    )(edges);\n}\n\nexport function createCluster(\n    nodeIds: string[],\n    edges: Edge[],\n): Map<string, number> {\n    const uncheckedNodeIds = [...nodeIds];\n    let nodeToCheck = uncheckedNodeIds.pop();\n    let clusterId = 0;\n    const clusterMap = new Map<string, number>();\n\n    while (nodeToCheck) {\n        const cluster = R.uniq([\n            ...walkDown(nodeToCheck, edges),\n            ...walkUp(nodeToCheck, edges),\n        ]);\n        let clusterIdToUse: number = clusterId;\n        cluster.forEach((nodeId) => {\n            if (clusterMap.has(nodeId)) {\n                clusterIdToUse = clusterMap.get(nodeId) as number;\n            }\n        });\n\n        cluster.forEach((nodeId) => clusterMap.set(nodeId, clusterIdToUse));\n\n        clusterId = clusterIdToUse === clusterId ? clusterId + 1 : clusterId;\n        nodeToCheck = uncheckedNodeIds.pop();\n    }\n\n    return clusterMap;\n}\n","import { ParsedSolFile } from '../../lib/ParseSolidity';\nimport * as R from 'ramda';\nimport { buildInputGraph, getImportRootFiles } from '../../lib/FileHandling';\nimport {\n    getIncomingEdges,\n    Edge,\n    getOutgoingEdges,\n    Context,\n} from '../../lib/Graph';\nimport { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport {\n    createInheritanceEdges,\n    getAllContracts,\n    getContractId,\n    getRootContracts,\n} from '../../lib/ContractHandling';\nimport { ContractDefinition } from '@solidity-parser/parser/dist/src/ast-types';\nimport { createCluster } from './NodePositionOptimizer';\n\nexport interface DAG<T> {\n    nodes: GraphNode<T>[];\n    edges: Edge[];\n}\n\nexport interface GraphNode<T> {\n    id: string;\n    xPos: number;\n    yPos: number;\n    yRelative: number;\n    element?: T;\n}\n\nexport interface ThreeGraphNode<T> extends GraphNode<T> {\n    segments: CSS3DObject[];\n    segmentsInitialValues: { x: number; y: number; height: string }[];\n    object?: THREE.Object3D<THREE.Event>;\n    objectCSS?: CSS3DObject;\n    initialPosition?: { x: number; y: number };\n}\n\nfunction buildLayer<T>(\n    startXPos: number,\n    startYPos: number,\n    idCreation: (element: T) => string,\n) {\n    return R.addIndex<T, GraphNode<T>>(R.map)(\n        (element: T, index: number): GraphNode<T> => ({\n            xPos: startXPos + 1,\n            yPos: startYPos + index,\n            yRelative: index,\n            element,\n            id: idCreation(element),\n        }),\n    );\n}\n\nexport async function createDAG<T>(\n    rawNodes: T[],\n    rootRawNodes: T[],\n    edges: Edge[],\n    getId: (element: T) => string,\n): Promise<DAG<T>> {\n    const retrieveIncomingEdges = (element: T): Edge[] =>\n        getIncomingEdges(getId(element), edges);\n\n    const retrieveOutgoingEdges = (element: T): Edge[] =>\n        getOutgoingEdges(getId(element), edges);\n\n    const edgeToFromRawNode = (edge: Edge): T | undefined =>\n        R.find((element: T) => getId(element) === edge.from, rawNodes);\n\n    const edgePointsOnlyToRawNodes = (rawNodes: T[], edge: Edge) =>\n        R.pipe(\n            R.map((rawNode: T) => getId(rawNode)),\n            R.includes(edge.to),\n        )(rawNodes);\n\n    const rawNodePointsOnlyToRawNodes = (\n        rawNodes: T[],\n        edgesPerRawNode: Edge[],\n    ): boolean =>\n        R.pipe(\n            R.map((edgePerRawNode: Edge) =>\n                edgePointsOnlyToRawNodes(rawNodes, edgePerRawNode),\n            ),\n            R.none((a: boolean) => a === false),\n        )(edgesPerRawNode);\n\n    const onlyRawNodePointingToRawNodes = (rawNodes: T[], edges: Edge[][]) =>\n        R.filter(\n            (edges: Edge[]) => rawNodePointsOnlyToRawNodes(rawNodes, edges),\n            edges,\n        );\n\n    const rawNodeIsNotIncluded = (existingNodeIds: string[], rawNode: T) =>\n        !R.includes(getId(rawNode), existingNodeIds);\n\n    const getLayerFiles = (\n        startXPos: number,\n        startYPos: number,\n        lowerLayerNodes: T[],\n        existingNodeIds: string[],\n    ): GraphNode<T>[] => {\n        const nextLayer = (nodes: GraphNode<T>[]): GraphNode<T>[] =>\n            nodes.length > 0\n                ? [\n                      ...nodes,\n                      ...getLayerFiles(\n                          startXPos + 1,\n                          startYPos,\n                          [\n                              ...lowerLayerNodes,\n                              ...nodes.map((n) => n.element as T),\n                          ],\n                          [...R.map(R.prop('id'), nodes), ...existingNodeIds],\n                      ),\n                  ]\n                : [...nodes];\n\n        const onlyToLowerLayer = (element: T[]) =>\n            R.pipe(\n                R.map(retrieveOutgoingEdges),\n                (edges: Edge[][]) =>\n                    onlyRawNodePointingToRawNodes(lowerLayerNodes, edges),\n                R.unnest,\n                R.map<Edge, T | undefined>(edgeToFromRawNode),\n            )(element);\n\n        return R.pipe(\n            R.map(retrieveIncomingEdges),\n\n            R.unnest,\n            R.map<Edge, T | undefined>(edgeToFromRawNode),\n            R.reject(R.isNil) as () => T[],\n            onlyToLowerLayer,\n            R.reject(R.isNil) as () => T[],\n            R.uniqWith((a: T, b: T) => getId(a) === getId(b)),\n            R.filter(R.curry(rawNodeIsNotIncluded)(existingNodeIds)),\n            buildLayer<T>(startXPos, startYPos, (node) => getId(node)),\n            nextLayer,\n        )(lowerLayerNodes);\n    };\n\n    const nodes = [\n        ...buildLayer<T>(0, 0, getId)(rootRawNodes),\n        ...getLayerFiles(1, 0, rootRawNodes, R.map(getId, rootRawNodes)),\n    ];\n\n    const clusterMap = createCluster(\n        R.map((node: T) => getId(node))(rootRawNodes),\n        edges,\n    );\n\n    const nodePosForCluster = (clusterId: number, offset: number) => {\n        const filteredRootNodes = R.filter(\n            (rootRawNode) => clusterMap.get(getId(rootRawNode)) === clusterId,\n            rootRawNodes,\n        );\n        const nodes = [\n            ...buildLayer<T>(0, 0, getId)(filteredRootNodes),\n            ...getLayerFiles(\n                1,\n                0,\n                filteredRootNodes,\n                R.map(getId, filteredRootNodes),\n            ),\n        ];\n\n        return {\n            maxY: R.pipe(\n                R.map<GraphNode<T>, number>((node) => node.yPos),\n                R.reduce<number, number>(R.max, -Infinity),\n            )(nodes),\n            nodes: R.map<GraphNode<T>, GraphNode<T>>(\n                (node) => ({\n                    ...node,\n                    yPos: node.yPos + offset,\n                }),\n                nodes,\n            ),\n        };\n    };\n\n    let offsetNodes: GraphNode<T>[] = [];\n    let offset = 0;\n\n    for (const clusterId of R.uniq([...clusterMap.values()])) {\n        const nodeWithPost = nodePosForCluster(clusterId, offset);\n        offsetNodes = [...offsetNodes, ...nodeWithPost.nodes];\n        offset += nodeWithPost.maxY + 1;\n    }\n\n    return {\n        edges,\n        nodes: offsetNodes,\n    };\n}\n\nexport async function getContractsDAG(filesDAG: DAG<ParsedSolFile>) {\n    const edges = createInheritanceEdges(filesDAG);\n\n    const contracts = getAllContracts(filesDAG);\n\n    return createDAG<Context<ParsedSolFile, ContractDefinition>>(\n        contracts,\n        getRootContracts(contracts, edges),\n        edges,\n        getContractId,\n    );\n}\n\nexport async function getFilesDAG(\n    files: ParsedSolFile[],\n): Promise<DAG<ParsedSolFile>> {\n    const edges = buildInputGraph(files);\n\n    const newRootFiles = getImportRootFiles(files, edges);\n\n    return createDAG<ParsedSolFile>(\n        files,\n        newRootFiles,\n        edges,\n        (file: ParsedSolFile) => file.path,\n    );\n}\n","import '@fortawesome/fontawesome-free/css/all.min.css';\n\ninterface GraphProps {\n    iconClass: string;\n}\n\nfunction Icon(props: GraphProps) {\n    return <i className={props.iconClass}></i>;\n}\n\nexport default Icon;\n","import '@fortawesome/fontawesome-free/css/all.min.css';\nimport './ViewSelect.css';\n\ninterface ViewSelectProps {\n    setView: (viewName: string) => void;\n    defaultView: string;\n}\n\nfunction ViewSelect(props: ViewSelectProps) {\n    return (\n        <select\n            className=\"view-select form-select \"\n            defaultValue={props.defaultView}\n            onChange={(event) => props.setView(event.target.value)}\n        >\n            <option value=\"files\">Files</option>\n            <option value=\"contracts\">Contracts</option>\n            <option value=\"transactions\">Transaction</option>\n            <option value=\"block\">Block</option>\n        </select>\n    );\n}\n\nexport default ViewSelect;\n","import './Menu.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport Icon from './Icon';\nimport ViewSelect from './ViewSelect';\n\ninterface MenuProps {\n    zoomIn?: () => void;\n    zoomOut?: () => void;\n    autoZoom?: () => void;\n    setView?: (vieName: string) => void;\n    defaultView?: string;\n    infoBox?: JSX.Element;\n}\n\nfunction Menu(props: MenuProps) {\n    return (\n        <div className=\"menu d-flex justify-content-start w-100\">\n            <div className=\" d-flex align-items-end w-100\">\n                {props.defaultView && props.setView && (\n                    <ViewSelect\n                        setView={props.setView}\n                        defaultView={props.defaultView}\n                    />\n                )}\n\n                {props.zoomIn && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-sm btn-primary menu-btn menu-btn-space\"\n                        onClick={props.zoomIn}\n                    >\n                        <Icon iconClass=\"fas fa-search-plus\" />\n                    </button>\n                )}\n                {props.zoomOut && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-sm btn-primary menu-btn\"\n                        onClick={props.zoomOut}\n                    >\n                        <Icon iconClass=\"fas fa-search-minus\" />\n                    </button>\n                )}\n                {props.autoZoom && (\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-sm btn-primary menu-btn\"\n                        onClick={props.autoZoom}\n                    >\n                        <Icon iconClass=\"fas fa-expand\" />\n                    </button>\n                )}\n            </div>\n            <div className=\" menu-end d-flex align-items-end justify-content-end\">\n                {props.infoBox}\n            </div>\n        </div>\n    );\n}\n\nexport default Menu;\n","import { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport { Edge } from '../../lib/Graph';\nimport { GraphStyle } from './GraphStyle';\nimport { ThreeGraphNode } from './NodePosition';\n\nexport function showImportPaths<T>(\n    edges: Edge[],\n    nodes: ThreeGraphNode<T>[],\n    exec: (o: CSS3DObject, xPos: number, isLeftArrow?: boolean) => void,\n) {\n    for (const edge of edges) {\n        const fromNode = nodes.find((node) => node.id === edge.from);\n        const toNode = nodes.find((node) => node.id === edge.to);\n        if (fromNode && toNode) {\n            exec(fromNode.segments[0], fromNode.xPos);\n            exec(toNode.segments[1], fromNode.xPos);\n            exec(toNode.segments[5], fromNode.xPos, true);\n            if (fromNode.xPos - toNode.xPos > 1) {\n                exec(toNode.segments[3], fromNode.xPos);\n                exec(toNode.segments[4], fromNode.xPos);\n                for (let i = toNode.xPos + 1; i < fromNode.xPos - 1; i++) {\n                    const node = nodes.find(\n                        (n) => n.yPos === toNode.yPos && n.xPos === i,\n                    );\n                    if (node) {\n                        exec(node.segments[4], fromNode.xPos);\n                    }\n                }\n            }\n\n            if (fromNode.yPos < toNode.yPos) {\n                for (let i = fromNode.yPos; i <= toNode.yPos; i++) {\n                    const node = nodes.find(\n                        (n) => n.xPos + 1 === fromNode.xPos && n.yPos === i,\n                    );\n                    if (node) {\n                        if (i === fromNode.yPos) {\n                            exec(node.segments[3], fromNode.xPos);\n                        } else if (i === toNode.yPos) {\n                            exec(node.segments[2], fromNode.xPos);\n                            if (fromNode.xPos - toNode.xPos > 1) {\n                                exec(node.segments[3], fromNode.xPos);\n                            }\n                        } else {\n                            exec(node.segments[2], fromNode.xPos);\n                            exec(node.segments[3], fromNode.xPos);\n                        }\n                    }\n                }\n            } else if (fromNode.yPos > toNode.yPos) {\n                for (let i = toNode.yPos; i <= fromNode.yPos; i++) {\n                    const node = nodes.find(\n                        (n) => n.xPos + 1 === fromNode.xPos && n.yPos === i,\n                    );\n                    if (node) {\n                        if (i === fromNode.yPos) {\n                            exec(node.segments[2], fromNode.xPos);\n                        } else if (i === toNode.yPos) {\n                            exec(node.segments[3], fromNode.xPos);\n                            if (fromNode.xPos - toNode.xPos > 1) {\n                                exec(node.segments[2], fromNode.xPos);\n                            }\n                        } else {\n                            exec(node.segments[2], fromNode.xPos);\n                            exec(node.segments[3], fromNode.xPos);\n                        }\n                    }\n                }\n            } else {\n                if (fromNode.xPos - toNode.xPos > 1) {\n                    exec(toNode.segments[3], fromNode.xPos);\n                    const node = nodes.find(\n                        (n) =>\n                            n.xPos + 1 === fromNode.xPos &&\n                            n.yPos === fromNode.yPos,\n                    );\n                    if (node) {\n                        exec(node.segments[3], fromNode.xPos);\n                    }\n                }\n            }\n        }\n    }\n}\n\nexport const getSegmentValues = [\n    (x: number, y: number, graphStyle: GraphStyle): number[] => {\n        return [\n            x - graphStyle.ELEMENT_WIDTH / 2 - graphStyle.COL_DISTANCE / 4,\n            y,\n            graphStyle.COL_DISTANCE / 2,\n            graphStyle.SEGMENT_THICKNESS,\n        ];\n    },\n\n    (x: number, y: number, graphStyle: GraphStyle): number[] => {\n        return [\n            x +\n                graphStyle.ELEMENT_WIDTH / 2 +\n                graphStyle.COL_DISTANCE / 4 +\n                (graphStyle.SEGMENT_THICKNESS * 3) / 2,\n            y,\n            graphStyle.COL_DISTANCE / 2 - graphStyle.SEGMENT_THICKNESS * 3,\n            graphStyle.SEGMENT_THICKNESS,\n        ];\n    },\n\n    (x: number, y: number, graphStyle: GraphStyle): number[] => {\n        return [\n            x + graphStyle.ELEMENT_WIDTH / 2 + graphStyle.COL_DISTANCE / 2,\n            y +\n                (graphStyle.ELEMENT_HEIGHT / 2 + graphStyle.COL_DISTANCE / 2) /\n                    2,\n            graphStyle.SEGMENT_THICKNESS,\n            graphStyle.ELEMENT_HEIGHT / 2 + graphStyle.COL_DISTANCE / 2,\n        ];\n    },\n    (x: number, y: number, graphStyle: GraphStyle): number[] => {\n        return [\n            x + graphStyle.ELEMENT_WIDTH / 2 + graphStyle.COL_DISTANCE / 2,\n            y -\n                (graphStyle.ELEMENT_HEIGHT / 2 + graphStyle.COL_DISTANCE / 2) /\n                    2,\n            graphStyle.SEGMENT_THICKNESS,\n            graphStyle.ELEMENT_HEIGHT / 2 + graphStyle.COL_DISTANCE / 2,\n        ];\n    },\n    (x: number, y: number, graphStyle: GraphStyle): number[] => {\n        return [\n            x + graphStyle.ELEMENT_WIDTH + graphStyle.COL_DISTANCE,\n            y - (graphStyle.ELEMENT_HEIGHT / 2 + graphStyle.COL_DISTANCE / 2),\n            graphStyle.ELEMENT_WIDTH + graphStyle.COL_DISTANCE,\n            graphStyle.SEGMENT_THICKNESS,\n        ];\n    },\n    (x: number, y: number, graphStyle: GraphStyle): number[] => {\n        return [\n            x +\n                graphStyle.ELEMENT_WIDTH / 2 +\n                (graphStyle.SEGMENT_THICKNESS * 3) / 2,\n            y,\n            graphStyle.COL_DISTANCE / 2,\n            graphStyle.SEGMENT_THICKNESS,\n        ];\n    },\n];\n\nexport function getSegments(x: number, y: number, graphStyle: GraphStyle) {\n    const getSegment = (\n        values: number[],\n        isLeftArrow?: boolean,\n    ): CSS3DObject => {\n        const segment = document.createElement('div');\n        segment.className = isLeftArrow ? '' : 'edge';\n        segment.style.width = isLeftArrow ? '0px' : values[2] + 'px';\n        segment.style.height = isLeftArrow ? '0px' : values[3] + 'px';\n\n        if (isLeftArrow) {\n            segment.style.borderTop =\n                graphStyle.SEGMENT_THICKNESS * 3 + 'px solid transparent';\n            segment.style.borderBottom =\n                graphStyle.SEGMENT_THICKNESS * 3 + 'px solid transparent';\n            segment.style.borderRight =\n                graphStyle.SEGMENT_THICKNESS * 3 +\n                'px solid ' +\n                graphStyle.SEGMENT_COLOR;\n        }\n\n        const segmentObject = new CSS3DObject(segment);\n        segmentObject.position.x = values[0];\n        segmentObject.position.y = values[1];\n\n        return segmentObject;\n    };\n\n    const segments = [\n        getSegment(getSegmentValues[0](x, y, graphStyle)),\n        getSegment(getSegmentValues[1](x, y, graphStyle)),\n        getSegment(getSegmentValues[2](x, y, graphStyle)),\n        getSegment(getSegmentValues[3](x, y, graphStyle)),\n        getSegment(getSegmentValues[4](x, y, graphStyle)),\n        getSegment(getSegmentValues[5](x, y, graphStyle), true),\n    ];\n\n    return {\n        segments,\n        initialValues: segments.map((seg) => ({\n            x: seg.position.x,\n            y: seg.position.y,\n            height: seg.element.style.height,\n        })),\n    };\n}\n","export interface GraphStyle {\n    ELEMENT_WIDTH: number;\n    ELEMENT_HEIGHT: number;\n    ELEMENT_BORDER_COLOR: string;\n    COL_DISTANCE: number;\n    SEGMENT_THICKNESS: number;\n    SEGMENT_HIGHLIGHTED_COLOR: string;\n    SEGMENT_NOT_HIGHLIGHTED_COLOR: string;\n    SEGMENT_COLOR: string;\n    ANIMATION_DURATION: number;\n    EXPAND_HEIGHT: number;\n}\n\nexport const DefaultGraphStyle: GraphStyle = {\n    ELEMENT_WIDTH: 850,\n    ELEMENT_HEIGHT: 200,\n    ELEMENT_BORDER_COLOR: 'rgba(127, 255, 255, 0.25)',\n    COL_DISTANCE: 150,\n    SEGMENT_THICKNESS: 10,\n    SEGMENT_HIGHLIGHTED_COLOR: '#ffae00',\n    SEGMENT_NOT_HIGHLIGHTED_COLOR: '#6d6d6d',\n    SEGMENT_COLOR: '#ffffff',\n    ANIMATION_DURATION: 1000,\n    EXPAND_HEIGHT: 200,\n};\n","import * as THREE from 'three';\nimport { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport { ReplayTransaction } from '../../lib/TransactionSequence';\nimport { showImportPaths, getSegments } from './../utils/EdgeSegments';\nimport { GraphStyle } from './../utils/GraphStyle';\nimport { DAG, GraphNode, ThreeGraphNode } from './../utils/NodePosition';\nimport { RenderedNodes } from './../utils/ThreeEnv';\n\nexport enum SeqNodeType {\n    Account,\n    Transaction,\n    TransactionResult,\n}\n\nexport interface CSSObject3DPair {\n    css3DObject: CSS3DObject;\n    object3D: THREE.Object3D;\n}\n\nexport interface SequenceDiagramNode {\n    css3DObject: CSS3DObject;\n    object3D: THREE.Object3D;\n    portal: PortalParts<ReplayTransaction | string>;\n    seqNodeType: SeqNodeType;\n    txId: number;\n}\n\nexport interface PosMappingData {\n    graphStyle: GraphStyle;\n    width: number;\n    height: number;\n    camera: THREE.PerspectiveCamera;\n}\n\nexport interface PortalParts<T> {\n    graphStyle: GraphStyle;\n    node: GraphNode<T>;\n    onMouseLeave: () => void;\n    onMouseOver: () => void;\n    nodeDiv: HTMLDivElement;\n}\n\nexport interface RenderedSequenceNodes {\n    sequenceDiagramNodes: SequenceDiagramNode[];\n\n    graphStyle: GraphStyle;\n}\n\nexport function nodePosToThreePos(\n    x: number,\n    y: number,\n    height: number,\n    width: number,\n    camera: THREE.PerspectiveCamera,\n): THREE.Vector3 {\n    const vec = new THREE.Vector3();\n    const threePos = new THREE.Vector3();\n\n    vec.set((x / width) * 2 - 1, -(y / height) * 2 + 1, 0.5);\n\n    vec.unproject(camera);\n\n    vec.sub(camera.position).normalize();\n\n    const distance = -camera.position.z / vec.z;\n\n    threePos.copy(camera.position).add(vec.multiplyScalar(distance));\n\n    return threePos;\n}\n\nexport function createNodes<T>(\n    dag: DAG<T>,\n    posMappingData: PosMappingData,\n): RenderedNodes<T> {\n    const threeNodes: ThreeGraphNode<T>[] = [];\n    const portals: PortalParts<T>[] = [];\n\n    for (const node of dag.nodes) {\n        if (node.element) {\n            const nodeDiv = document.createElement('div');\n\n            const objectCSS = new CSS3DObject(nodeDiv);\n            objectCSS.position.x = Math.random() * 4000 - 2000;\n            objectCSS.position.y = Math.random() * 4000 - 2000;\n            objectCSS.position.z = Math.random() * 4000 - 2000;\n\n            const onMouseOver = () => {\n                showImportPaths(\n                    dag.edges,\n                    [...threeNodes, ...emptyNodes],\n                    (o: CSS3DObject, xPos: number, isLeftArrow?: boolean) =>\n                        isLeftArrow\n                            ? (o.element.style.borderRightColor =\n                                  posMappingData.graphStyle.SEGMENT_NOT_HIGHLIGHTED_COLOR)\n                            : (o.element.style.backgroundColor =\n                                  posMappingData.graphStyle.SEGMENT_NOT_HIGHLIGHTED_COLOR),\n                );\n                showImportPaths(\n                    dag.edges.filter(\n                        (edge) => edge.from === node.id || edge.to === node.id,\n                    ),\n                    [...threeNodes, ...emptyNodes],\n                    (o: CSS3DObject, xPos: number, isLeftArrow?: boolean) =>\n                        isLeftArrow\n                            ? (o.element.style.borderRightColor =\n                                  posMappingData.graphStyle.SEGMENT_HIGHLIGHTED_COLOR)\n                            : (o.element.style.backgroundColor =\n                                  posMappingData.graphStyle.SEGMENT_HIGHLIGHTED_COLOR),\n                );\n            };\n\n            const onMouseLeave = () => {\n                showImportPaths(\n                    dag.edges,\n                    [...threeNodes, ...emptyNodes],\n                    (o: CSS3DObject, xPos: number, isLeftArrow?: boolean) =>\n                        isLeftArrow\n                            ? (o.element.style.borderRightColor =\n                                  posMappingData.graphStyle.SEGMENT_COLOR)\n                            : (o.element.style.backgroundColor =\n                                  posMappingData.graphStyle.SEGMENT_COLOR),\n                );\n            };\n\n            const object = new THREE.Object3D();\n            object.position.x = nodeXIndexToPos(node.xPos, posMappingData);\n\n            object.position.y = nodeYIndexToPos(node.yPos, posMappingData);\n\n            const segments = getSegments(\n                object.position.x,\n                object.position.y,\n                posMappingData.graphStyle,\n            );\n\n            threeNodes.push({\n                ...node,\n                object,\n                objectCSS,\n                segments: segments.segments,\n                segmentsInitialValues: segments.initialValues,\n                initialPosition: { x: object.position.x, y: object.position.y },\n            });\n\n            portals.push({\n                graphStyle: posMappingData.graphStyle,\n                node,\n                onMouseLeave,\n                onMouseOver,\n                nodeDiv,\n            });\n        }\n    }\n\n    const emptyNodes = fillEmptyNodes(threeNodes, posMappingData);\n\n    return {\n        threeNodes: [...threeNodes, ...emptyNodes],\n        portals,\n        graphStyle: posMappingData.graphStyle,\n    };\n}\n\nexport function nodeXIndexToPos(index: number, posMappingData: PosMappingData) {\n    const pos = nodePosToThreePos(\n        0,\n        40,\n        posMappingData.height,\n        posMappingData.width,\n        posMappingData.camera,\n    );\n    return (\n        parseInt(index.toString()) *\n            (posMappingData.graphStyle.ELEMENT_WIDTH +\n                posMappingData.graphStyle.COL_DISTANCE) +\n        pos.x\n    );\n}\n\nexport function nodeYIndexToPos(index: number, posMappingData: PosMappingData) {\n    const pos = nodePosToThreePos(\n        0,\n        40,\n        posMappingData.height,\n        posMappingData.width,\n        posMappingData.camera,\n    );\n    return (\n        -(\n            parseInt(index.toString()) *\n            (posMappingData.graphStyle.ELEMENT_HEIGHT +\n                posMappingData.graphStyle.COL_DISTANCE)\n        ) + pos.y\n    );\n}\n\nfunction fillEmptyNodes<T>(\n    threeNodes: ThreeGraphNode<T>[],\n    posMappingData: PosMappingData,\n): ThreeGraphNode<T>[] {\n    const maxX = Math.max(...threeNodes.map((node) => node.xPos));\n    const maxY = Math.max(...threeNodes.map((node) => node.yPos));\n    const emptyNodes: ThreeGraphNode<T>[] = [];\n    for (let x = 1; x <= maxX; x++) {\n        for (let y = 0; y <= maxY; y++) {\n            if (\n                !threeNodes.find((node) => node.xPos === x && node.yPos === y)\n            ) {\n                const segments = getSegments(\n                    nodeXIndexToPos(x, posMappingData),\n                    nodeYIndexToPos(y, posMappingData),\n                    posMappingData.graphStyle,\n                );\n\n                emptyNodes.push({\n                    xPos: x,\n                    yPos: y,\n                    yRelative: 0,\n                    id: 'empty' + x + y,\n                    segments: segments.segments,\n                    segmentsInitialValues: segments.initialValues,\n                });\n            }\n        }\n    }\n\n    return emptyNodes;\n}\n","import { CSS3DObject } from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport * as THREE from 'three';\nimport {\n    getAllAcccountAddresses,\n    ReplayTransaction,\n} from '../../lib/TransactionSequence';\nimport {\n    nodeXIndexToPos,\n    nodeYIndexToPos,\n    PosMappingData,\n    SeqNodeType,\n    SequenceDiagramNode,\n} from '../views/Node';\nimport { Three, transform } from './ThreeEnv';\n\nenum ArrowHead {\n    None,\n    Left,\n    Right,\n}\n\nexport function createSequenceBody(\n    trace: ReplayTransaction[],\n    posMappingData: PosMappingData,\n    three: Three,\n) {\n    const accountAddresses = getAllAcccountAddresses(trace);\n\n    let nodes: SequenceDiagramNode[] = createAccountNodes(\n        accountAddresses,\n        posMappingData,\n    );\n\n    accountAddresses.forEach((_, index) => {\n        createLine(index * 2, 1, posMappingData, three, false);\n    });\n\n    let row = 2;\n\n    const returnStack: { id: number; returnTx: ReplayTransaction }[] = [];\n\n    for (let i = 0; i < trace.length; i++) {\n        const internalTx = trace[i];\n\n        accountAddresses.forEach((_, index) => {\n            createLine(index * 2, row, posMappingData, three, false);\n        });\n        row++;\n\n        const resolveFrom = () =>\n            i > 0\n                ? trace.find((replayTx) => {\n                      let base = [...internalTx.traceAddress];\n                      if (base[base.length - 1] === 0) {\n                          base = base.slice(0, base.length - 1);\n                      } else {\n                          base[base.length - 1] = 0;\n                      }\n\n                      return replayTx.traceAddress.join('_') === base.join('_');\n                  })?.action.to\n                : internalTx.action.from;\n\n        nodes = [\n            ...nodes,\n            ...connectAccounts(\n                resolveFrom() as string,\n                internalTx.action.to,\n                row,\n                accountAddresses,\n                three,\n                posMappingData,\n                internalTx,\n                i,\n            ),\n        ];\n\n        row++;\n\n        const returnInternalTx = {\n            ...internalTx,\n            action: {\n                ...internalTx.action,\n                from: internalTx.action.to,\n                to: resolveFrom() as string,\n            },\n        };\n\n        returnStack.push({ id: i, returnTx: { ...returnInternalTx } });\n\n        const nextTx = trace[i + 1];\n\n        if (\n            (nextTx &&\n                nextTx.traceAddress[nextTx.traceAddress.length - 1] > 0) ||\n            !nextTx\n        ) {\n            let base;\n            if (nextTx) {\n                base = [...nextTx.traceAddress];\n                base[nextTx.traceAddress.length - 1]--;\n            }\n\n            let returnEntry = returnStack[returnStack.length - 1];\n\n            const removeTxFromStack = () => {\n                accountAddresses.forEach((_, index) => {\n                    createLine(index * 2, row, posMappingData, three, false);\n                });\n                row++;\n\n                const { id, returnTx } = returnEntry;\n\n                nodes = [\n                    ...nodes,\n                    ...connectAccounts(\n                        returnTx.action.to,\n                        returnTx.action.from,\n                        row,\n                        accountAddresses,\n                        three,\n                        posMappingData,\n                        returnTx,\n                        id,\n                        true,\n                    ),\n                ];\n                accountAddresses.forEach((_, index) => {\n                    createLine(index * 2, row, posMappingData, three, false);\n                });\n                row++;\n\n                returnStack.pop();\n            };\n\n            if (\n                base &&\n                returnEntry?.returnTx.traceAddress.join('_') ===\n                    base.join('_') &&\n                returnEntry.returnTx.subtraces === 0 &&\n                returnEntry.returnTx.traceAddress[\n                    returnEntry.returnTx.traceAddress.length - 1\n                ] !== 0\n            ) {\n                removeTxFromStack();\n            } else {\n                while (\n                    (!nextTx && returnStack.length > 0) ||\n                    (base &&\n                        returnEntry?.returnTx.traceAddress.join('_') !==\n                            base.join('_'))\n                ) {\n                    removeTxFromStack();\n                    returnEntry = returnStack[returnStack.length - 1];\n                }\n            }\n        }\n    }\n\n    nodes.forEach((node) => three.scene.add(node.css3DObject));\n\n    transform(nodes, posMappingData.graphStyle.ANIMATION_DURATION);\n\n    return nodes;\n}\n\nexport function connectAccounts(\n    from: string,\n    to: string,\n    row: number,\n    accountAddresses: string[],\n    three: Three,\n    posMappingData: PosMappingData,\n    replayTx: ReplayTransaction,\n    txId: number,\n    isReturn?: boolean,\n): SequenceDiagramNode[] {\n    const fromIndex = accountAddresses.findIndex((account) => from === account);\n    const toIndex = accountAddresses.findIndex((account) => to === account);\n    const sequenceDiagramNodes: SequenceDiagramNode[] = [];\n    const seqNodeType = isReturn\n        ? SeqNodeType.TransactionResult\n        : SeqNodeType.Transaction;\n\n    if (fromIndex !== -1 && toIndex !== -1) {\n        for (let i = 0; i < accountAddresses.length; i++) {\n            if (i === fromIndex && toIndex === fromIndex) {\n                createLoop(i * 2, row, posMappingData, three);\n                sequenceDiagramNodes.push(\n                    createNode(\n                        i * 2 + 1,\n                        row,\n                        posMappingData,\n                        replayTx,\n                        seqNodeType,\n                        txId,\n                    ),\n                );\n            } else if (i > fromIndex && i < toIndex) {\n                createPlus(\n                    i * 2,\n                    row,\n                    posMappingData,\n                    three,\n                    false,\n                    ArrowHead.None,\n                );\n                createLine(i * 2 + 1, row, posMappingData, three, true);\n            } else if (i < fromIndex && i > toIndex) {\n                createPlus(\n                    i * 2,\n                    row,\n                    posMappingData,\n                    three,\n                    false,\n                    ArrowHead.None,\n                );\n                createLine(i * 2 - 1, row, posMappingData, three, true);\n            } else if (i === fromIndex) {\n                if (fromIndex < toIndex) {\n                    createPlus(\n                        i * 2,\n                        row,\n                        posMappingData,\n                        three,\n                        true,\n                        isReturn ? ArrowHead.Right : ArrowHead.None,\n                    );\n                    sequenceDiagramNodes.push(\n                        createNode(\n                            i * 2 + 1,\n                            row,\n                            posMappingData,\n                            replayTx,\n                            seqNodeType,\n                            txId,\n                        ),\n                    );\n                } else {\n                    createPlus(\n                        i * 2,\n                        row,\n                        posMappingData,\n                        three,\n                        true,\n                        isReturn ? ArrowHead.Left : ArrowHead.None,\n                        true,\n                    );\n                    sequenceDiagramNodes.push(\n                        createNode(\n                            i * 2 - 1,\n                            row,\n                            posMappingData,\n                            replayTx,\n                            seqNodeType,\n                            txId,\n                        ),\n                    );\n                }\n            } else if (i === toIndex) {\n                if (fromIndex > toIndex) {\n                    createPlus(\n                        i * 2,\n                        row,\n                        posMappingData,\n                        three,\n                        true,\n                        isReturn ? ArrowHead.None : ArrowHead.Right,\n                    );\n                } else {\n                    createPlus(\n                        i * 2,\n                        row,\n                        posMappingData,\n                        three,\n                        true,\n                        isReturn ? ArrowHead.None : ArrowHead.Left,\n                        true,\n                    );\n                }\n            } else {\n                createLine(i * 2, row, posMappingData, three, false);\n            }\n        }\n    }\n    return sequenceDiagramNodes;\n}\n\nexport function createLine(\n    indexX: number,\n    indexY: number,\n    posMappingData: PosMappingData,\n    three: Three,\n    rotate: boolean,\n) {\n    const segment = document.createElement('div');\n    segment.className = 'edge';\n    segment.style.width =\n        (rotate\n            ? posMappingData.graphStyle.ELEMENT_WIDTH\n            : posMappingData.graphStyle.SEGMENT_THICKNESS) + 'px';\n    segment.style.height =\n        (rotate\n            ? posMappingData.graphStyle.SEGMENT_THICKNESS\n            : posMappingData.graphStyle.ELEMENT_HEIGHT) + 'px';\n\n    const partObject = new CSS3DObject(segment);\n\n    partObject.position.x = nodeXIndexToPos(indexX, posMappingData);\n    partObject.position.y = nodeYIndexToPos(indexY, posMappingData);\n\n    three.scene.add(partObject);\n}\n\nfunction createArrowHead(\n    posMappingData: PosMappingData,\n    position: THREE.Vector3,\n    right: boolean,\n): CSS3DObject {\n    const arrowSegment = document.createElement('div');\n\n    arrowSegment.style.width = '0px';\n    arrowSegment.style.height = '0px';\n\n    arrowSegment.style.borderTop =\n        posMappingData.graphStyle.SEGMENT_THICKNESS * 3 +\n        'px solid transparent';\n    arrowSegment.style.borderBottom =\n        posMappingData.graphStyle.SEGMENT_THICKNESS * 3 +\n        'px solid transparent';\n\n    if (right) {\n        arrowSegment.style.borderRight =\n            posMappingData.graphStyle.SEGMENT_THICKNESS * 3 +\n            'px solid ' +\n            posMappingData.graphStyle.SEGMENT_COLOR;\n    } else {\n        arrowSegment.style.borderLeft =\n            posMappingData.graphStyle.SEGMENT_THICKNESS * 3 +\n            'px solid ' +\n            posMappingData.graphStyle.SEGMENT_COLOR;\n    }\n\n    const arrowObject = new CSS3DObject(arrowSegment);\n\n    arrowObject.position.x =\n        position.x +\n        posMappingData.graphStyle.SEGMENT_THICKNESS * 2 * (right ? 1 : -1);\n    arrowObject.position.y = position.y;\n\n    return arrowObject;\n}\n\nexport function createPlus(\n    indexX: number,\n    indexY: number,\n    posMappingData: PosMappingData,\n    three: Three,\n    isT: boolean,\n    arrowHead: ArrowHead,\n    rotate?: boolean,\n) {\n    const group = new THREE.Group();\n    const vSegment = document.createElement('div');\n    vSegment.className = 'edge';\n    vSegment.style.width = posMappingData.graphStyle.SEGMENT_THICKNESS + 'px';\n    vSegment.style.height = posMappingData.graphStyle.ELEMENT_HEIGHT + 'px';\n\n    const vObject = new CSS3DObject(vSegment);\n\n    vObject.position.x = nodeXIndexToPos(indexX, posMappingData);\n    vObject.position.y = nodeYIndexToPos(indexY, posMappingData);\n\n    group.add(vObject);\n\n    switch (arrowHead) {\n        case ArrowHead.Left:\n            group.add(createArrowHead(posMappingData, vObject.position, false));\n            break;\n        case ArrowHead.Right:\n            group.add(createArrowHead(posMappingData, vObject.position, true));\n            break;\n        case ArrowHead.None:\n        default:\n            break;\n    }\n\n    const hSegment = document.createElement('div');\n    hSegment.className = 'edge';\n    hSegment.style.width =\n        posMappingData.graphStyle.ELEMENT_WIDTH / (isT ? 2 : 1) + 'px';\n    hSegment.style.height = posMappingData.graphStyle.SEGMENT_THICKNESS + 'px';\n\n    const hObject = new CSS3DObject(hSegment);\n\n    hObject.position.x =\n        vObject.position.x +\n        (isT ? posMappingData.graphStyle.ELEMENT_WIDTH / 4 : 0) *\n            (rotate ? -1 : 1);\n    hObject.position.y = vObject.position.y;\n    group.add(hObject);\n\n    three.scene.add(group);\n}\n\nexport function createLoop(\n    indexX: number,\n    indexY: number,\n    posMappingData: PosMappingData,\n    three: Three,\n) {\n    const group = new THREE.Group();\n    const vSegment = document.createElement('div');\n    vSegment.className = 'edge';\n    vSegment.style.width = posMappingData.graphStyle.SEGMENT_THICKNESS + 'px';\n    vSegment.style.height = posMappingData.graphStyle.ELEMENT_HEIGHT + 'px';\n\n    const vObject = new CSS3DObject(vSegment);\n\n    vObject.position.x = nodeXIndexToPos(indexX, posMappingData);\n    vObject.position.y = nodeYIndexToPos(indexY, posMappingData);\n\n    group.add(vObject);\n\n    const h1Segment = document.createElement('div');\n    h1Segment.className = 'edge';\n    h1Segment.style.width = posMappingData.graphStyle.ELEMENT_WIDTH / 2 + 'px';\n    h1Segment.style.height = posMappingData.graphStyle.SEGMENT_THICKNESS + 'px';\n\n    const h1Object = new CSS3DObject(h1Segment);\n\n    h1Object.position.x =\n        vObject.position.x + posMappingData.graphStyle.ELEMENT_WIDTH / 4;\n    h1Object.position.y =\n        vObject.position.y + posMappingData.graphStyle.ELEMENT_HEIGHT / 4;\n\n    group.add(h1Object);\n\n    const h2Segment = document.createElement('div');\n    h2Segment.className = 'edge';\n    h2Segment.style.width = posMappingData.graphStyle.ELEMENT_WIDTH / 2 + 'px';\n    h2Segment.style.height = posMappingData.graphStyle.SEGMENT_THICKNESS + 'px';\n\n    const h2Object = new CSS3DObject(h2Segment);\n\n    h2Object.position.x =\n        vObject.position.x + posMappingData.graphStyle.ELEMENT_WIDTH / 4;\n    h2Object.position.y =\n        vObject.position.y - posMappingData.graphStyle.ELEMENT_HEIGHT / 4;\n\n    group.add(h2Object);\n\n    three.scene.add(group);\n}\n\nexport function createAccountNodes(\n    accountAdresses: string[],\n    posMappingData: PosMappingData,\n): SequenceDiagramNode[] {\n    return accountAdresses.map((accountAdresses, index) =>\n        createNode(\n            index * 2,\n            0,\n            posMappingData,\n            accountAdresses,\n            SeqNodeType.Account,\n            -1,\n        ),\n    );\n}\n\nfunction createNode(\n    indexX: number,\n    indexY: number,\n    posMappingData: PosMappingData,\n    content: ReplayTransaction | string,\n    seqNodeType: SeqNodeType,\n    txId: number,\n): SequenceDiagramNode {\n    const nodeDiv = document.createElement('div');\n\n    const css3DObject = new CSS3DObject(nodeDiv);\n    css3DObject.position.x = Math.random() * 4000 - 2000;\n    css3DObject.position.y = Math.random() * 4000 - 2000;\n    css3DObject.position.z = Math.random() * 4000 - 2000;\n\n    const object3D = new THREE.Object3D();\n    object3D.position.setX(nodeXIndexToPos(indexX, posMappingData));\n\n    object3D.position.setY(nodeYIndexToPos(indexY, posMappingData));\n\n    return {\n        css3DObject,\n        object3D,\n        seqNodeType,\n        portal: {\n            graphStyle:\n                seqNodeType === SeqNodeType.Account\n                    ? {\n                          ...posMappingData.graphStyle,\n                          ELEMENT_WIDTH:\n                              posMappingData.graphStyle.ELEMENT_WIDTH * 1.9,\n                      }\n                    : posMappingData.graphStyle,\n            node: {\n                id: 'seqNode' + indexX + '_' + indexY,\n                xPos: indexX,\n                yPos: indexY,\n                yRelative: indexY,\n                element: content,\n            },\n            onMouseLeave: () => {},\n            onMouseOver: () => {},\n            nodeDiv,\n        },\n        txId,\n    };\n}\n","import * as R from 'ramda';\n\nexport interface Action {\n    callType: string;\n    from: string;\n    gas: string;\n    input: string;\n    to: string;\n    value: string;\n}\n\nexport interface ReplayTransaction {\n    action: Action;\n    result: {\n        gasUsed: string;\n        output: string;\n    };\n    subtraces: number;\n    traceAddress: number[];\n    type: string;\n}\n\nexport function getAllAcccountAddresses(trace: ReplayTransaction[]): string[] {\n    return R.pipe(\n        R.map((replayTx: ReplayTransaction) => [\n            replayTx.action.from,\n            replayTx.action.to,\n        ]),\n        R.unnest,\n        R.uniq,\n    )(trace);\n}\n","import { PerspectiveCamera } from 'three';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';\nimport {\n    CSS3DObject,\n    CSS3DRenderer,\n} from 'three/examples/jsm/renderers/CSS3DRenderer';\nimport * as THREE from 'three';\nimport { DAG, ThreeGraphNode } from './NodePosition';\n// @ts-ignore\nimport { TWEEN } from 'three/examples/jsm/libs/tween.module.min.js';\nimport { showImportPaths } from './EdgeSegments';\nimport { DefaultGraphStyle, GraphStyle } from './GraphStyle';\nimport {\n    createNodes,\n    PortalParts,\n    RenderedSequenceNodes,\n    PosMappingData,\n    CSSObject3DPair,\n} from './../views/Node';\nimport React from 'react';\nimport { GraphViewState } from '../views/GraphContainer';\nimport { createSequenceBody } from './SequenceParts';\nimport { ReplayTransaction } from '../../lib/TransactionSequence';\n\nexport interface Three {\n    camera: PerspectiveCamera;\n    renderer: CSS3DRenderer;\n    scene: THREE.Scene;\n    controls: TrackballControls;\n}\n\nexport interface RenderedNodes<T> {\n    threeNodes: ThreeGraphNode<T>[];\n    portals: PortalParts<T>[];\n    graphStyle: GraphStyle;\n}\n\nfunction createThree(width: number, height: number): Three {\n    const camera = new THREE.PerspectiveCamera(50, width / height, 1, 10000);\n    camera.position.z = 4200;\n\n    const scene = new THREE.Scene();\n    scene.background = null;\n\n    const renderer = new CSS3DRenderer();\n\n    camera.aspect = width / height;\n    camera.updateProjectionMatrix();\n    renderer.setSize(width, height);\n\n    const controls = new TrackballControls(camera, renderer.domElement);\n    controls.minDistance = 10;\n    controls.maxDistance = 15000;\n\n    controls.mouseButtons.LEFT = THREE.MOUSE.PAN;\n    controls.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;\n    controls.noRotate = true;\n\n    return {\n        camera,\n        renderer,\n        scene,\n        controls,\n    };\n}\n\nexport function onWindowResize(\n    three: Three,\n    threeContainer: React.RefObject<HTMLDivElement>,\n    setThree: React.Dispatch<React.SetStateAction<Three | undefined>>,\n) {\n    if (threeContainer.current) {\n        const newWidth = threeContainer.current.clientWidth;\n        const newHeight = threeContainer.current.clientHeight;\n        three.renderer.setSize(newWidth, newHeight);\n        three.camera.aspect = newWidth / newHeight;\n        three.camera.updateProjectionMatrix();\n        three.controls.handleResize();\n        setThree({\n            ...three,\n        });\n    }\n}\n\nfunction render(three: Three) {\n    if (three) {\n        three.renderer.render(three.scene, three.camera);\n    }\n}\n\nexport function animate(three: Three) {\n    requestAnimationFrame(() => animate(three));\n\n    TWEEN.update();\n\n    three.controls.update();\n\n    render(three);\n}\n\nexport function transform(pairs: CSSObject3DPair[], duration: number) {\n    TWEEN.removeAll();\n\n    for (const pair of pairs) {\n        const object = pair.css3DObject;\n        const target = pair.object3D;\n\n        if (object && target) {\n            new TWEEN.Tween(object.position)\n                .to(\n                    {\n                        x: target.position.x,\n                        y: target.position.y,\n                        z: target.position.z,\n                    },\n                    Math.random() * duration + duration,\n                )\n                .easing(TWEEN.Easing.Exponential.InOut)\n                .start();\n\n            new TWEEN.Tween(object.rotation)\n                .to(\n                    {\n                        x: target.rotation.x,\n                        y: target.rotation.y,\n                        z: target.rotation.z,\n                    },\n                    Math.random() * duration + duration,\n                )\n                .easing(TWEEN.Easing.Exponential.InOut)\n                .start();\n        }\n    }\n\n    //@ts-ignore\n    new TWEEN.Tween(this)\n        .to({}, duration * 2)\n        .onUpdate(render)\n        .start();\n}\n\nexport function initSequenceDiagram(\n    setThree: React.Dispatch<React.SetStateAction<Three | undefined>>,\n    trace: ReplayTransaction[],\n    threeContainer: React.RefObject<HTMLDivElement>,\n    setGraphViewState: (state: GraphViewState) => void,\n): RenderedSequenceNodes {\n    const graphStyle = {\n        ...DefaultGraphStyle,\n        ELEMENT_WIDTH: 1000,\n        COL_DISTANCE: 0,\n    };\n    const height = (threeContainer.current as any).clientHeight;\n    const width = (threeContainer.current as any).clientWidth;\n\n    const three = createThree(width, height);\n    const posMappingData: PosMappingData = {\n        camera: three.camera,\n        graphStyle,\n        height,\n        width,\n    };\n\n    (threeContainer.current as any).appendChild(three.renderer.domElement);\n    three.controls.addEventListener('change', () => render(three));\n    three.controls.handleResize();\n\n    window.addEventListener(\n        'resize',\n        () => onWindowResize(three, threeContainer, setThree),\n\n        false,\n    );\n    const sequenceDiagramNodes = createSequenceBody(\n        trace,\n        posMappingData,\n        three,\n    );\n    setThree(three);\n    setGraphViewState(GraphViewState.Ready);\n\n    return {\n        graphStyle: graphStyle,\n        sequenceDiagramNodes,\n    };\n}\n\nexport function init<T>(\n    setThree: React.Dispatch<React.SetStateAction<Three | undefined>>,\n    dag: DAG<T>,\n    threeContainer: React.RefObject<HTMLDivElement>,\n    setGraphViewState: (state: GraphViewState) => void,\n): RenderedNodes<T> {\n    const graphStyle = DefaultGraphStyle;\n    const height = (threeContainer.current as any).clientHeight;\n    const width = (threeContainer.current as any).clientWidth;\n\n    const three = createThree(width, height);\n\n    (threeContainer.current as any).appendChild(three.renderer.domElement);\n    three.controls.addEventListener('change', () => render(three));\n    three.controls.handleResize();\n    const posMappingData: PosMappingData = {\n        camera: three.camera,\n        graphStyle,\n        height,\n        width,\n    };\n\n    const objects: CSS3DObject[] = [];\n\n    const nodes = createNodes(dag, posMappingData);\n\n    for (const node of nodes.threeNodes) {\n        if (node.objectCSS) {\n            three.scene.add(node.objectCSS);\n            objects.push(node.objectCSS);\n        }\n    }\n    const pairs: CSSObject3DPair[] = nodes.threeNodes\n        .filter((node) => (node.object && node.objectCSS ? true : false))\n        .map(\n            (node) =>\n                ({\n                    css3DObject: node.objectCSS,\n                    object3D: node.object,\n                } as CSSObject3DPair),\n        );\n    transform(pairs, graphStyle.ANIMATION_DURATION);\n\n    const maxX = Math.max(...nodes.threeNodes.map((node) => node.xPos));\n    const stepDuration = graphStyle.ANIMATION_DURATION / maxX;\n\n    showImportPaths(\n        dag.edges,\n        nodes.threeNodes,\n        (o: CSS3DObject, xPos: number) => {\n            setTimeout(() => three.scene.add(o), xPos * stepDuration + 1);\n        },\n    );\n\n    window.addEventListener(\n        'resize',\n        () => onWindowResize(three, threeContainer, setThree),\n\n        false,\n    );\n\n    autoFit(\n        three,\n        nodes.threeNodes\n            .filter((node) => node.object)\n            .map((node) => node.object) as THREE.Object3D<THREE.Event>[],\n        graphStyle,\n    );\n\n    setThree(three);\n    setGraphViewState(GraphViewState.Ready);\n\n    return nodes;\n}\n\nexport function autoFit(\n    three: Three,\n    objects3D: THREE.Object3D<THREE.Event>[],\n    graphStyle: GraphStyle,\n) {\n    const boundingBox = new THREE.Box2();\n\n    for (const object3D of objects3D) {\n        boundingBox.expandByPoint(\n            new THREE.Vector2(object3D.position.x, object3D.position.y),\n        );\n    }\n\n    const size = new THREE.Vector2();\n    boundingBox.getSize(size);\n\n    const center = new THREE.Vector2();\n    boundingBox.getCenter(center);\n\n    three.camera.position.x = center.x;\n    three.camera.position.y = center.y;\n    three.controls.target.copy(new THREE.Vector3(center.x, center.y, 0));\n\n    const fov = three.camera.fov * (Math.PI / 180);\n    const fovh = 2 * Math.atan(Math.tan(fov / 2) * three.camera.aspect);\n    const dx = Math.abs(\n        (size.x + graphStyle.ELEMENT_WIDTH) / 2 / Math.tan(fovh / 2),\n    );\n    const dy = Math.abs(\n        (size.y + graphStyle.EXPAND_HEIGHT) / 2 / Math.tan(fov / 2),\n    );\n\n    const coords = {\n        x: three.camera.position.x,\n        y: three.camera.position.y,\n        z: three.camera.position.z,\n    };\n    new TWEEN.Tween(coords)\n        .to(\n            {\n                x: three.camera.position.x,\n                y: three.camera.position.y,\n                z: Math.max(dx, dy) * 1.1,\n            },\n            500,\n        )\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .onUpdate(() => {\n            three.camera.position.set(coords.x, coords.y, coords.z);\n        })\n        .start();\n\n    three.camera.updateProjectionMatrix();\n\n    three.controls.update();\n}\n","import { GraphStyle } from './GraphStyle';\nimport { ThreeGraphNode } from './NodePosition';\nimport { RenderedNodes } from './ThreeEnv';\n\n// @ts-ignore\nimport { TWEEN } from 'three/examples/jsm/libs/tween.module.min.js';\nimport { PerspectiveCamera, Vector3 } from 'three';\nimport { TrackballControls } from 'three/examples/jsm/controls/TrackballControls';\n\nexport function restoreOriginal<T>(\n    renderedNodes: RenderedNodes<T> | undefined,\n) {\n    if (renderedNodes) {\n        renderedNodes.threeNodes.forEach((node) => {\n            if (node.objectCSS && node.initialPosition) {\n                node.objectCSS.position.x = node.initialPosition.x;\n                node.objectCSS.position.y = node.initialPosition.y;\n            }\n\n            node.segments.forEach((segment, index) => {\n                segment.position.x = node.segmentsInitialValues[index].x;\n                segment.position.y = node.segmentsInitialValues[index].y;\n                segment.element.style.height =\n                    node.segmentsInitialValues[index].height;\n            });\n        });\n    }\n}\n\nfunction transformSelectedNodes<T>(\n    node: ThreeGraphNode<T>,\n    style: GraphStyle,\n    selectedNode: ThreeGraphNode<T>,\n) {\n    if (node.yPos > selectedNode.yPos) {\n        if (node.initialPosition && node.objectCSS) {\n            node.objectCSS.position.y =\n                node.initialPosition.y - style.EXPAND_HEIGHT;\n        }\n\n        node.segments.forEach((segment, index) => {\n            segment.position.y =\n                node.segmentsInitialValues[index].y - style.EXPAND_HEIGHT;\n        });\n    }\n\n    if (node.yPos === selectedNode.yPos) {\n        node.segments[3].position.y =\n            node.segmentsInitialValues[3].y - style.EXPAND_HEIGHT / 2;\n\n        node.segments[3].element.style.height =\n            style.ELEMENT_HEIGHT / 2 +\n            style.COL_DISTANCE / 2 +\n            style.EXPAND_HEIGHT +\n            'px';\n        node.segments[4].position.y =\n            node.segmentsInitialValues[4].y - style.EXPAND_HEIGHT;\n    }\n}\n\nexport function centerNode<T>(\n    selectedNode: ThreeGraphNode<T>,\n    camera: PerspectiveCamera | undefined,\n    controls: TrackballControls | undefined,\n    onComplete: () => void,\n) {\n    if (camera && selectedNode.objectCSS && controls) {\n        const coords = {\n            x: camera.position.x,\n            y: camera.position.y,\n            z: camera.position.z,\n        };\n        new TWEEN.Tween(coords)\n            .to(\n                {\n                    x: selectedNode.objectCSS.position.x,\n                    y: selectedNode.objectCSS.position.y,\n                    z: 1,\n                },\n                500,\n            )\n            .easing(TWEEN.Easing.Quadratic.Out)\n            .onUpdate(() => {\n                camera.position.set(coords.x, coords.y, coords.z);\n                if (selectedNode.objectCSS) {\n                    controls.target = new Vector3(coords.x, coords.y, 0);\n                }\n            })\n            .start()\n            .onComplete(onComplete);\n    }\n}\n\nexport function expendNode<T>(\n    selectedNodeId: string | undefined,\n    renderedNodes: RenderedNodes<T> | undefined,\n) {\n    restoreOriginal(renderedNodes);\n    const selectedNode =\n        selectedNodeId &&\n        renderedNodes?.threeNodes.find((node) => node.id === selectedNodeId);\n\n    if (selectedNode && renderedNodes) {\n        const style = renderedNodes.graphStyle;\n\n        if (selectedNode.objectCSS && selectedNode.initialPosition) {\n            selectedNode.objectCSS.position.y =\n                selectedNode.initialPosition.y - style.EXPAND_HEIGHT / 2;\n        }\n        renderedNodes.threeNodes\n            .filter((node) => node.yPos >= selectedNode.yPos)\n            .forEach((node) => {\n                transformSelectedNodes(node, style, selectedNode);\n            });\n    }\n}\n","import './Graph.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { ParsedSolFile } from '../../lib/ParseSolidity';\nimport { GraphStyle } from './../utils/GraphStyle';\nimport Icon from '../../shared/Icon';\n\nimport { ContractDefinition } from '@solidity-parser/parser/dist/src/ast-types';\nimport { ThreeGraphNode } from './../utils/NodePosition';\nimport { Context } from '../../lib/Graph';\n\ninterface ContractViewProps {\n    node: ThreeGraphNode<Context<ParsedSolFile, ContractDefinition>>;\n    graphStyle: GraphStyle;\n    exitMaxNode: () => void;\n}\n\nexport function getIcon(kind: string): JSX.Element {\n    switch (kind) {\n        case 'interface':\n            return <Icon iconClass=\"fas fa-file-export\" />;\n        case 'library':\n            return <Icon iconClass=\"fas fa-book\" />;\n        case 'abstract':\n        case 'contract':\n        default:\n            return <Icon iconClass=\"fas fa-file-contract\" />;\n    }\n}\n\nfunction ContractView(props: ContractViewProps) {\n    return props.node.element ? (\n        <div\n            className={`file-view h-100 ${\n                props.node.element.element.kind === 'contract'\n                    ? 'contract-node'\n                    : 'contract-other'\n            }`}\n        >\n            <div className=\"row\">\n                <div className=\"col text-right\">\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-lg btn-primary menu-btn\"\n                        onClick={props.exitMaxNode}\n                    >\n                        <Icon iconClass=\"fas fa-times\" />\n                    </button>\n                </div>\n            </div>\n            <div className=\"container view-container\">\n                <div className=\"row \">\n                    <div className=\"col title text-center\">\n                        {props.node.element.element.name}\n                    </div>\n                </div>\n                <div className=\"row kind-info\">\n                    <div className=\"col-12\">\n                        <span className=\"badge bg-light text-dark\">\n                            &nbsp;{getIcon(props.node.element.element.kind)}\n                            &nbsp;&nbsp;{props.node.element.element.kind}&nbsp;\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ) : null;\n}\n\nexport default ContractView;\n","import './Graph.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { ParsedSolFile } from '../../lib/ParseSolidity';\nimport { GraphStyle } from './../utils/GraphStyle';\nimport { GraphNode } from './../utils/NodePosition';\nimport { ContractDefinition } from '@solidity-parser/parser/dist/src/ast-types';\nimport { Context } from '../../lib/Graph';\nimport { getIcon } from './ContractView';\nimport { getFileDisplayName } from '../../lib/FileHandling';\nimport { GraphViewState } from './GraphContainer';\n\ninterface FileNodeProps {\n    node: GraphNode<Context<ParsedSolFile, ContractDefinition>>;\n    graphStyle: GraphStyle;\n    onMouseLeave?: () => void;\n    onMouseOver?: () => void;\n    selectedNodeId?: string;\n    graphViewState: GraphViewState;\n    nodeToMax?: string;\n    setSelectedNode?: (nodeId: string | undefined) => void;\n    setNodeToMax?: (nodeId: string | undefined) => void;\n}\n\nfunction ContractNode(props: FileNodeProps) {\n    const isNodeSelected =\n        props.selectedNodeId === props.node.id ||\n        props.nodeToMax === props.node.id;\n\n    const nodeDivStyle: React.CSSProperties = {\n        width: props.graphStyle.ELEMENT_WIDTH.toString() + 'px',\n        height:\n            (isNodeSelected\n                ? props.graphStyle.ELEMENT_HEIGHT +\n                  props.graphStyle.EXPAND_HEIGHT\n                : props.graphStyle.ELEMENT_HEIGHT\n            ).toString() + 'px',\n        borderWidth: props.graphStyle.SEGMENT_THICKNESS + 'px',\n        borderColor: isNodeSelected\n            ? props.graphStyle.SEGMENT_HIGHLIGHTED_COLOR\n            : props.graphStyle.ELEMENT_BORDER_COLOR,\n        borderStyle: 'solid',\n    };\n\n    return props.node.element ? (\n        <div\n            className={`node ${\n                props.node.element.element.kind === 'contract'\n                    ? 'contract-node'\n                    : 'contract-other'\n            }`}\n            style={nodeDivStyle}\n            onMouseDown={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setNodeToMax &&\n                    props.onMouseLeave\n                ) {\n                    props.setNodeToMax(props.node.id);\n                    props.onMouseLeave();\n                }\n            }}\n            onMouseLeave={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setSelectedNode &&\n                    props.onMouseLeave\n                ) {\n                    props.setSelectedNode(undefined);\n                    props.onMouseLeave();\n                }\n            }}\n            onMouseOver={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setSelectedNode &&\n                    props.onMouseOver\n                ) {\n                    props.setSelectedNode(props.node.id);\n                    props.onMouseOver();\n                }\n            }}\n        >\n            <div className=\"row\">\n                <div className=\"col file-title text-left\">\n                    {getFileDisplayName(props.node.element.element.name)}\n                </div>\n            </div>\n            {isNodeSelected && (\n                <div className=\"row kind-info\">\n                    <div className=\"col-12\">\n                        <span className=\"badge bg-light text-dark\">\n                            &nbsp;{getIcon(props.node.element.element.kind)}\n                            &nbsp;&nbsp;{props.node.element.element.kind}&nbsp;\n                        </span>\n                    </div>\n                </div>\n            )}\n        </div>\n    ) : null;\n}\n\nexport default ContractNode;\n","import { Three } from './ThreeEnv';\n\nexport function zoomIn(three: Three | undefined) {\n    if (three && three.controls.minDistance < three.camera.position.z * 0.9) {\n        three.camera.position.z *= 0.9;\n        three.camera.updateProjectionMatrix();\n\n        three.controls.update();\n    }\n}\n\nexport function zoomOut(three: Three | undefined) {\n    if (three && three.controls.maxDistance > three.camera.position.z * 1.1) {\n        three.camera.position.z *= 1.1;\n        three.camera.updateProjectionMatrix();\n        three.controls.update();\n    }\n}\n","import './Graph.css';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { ParsedSolFile } from '../../lib/ParseSolidity';\nimport { DAG } from './../utils/NodePosition';\nimport Menu from '../../shared/Menu';\nimport {\n    animate,\n    autoFit,\n    init,\n    onWindowResize,\n    RenderedNodes,\n    Three,\n} from './../utils/ThreeEnv';\nimport ReactDOM from 'react-dom';\nimport { centerNode, expendNode } from './../utils/NodeSelection';\nimport { ContractDefinition } from '@solidity-parser/parser/dist/src/ast-types';\nimport ContractNode from './ContractNode';\nimport ContractView from './ContractView';\nimport { Context } from '../../lib/Graph';\nimport { zoomIn, zoomOut } from '../utils/Zoom';\nimport { GraphViewState } from './GraphContainer';\n\ninterface GraphProps {\n    view: string;\n    setView: (view: string) => void;\n    contractsDag: DAG<Context<ParsedSolFile, ContractDefinition>>;\n}\n\nfunction ContractGraph(props: GraphProps) {\n    const [three, setThree] = useState<Three | undefined>();\n    const [selectedNodeId, setSelectedNodeId] = useState<string | undefined>();\n    const [graphViewState, setGraphViewState] = useState<GraphViewState>(\n        GraphViewState.Wait,\n    );\n    const threeContainer = useRef<HTMLDivElement>(null);\n    const [renderedNodes, setRenderedNodes] =\n        useState<RenderedNodes<Context<ParsedSolFile, ContractDefinition>>>();\n\n    const exitMaxNode = () => {\n        setGraphViewState(GraphViewState.Ready);\n        setSelectedNodeId(undefined);\n        if (threeContainer && three && renderedNodes) {\n            autoFit(\n                three,\n                renderedNodes.threeNodes\n                    .filter((node) => node.object)\n                    .map(\n                        (node) => node.object,\n                    ) as THREE.Object3D<THREE.Event>[],\n                renderedNodes.graphStyle,\n            );\n        }\n    };\n\n    expendNode(selectedNodeId, renderedNodes);\n\n    useEffect(() => {\n        if (graphViewState === GraphViewState.Ready && three) {\n            onWindowResize(three, threeContainer, setThree);\n        }\n    }, [graphViewState]);\n\n    useEffect(() => {\n        if (three && renderedNodes) {\n            autoFit(\n                three,\n                renderedNodes.threeNodes\n                    .filter((node) => node.object)\n                    .map(\n                        (node) => node.object,\n                    ) as THREE.Object3D<THREE.Event>[],\n                renderedNodes.graphStyle,\n            );\n        }\n    }, [props.view, renderedNodes, three]);\n\n    useEffect(() => {\n        if (threeContainer && !three) {\n            setRenderedNodes(\n                init(\n                    setThree,\n                    props.contractsDag,\n                    threeContainer,\n                    setGraphViewState,\n                ),\n            );\n        }\n    }, [threeContainer, three, props, props.contractsDag]);\n\n    useEffect(() => {\n        if (three) {\n            animate(three);\n        }\n    }, [three]);\n\n    const maxNode = (nodeId: string | undefined) => {\n        const newNodeToMax = renderedNodes?.threeNodes.find(\n            (threeNode) => threeNode.id === nodeId,\n        );\n\n        if (newNodeToMax) {\n            setSelectedNodeId(newNodeToMax.id);\n            setGraphViewState(GraphViewState.Wait);\n            centerNode(newNodeToMax, three?.camera, three?.controls, () =>\n                setGraphViewState(GraphViewState.NodeMaxed),\n            );\n        }\n    };\n\n    const maxedNode =\n        renderedNodes &&\n        graphViewState === GraphViewState.NodeMaxed &&\n        renderedNodes.threeNodes.find((node) => node.id === selectedNodeId);\n\n    const portals = renderedNodes\n        ? renderedNodes.portals.map((portalPart) =>\n              ReactDOM.createPortal(\n                  <ContractNode\n                      graphStyle={portalPart.graphStyle}\n                      node={portalPart.node}\n                      onMouseLeave={portalPart.onMouseLeave}\n                      onMouseOver={portalPart.onMouseOver}\n                      setSelectedNode={setSelectedNodeId}\n                      selectedNodeId={selectedNodeId}\n                      setNodeToMax={maxNode}\n                      graphViewState={graphViewState}\n                      nodeToMax={selectedNodeId}\n                  />,\n                  portalPart.nodeDiv,\n              ),\n          )\n        : null;\n\n    const fit = () => {\n        if (three && renderedNodes) {\n            autoFit(\n                three,\n                renderedNodes.threeNodes\n                    .filter((node) => node.object)\n                    .map(\n                        (node) => node.object,\n                    ) as THREE.Object3D<THREE.Event>[],\n                renderedNodes.graphStyle,\n            );\n        }\n    };\n    return (\n        <>\n            {maxedNode && renderedNodes && (\n                <ContractView\n                    graphStyle={renderedNodes.graphStyle}\n                    node={maxedNode}\n                    exitMaxNode={exitMaxNode}\n                />\n            )}\n            <div\n                ref={threeContainer}\n                style={{ display: !maxedNode ? 'block' : 'none' }}\n                className=\"w-100 h-100 three-container\"\n            >\n                {portals}\n                <Menu\n                    zoomIn={() => zoomIn(three)}\n                    zoomOut={() => zoomOut(three)}\n                    autoZoom={fit}\n                    setView={props.setView}\n                    defaultView={props.view}\n                />\n            </div>\n        </>\n    );\n}\n\nexport default ContractGraph;\n","import './Graph.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { getPragmas, ParsedSolFile } from '../../lib/ParseSolidity';\nimport { getFileDisplayName } from '../../lib/FileHandling';\nimport { GraphStyle } from './../utils/GraphStyle';\nimport Icon from '../../shared/Icon';\nimport { GraphNode } from './../utils/NodePosition';\nimport { GraphViewState } from './GraphContainer';\n\ninterface FileNodeProps {\n    node: GraphNode<ParsedSolFile>;\n    graphStyle: GraphStyle;\n    onMouseLeave?: () => void;\n    onMouseOver?: () => void;\n    selectedNodeId?: string;\n    graphViewState: GraphViewState;\n    nodeToMax?: string;\n    setSelectedNode?: (nodeId: string | undefined) => void;\n    setNodeToMax?: (nodeId: string | undefined) => void;\n}\n\nfunction FileNode(props: FileNodeProps) {\n    let version: string | undefined;\n\n    if (props.node.element?.parsedContent) {\n        const solVersionPragma = getPragmas(\n            props.node.element.parsedContent.children,\n        ).find((pragma) => pragma.name === 'solidity');\n        version = solVersionPragma && solVersionPragma.value;\n    }\n\n    const isNodeSelected =\n        props.selectedNodeId === props.node.id ||\n        props.nodeToMax === props.node.id;\n\n    const nodeDivStyle: React.CSSProperties = {\n        width: props.graphStyle.ELEMENT_WIDTH.toString() + 'px',\n        height:\n            (isNodeSelected\n                ? props.graphStyle.ELEMENT_HEIGHT +\n                  props.graphStyle.EXPAND_HEIGHT\n                : props.graphStyle.ELEMENT_HEIGHT\n            ).toString() + 'px',\n        borderWidth: props.graphStyle.SEGMENT_THICKNESS + 'px',\n        borderColor: isNodeSelected\n            ? props.graphStyle.SEGMENT_HIGHLIGHTED_COLOR\n            : props.graphStyle.ELEMENT_BORDER_COLOR,\n        borderStyle: 'solid',\n    };\n\n    return props.node.element ? (\n        <div\n            className={`node ${\n                props.node.element?.type ? 'external-node' : 'local-node'\n            } file`}\n            style={nodeDivStyle}\n            onMouseDown={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setNodeToMax &&\n                    props.onMouseLeave\n                ) {\n                    props.setNodeToMax(props.node.id);\n                    props.onMouseLeave();\n                }\n            }}\n            onMouseLeave={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setSelectedNode &&\n                    props.onMouseLeave\n                ) {\n                    props.setSelectedNode(undefined);\n                    props.onMouseLeave();\n                }\n            }}\n            onMouseOver={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setSelectedNode &&\n                    props.onMouseOver\n                ) {\n                    props.setSelectedNode(props.node.id);\n                    props.onMouseOver();\n                }\n            }}\n        >\n            <div className=\"row\">\n                <div className=\"col file-title text-left\">\n                    {props.node.element?.error && (\n                        <>\n                            &nbsp;&nbsp;\n                            <Icon iconClass=\"fas fa-exclamation-circle error\" />\n                            &nbsp;&nbsp;\n                        </>\n                    )}\n                    {getFileDisplayName(props.node.element.path)}.sol\n                </div>\n            </div>\n            {version && isNodeSelected && (\n                <div className=\"row file-info\">\n                    <div className=\"col-1 text-center d-flex align-content-center flex-wrap\">\n                        <Icon iconClass=\"fas fa-tags\" />\n                    </div>\n                    <div className=\"col-10\">{version}</div>\n                </div>\n            )}\n            {isNodeSelected && (\n                <div className=\"row file-info\">\n                    <div className=\"col-1 text-center d-flex align-content-center flex-wrap\">\n                        <Icon iconClass=\"fas fa-folder-open\" />\n                    </div>\n                    <div className=\"col-10\">{props.node.element.path}</div>\n                </div>\n            )}\n        </div>\n    ) : null;\n}\n\nexport default FileNode;\n","import './ViewEntry.css';\n\ninterface ViewEntry {\n    title: string;\n    content: string;\n    top?: boolean;\n}\n\nfunction ViewEntry(props: ViewEntry) {\n    return (\n        <div className={`row entry${props.top ? ' entry-top' : ''}`}>\n            <div className=\"col-12 text-left entry-title\">{props.title}</div>\n            <div className=\"col-12 text-left entry-content\">\n                {props.content}\n            </div>\n        </div>\n    );\n}\n\nexport default ViewEntry;\n","import './Graph.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { getPragmas, ParsedSolFile } from '../../lib/ParseSolidity';\nimport { getFileDisplayName } from '../../lib/FileHandling';\nimport { GraphStyle } from './../utils/GraphStyle';\nimport Icon from '../../shared/Icon';\nimport { GraphNode } from './../utils/NodePosition';\nimport ViewEntry from './ViewEntry';\n\ninterface FileViewProps {\n    node: GraphNode<ParsedSolFile>;\n    graphStyle: GraphStyle;\n    exitMaxNode: () => void;\n}\n\nexport function getIcon(element: ParsedSolFile | undefined): JSX.Element {\n    if (element?.error) {\n        return <Icon iconClass=\"fas fa-exclamation-circle error\" />;\n    }\n\n    if (element) {\n        switch (element.type) {\n            case 'http':\n            case 'https':\n            case 'ipfs':\n            case 'swarm':\n                return <Icon iconClass=\"far fa-file-alt\" />;\n\n            case 'github':\n                return <Icon iconClass=\"fab fa-gitpub\" />;\n\n            default:\n                return <Icon iconClass=\"fas fa-file-alt\" />;\n        }\n    } else {\n        return <Icon iconClass=\"fas fa-file-alt\" />;\n    }\n}\n\nfunction FileView(props: FileViewProps) {\n    let version: string | undefined;\n\n    const icon = getIcon(props.node.element);\n\n    if (props.node.element?.parsedContent) {\n        const solVersionPragma = getPragmas(\n            props.node.element.parsedContent.children,\n        ).find((pragma) => pragma.name === 'solidity');\n        version = solVersionPragma && solVersionPragma.value;\n    }\n\n    return props.node.element ? (\n        <div\n            className={`file-view h-100 ${\n                props.node.element?.type ? 'external-node' : 'local-node'\n            } file`}\n        >\n            <div className=\"row\">\n                <div className=\"col text-right\">\n                    <button\n                        type=\"button\"\n                        className=\"btn btn-lg btn-primary menu-btn\"\n                        onClick={props.exitMaxNode}\n                    >\n                        <Icon iconClass=\"fas fa-times\" />\n                    </button>\n                </div>\n            </div>\n            <div className=\"container view-container\">\n                <div className=\"row \">\n                    <div className=\"col title text-center\">\n                        {getFileDisplayName(props.node.element.path)}.sol\n                    </div>\n                </div>\n                <div className=\"row kind-info\">\n                    <div className=\"col-12 text-center \">\n                        <span\n                            className={`badge bg-light text-dark${\n                                props.node.element.error ? ' error' : ''\n                            }`}\n                        >\n                            &nbsp;{icon}&nbsp;&nbsp;File&nbsp;\n                        </span>\n                    </div>\n                </div>\n                <div className=\"row \">\n                    <div className=\"col view-headline text-left\">\n                        <Icon iconClass=\"fas fa-info-circle\" /> General\n                        Information\n                    </div>\n                </div>\n                {version && (\n                    <ViewEntry\n                        title=\"Solidity Version\"\n                        content={version}\n                        top={true}\n                    />\n                )}\n\n                <ViewEntry\n                    title=\"URL\"\n                    content={props.node.element.path}\n                    top={version ? false : true}\n                />\n                {props.node.element.error && (\n                    <>\n                        <div className=\"row \">\n                            <div className=\"col view-headline text-left\">\n                                <Icon iconClass=\"fas fa-exclamation-circle\" />{' '}\n                                Error\n                            </div>\n                        </div>\n                        <ViewEntry\n                            title=\"Message\"\n                            content={props.node.element.error}\n                            top={true}\n                        />\n                    </>\n                )}\n            </div>\n        </div>\n    ) : null;\n}\n\nexport default FileView;\n","import './Graph.css';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { ParsedSolFile } from '../../lib/ParseSolidity';\nimport { DAG } from './../utils/NodePosition';\nimport Menu from '../../shared/Menu';\nimport {\n    animate,\n    autoFit,\n    init,\n    onWindowResize,\n    RenderedNodes,\n    Three,\n} from './../utils/ThreeEnv';\nimport ReactDOM from 'react-dom';\nimport FileNode from './FileNode';\nimport { centerNode, expendNode } from './../utils/NodeSelection';\nimport FileView from './FileView';\nimport { zoomIn, zoomOut } from '../utils/Zoom';\nimport { GraphViewState } from './GraphContainer';\n\ninterface GraphProps {\n    filesDAG: DAG<ParsedSolFile>;\n    setView: (view: string) => void;\n    view: string;\n}\n\nfunction FileGraph(props: GraphProps) {\n    const [three, setThree] = useState<Three | undefined>();\n    const [selectedNodeId, setSelectedNodeId] = useState<string | undefined>();\n    const [graphViewState, setGraphViewState] = useState<GraphViewState>(\n        GraphViewState.Wait,\n    );\n    const threeContainer = useRef<HTMLDivElement>(null);\n    const [renderedNodes, setRenderedNodes] =\n        useState<RenderedNodes<ParsedSolFile>>();\n\n    const exitMaxNode = () => {\n        setGraphViewState(GraphViewState.Ready);\n        setSelectedNodeId(undefined);\n        if (threeContainer && three && renderedNodes) {\n            autoFit(\n                three,\n                renderedNodes.threeNodes\n                    .filter((node) => node.object)\n                    .map(\n                        (node) => node.object,\n                    ) as THREE.Object3D<THREE.Event>[],\n                renderedNodes.graphStyle,\n            );\n        }\n    };\n\n    expendNode(selectedNodeId, renderedNodes);\n\n    useEffect(() => {\n        if (graphViewState === GraphViewState.Ready && three) {\n            onWindowResize(three, threeContainer, setThree);\n        }\n    }, [graphViewState]);\n\n    useEffect(() => {\n        if (three && renderedNodes) {\n            autoFit(\n                three,\n                renderedNodes.threeNodes\n                    .filter((node) => node.object)\n                    .map(\n                        (node) => node.object,\n                    ) as THREE.Object3D<THREE.Event>[],\n                renderedNodes.graphStyle,\n            );\n        }\n    }, [props.view, renderedNodes, three]);\n\n    useEffect(() => {\n        if (threeContainer && !three) {\n            setRenderedNodes(\n                init(\n                    setThree,\n                    props.filesDAG,\n                    threeContainer,\n                    setGraphViewState,\n                ),\n            );\n        }\n    }, [threeContainer, three, props, props.filesDAG]);\n\n    useEffect(() => {\n        if (three) {\n            animate(three);\n        }\n    }, [three]);\n\n    const maxNode = (nodeId: string | undefined) => {\n        const newNodeToMax = renderedNodes?.threeNodes.find(\n            (threeNode) => threeNode.id === nodeId,\n        );\n\n        if (newNodeToMax) {\n            setSelectedNodeId(newNodeToMax.id);\n            setGraphViewState(GraphViewState.Wait);\n            centerNode(newNodeToMax, three?.camera, three?.controls, () =>\n                setGraphViewState(GraphViewState.NodeMaxed),\n            );\n        }\n    };\n\n    const maxedNode =\n        renderedNodes &&\n        graphViewState === GraphViewState.NodeMaxed &&\n        renderedNodes.threeNodes.find((node) => node.id === selectedNodeId);\n\n    const portals = renderedNodes\n        ? renderedNodes.portals.map((portalPart) =>\n              ReactDOM.createPortal(\n                  <FileNode\n                      graphStyle={portalPart.graphStyle}\n                      node={portalPart.node}\n                      onMouseLeave={portalPart.onMouseLeave}\n                      onMouseOver={portalPart.onMouseOver}\n                      setSelectedNode={setSelectedNodeId}\n                      selectedNodeId={selectedNodeId}\n                      setNodeToMax={maxNode}\n                      graphViewState={graphViewState}\n                      nodeToMax={selectedNodeId}\n                  />,\n                  portalPart.nodeDiv,\n              ),\n          )\n        : null;\n\n    const fit = () => {\n        if (three && renderedNodes) {\n            autoFit(\n                three,\n                renderedNodes.threeNodes\n                    .filter((node) => node.object)\n                    .map(\n                        (node) => node.object,\n                    ) as THREE.Object3D<THREE.Event>[],\n                renderedNodes.graphStyle,\n            );\n        }\n    };\n\n    return (\n        <>\n            {maxedNode && renderedNodes && (\n                <FileView\n                    graphStyle={renderedNodes.graphStyle}\n                    node={maxedNode}\n                    exitMaxNode={exitMaxNode}\n                />\n            )}\n            <div\n                ref={threeContainer}\n                style={{ display: !maxedNode ? 'block' : 'none' }}\n                className=\"w-100 h-100 three-container\"\n            >\n                {portals}\n                <Menu\n                    zoomIn={() => zoomIn(three)}\n                    zoomOut={() => zoomOut(three)}\n                    autoZoom={fit}\n                    setView={props.setView}\n                    defaultView={props.view}\n                />\n            </div>\n        </>\n    );\n}\n\nexport default FileGraph;\n","import './Graph.css';\n\nimport React, { useEffect, useState } from 'react';\nimport { ParsedSolFile } from '../../lib/ParseSolidity';\nimport { DAG, getContractsDAG, getFilesDAG } from '../utils/NodePosition';\nimport { ContractDefinition } from '@solidity-parser/parser/dist/src/ast-types';\nimport ContractGraph from './ContractGraph';\nimport FileGraph from './FileGraph';\nimport { Context } from '../../lib/Graph';\n\ninterface GraphContainerProps {\n    files: ParsedSolFile[];\n    setView: (view: string) => void;\n    view: string;\n}\n\nexport enum GraphViewState {\n    Wait,\n    Ready,\n    NodeSelected,\n    NodeMaxed,\n}\n\nfunction GraphContainer(props: GraphContainerProps) {\n    const [filesDag, setFilesDag] = useState<DAG<ParsedSolFile> | undefined>();\n    const [contractsDag, setContractsDag] = useState<\n        DAG<Context<ParsedSolFile, ContractDefinition>> | undefined\n    >();\n\n    const createFilesDAG = async () => {\n        if (!filesDag) {\n            setFilesDag(await getFilesDAG(props.files));\n        }\n    };\n\n    const createContractsDAG = async () => {\n        if (!contractsDag && filesDag) {\n            setContractsDag(await getContractsDAG(filesDag));\n        }\n    };\n\n    useEffect(() => {\n        createFilesDAG();\n    }, [props.files]);\n\n    useEffect(() => {\n        if (filesDag && !contractsDag) {\n            createContractsDAG();\n        }\n    }, [filesDag, contractsDag]);\n\n    return (\n        <>\n            {props.view === 'contracts' && contractsDag && (\n                <ContractGraph\n                    contractsDag={contractsDag}\n                    setView={props.setView}\n                    view={props.view}\n                />\n            )}\n            {props.view === 'files' && filesDag && (\n                <FileGraph\n                    filesDAG={filesDag}\n                    setView={props.setView}\n                    view={props.view}\n                />\n            )}\n        </>\n    );\n}\n\nexport default GraphContainer;\n","import * as THREE from 'three';\n\nexport const CUBE_LENGTH = 200;\nexport const ACCOUNT_PLANE_LENGT = 220;\nexport const ACCOUNT_DISTNCE = 350;\nexport const ARROW_HEAD_SIZE = 20;\nexport const TX_PLANE_SIZE = 40;\nexport const TX_VALUE_SIZE = 10;\nexport const FRAME_THICKNESS = 5;\n\nexport type GeometriesRecords = Record<\n    | 'BlockPlane'\n    | 'Cube'\n    | 'TxPlane'\n    | 'TxValue'\n    | 'SelectedTxPlane'\n    | 'ArrowHead'\n    | 'Frame',\n    THREE.BufferGeometry\n>;\n\nexport const Geometries: GeometriesRecords = {\n    BlockPlane: new THREE.PlaneGeometry(100, 100),\n\n    Cube: new THREE.BoxGeometry(CUBE_LENGTH, CUBE_LENGTH, CUBE_LENGTH),\n\n    TxPlane: new THREE.PlaneGeometry(TX_PLANE_SIZE, TX_PLANE_SIZE),\n\n    TxValue: new THREE.BoxGeometry(TX_VALUE_SIZE, TX_VALUE_SIZE, 1),\n\n    SelectedTxPlane: new THREE.PlaneGeometry(ACCOUNT_PLANE_LENGT, 75),\n\n    ArrowHead: new THREE.CylinderGeometry(\n        ARROW_HEAD_SIZE,\n        ARROW_HEAD_SIZE,\n        5,\n        3,\n    ),\n\n    Frame: new THREE.BoxGeometry(\n        FRAME_THICKNESS,\n        FRAME_THICKNESS,\n        FRAME_THICKNESS,\n    ),\n};\n","import { PerspectiveCamera } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader';\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass';\nimport { FontLoader } from 'three/examples/jsm/loaders/FontLoader.js';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\nimport Stats from 'three/examples/jsm/libs/stats.module.js';\n// @ts-ignore\nimport { TWEEN } from 'three/examples/jsm/libs/tween.module.min.js';\n\nimport * as THREE from 'three';\nimport { Geometries, GeometriesRecords } from './Geometries';\n\nexport interface ThreeEnv {\n    camera: PerspectiveCamera;\n    renderer: THREE.WebGLRenderer;\n    scene: THREE.Scene;\n    controls: OrbitControls;\n    raycaster: THREE.Raycaster;\n    blockchainGroup: THREE.Group;\n    cloudGroups: THREE.Group[];\n    selectedBlock?: THREE.Object3D;\n    selectedTransaction?: THREE.Object3D;\n    fonts: any[];\n    composer: EffectComposer;\n    geometries: GeometriesRecords;\n    stats?: Stats;\n    blockObjects: {\n        block: THREE.Group;\n        link:\n            | THREE.Mesh<\n                  THREE.BufferGeometry,\n                  THREE.Material | THREE.Material[]\n              >\n            | undefined;\n        textGeometry: TextGeometry;\n    }[];\n}\n\ninterface ParticlesData {\n    velocity: THREE.Vector3;\n    numConnections: number;\n}\n\ninterface CloudSettings {\n    r: number;\n    rHalfY: number;\n    position: THREE.Vector3;\n    showDots: boolean;\n    showLines: boolean;\n    minDistance: number;\n    limitConnections: boolean;\n    maxConnections: number;\n    particleCount: number;\n    dotSize: number;\n    pointColor: string;\n    transparent: boolean;\n    sizeAttenuation: boolean;\n}\n\ninterface CloudData {\n    nodesParticlePositions: Float32Array;\n    colors: Float32Array;\n    positions: Float32Array;\n    particlesData: ParticlesData[];\n    pointCloud: THREE.Points;\n    r: number;\n    rHalf: number;\n    rHalfY: number;\n    linesMesh: THREE.LineSegments;\n    settings: CloudSettings;\n}\n\nexport function loadFont(path: string): Promise<any> {\n    const loader = new FontLoader();\n    return new Promise((resolve, reject) => {\n        loader.load(path, function (response) {\n            resolve(response);\n        });\n    });\n}\n\nasync function createThree(width: number, height: number): Promise<ThreeEnv> {\n    const camera = new THREE.PerspectiveCamera(45, width / height, 1, 1000000);\n    camera.position.z = 3000;\n    camera.position.x = -3000;\n    camera.position.y = 1500;\n\n    const scene = new THREE.Scene();\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.setSize(width, height);\n    renderer.outputEncoding = THREE.sRGBEncoding;\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.minDistance = 1000;\n    controls.maxDistance = 7000;\n\n    const ethNodesGroup = new THREE.Group();\n    const blockchainGroup = new THREE.Group();\n    scene.add(ethNodesGroup);\n    scene.add(blockchainGroup);\n\n    const renderScene = new RenderPass(scene, camera);\n\n    const effectFXAA = new ShaderPass(FXAAShader);\n    effectFXAA.uniforms.resolution.value.set(\n        1 / (width * window.devicePixelRatio),\n        1 / (height * window.devicePixelRatio),\n    );\n\n    const bloomPass = new UnrealBloomPass(\n        new THREE.Vector2(width, height),\n        1.5,\n        0.4,\n        0.85,\n    );\n    bloomPass.threshold = 0.1;\n    bloomPass.strength = 1.2;\n    bloomPass.radius = 0.55;\n    bloomPass.renderToScreen = true;\n\n    const composer = new EffectComposer(renderer);\n    composer.setSize(width, height);\n\n    composer.addPass(renderScene);\n\n    composer.addPass(bloomPass);\n    composer.addPass(effectFXAA);\n\n    //setInterval(() => console.log(renderer.info), 10000);\n\n    return {\n        camera,\n        renderer,\n        scene,\n        controls,\n        raycaster: new THREE.Raycaster(),\n        cloudGroups: [],\n        blockchainGroup,\n        fonts: [await loadFont('js/droid_sans_mono_regular.typeface.json')],\n        composer,\n        geometries: Geometries,\n        blockObjects: [],\n    };\n}\n\nexport function onWindowResize(\n    three: ThreeEnv,\n    threeContainer: React.RefObject<HTMLDivElement>,\n    setThree: React.Dispatch<React.SetStateAction<ThreeEnv | undefined>>,\n) {\n    if (threeContainer.current) {\n        const newWidth = threeContainer.current.clientWidth;\n        const newHeight = threeContainer.current.clientHeight;\n        three.renderer.setSize(newWidth, newHeight);\n        three.camera.aspect = newWidth / newHeight;\n        three.camera.updateProjectionMatrix();\n        three.composer.setSize(newWidth, newHeight);\n    }\n}\n\nfunction render(threeEnv: ThreeEnv) {\n    if (threeEnv) {\n        const time = Date.now() * 0.001;\n        threeEnv.cloudGroups.forEach(\n            (group) => (group.rotation.y = time * 0.01),\n        );\n        if (threeEnv.stats) {\n            threeEnv.stats.update();\n        }\n        threeEnv.renderer.autoClear = false;\n        threeEnv.renderer.clear();\n\n        threeEnv.camera.layers.set(1);\n        threeEnv.composer.render();\n\n        threeEnv.renderer.clearDepth();\n        threeEnv.camera.layers.set(0);\n        threeEnv.renderer.render(threeEnv.scene, threeEnv.camera);\n    }\n}\n\nfunction animateCloud(nodeData: CloudData) {\n    let vertexpos = 0;\n    let colorpos = 0;\n    let numConnected = 0;\n\n    for (let i = 0; i < nodeData.settings.particleCount; i++)\n        nodeData.particlesData[i].numConnections = 0;\n\n    for (let i = 0; i < nodeData.settings.particleCount; i++) {\n        // get the particle\n        const particleData = nodeData.particlesData[i];\n\n        nodeData.nodesParticlePositions[i * 3] += particleData.velocity.x * 0.5;\n        nodeData.nodesParticlePositions[i * 3 + 1] +=\n            particleData.velocity.y * 0.5;\n        nodeData.nodesParticlePositions[i * 3 + 2] +=\n            particleData.velocity.z * 0.5;\n\n        if (\n            nodeData.nodesParticlePositions[i * 3 + 1] < -nodeData.rHalfY ||\n            nodeData.nodesParticlePositions[i * 3 + 1] > nodeData.rHalfY\n        )\n            particleData.velocity.y = -particleData.velocity.y;\n\n        if (\n            nodeData.nodesParticlePositions[i * 3] < -nodeData.rHalf ||\n            nodeData.nodesParticlePositions[i * 3] > nodeData.rHalf\n        )\n            particleData.velocity.x = -particleData.velocity.x;\n\n        if (\n            nodeData.nodesParticlePositions[i * 3 + 2] < -nodeData.rHalf ||\n            nodeData.nodesParticlePositions[i * 3 + 2] > nodeData.rHalf\n        )\n            particleData.velocity.z = -particleData.velocity.z;\n\n        if (\n            nodeData.settings.limitConnections &&\n            particleData.numConnections >= nodeData.settings.maxConnections\n        )\n            continue;\n\n        // Check collision\n        for (let j = i + 1; j < nodeData.settings.particleCount; j++) {\n            const particleDataB = nodeData.particlesData[j];\n            if (\n                nodeData.settings.limitConnections &&\n                particleDataB.numConnections >= nodeData.settings.maxConnections\n            )\n                continue;\n\n            const dx =\n                nodeData.nodesParticlePositions[i * 3] -\n                nodeData.nodesParticlePositions[j * 3];\n            const dy =\n                nodeData.nodesParticlePositions[i * 3 + 1] -\n                nodeData.nodesParticlePositions[j * 3 + 1];\n            const dz =\n                nodeData.nodesParticlePositions[i * 3 + 2] -\n                nodeData.nodesParticlePositions[j * 3 + 2];\n            const dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n            if (dist < nodeData.settings.minDistance) {\n                particleData.numConnections++;\n                particleDataB.numConnections++;\n\n                const alpha = 1.0 - dist / nodeData.settings.minDistance;\n\n                nodeData.positions[vertexpos++] =\n                    nodeData.nodesParticlePositions[i * 3];\n                nodeData.positions[vertexpos++] =\n                    nodeData.nodesParticlePositions[i * 3 + 1];\n                nodeData.positions[vertexpos++] =\n                    nodeData.nodesParticlePositions[i * 3 + 2];\n                nodeData.positions[vertexpos++] =\n                    nodeData.nodesParticlePositions[j * 3];\n                nodeData.positions[vertexpos++] =\n                    nodeData.nodesParticlePositions[j * 3 + 1];\n                nodeData.positions[vertexpos++] =\n                    nodeData.nodesParticlePositions[j * 3 + 2];\n\n                nodeData.colors[colorpos++] = alpha;\n                nodeData.colors[colorpos++] = alpha;\n                nodeData.colors[colorpos++] = alpha;\n\n                nodeData.colors[colorpos++] = alpha;\n                nodeData.colors[colorpos++] = alpha;\n                nodeData.colors[colorpos++] = alpha;\n\n                numConnected++;\n            }\n        }\n    }\n\n    nodeData.linesMesh.geometry.setDrawRange(0, numConnected * 2);\n    nodeData.linesMesh.geometry.attributes.position.needsUpdate = true;\n    nodeData.linesMesh.geometry.attributes.color.needsUpdate = true;\n\n    nodeData.pointCloud.geometry.attributes.position.needsUpdate = true;\n}\n\nexport function animate(\n    threeEnv: ThreeEnv,\n    nodeData: CloudData,\n    txData: CloudData,\n) {\n    if (nodeData) {\n        animateCloud(nodeData);\n    }\n\n    if (txData) {\n        animateCloud(txData);\n    }\n\n    TWEEN.update();\n\n    requestAnimationFrame(() => animate(threeEnv, nodeData, txData));\n\n    render(threeEnv);\n}\n\nfunction createCloud(\n    group: THREE.Group,\n    cloudSettings: CloudSettings,\n): CloudData {\n    const r = cloudSettings.r;\n    const rHalf = r / 2;\n    const rHalfY = r / cloudSettings.rHalfY;\n\n    const particlesData: ParticlesData[] = [];\n    const maxNodeParticleCount = 500;\n\n    const segments = maxNodeParticleCount * maxNodeParticleCount;\n    const positions = new Float32Array(segments * 3);\n    const colors = new Float32Array(segments * 3);\n\n    const particleMaterial = new THREE.PointsMaterial({\n        color: cloudSettings.pointColor,\n        size: cloudSettings.dotSize,\n        //blending: THREE.AdditiveBlending,\n        transparent: cloudSettings.transparent,\n        sizeAttenuation: cloudSettings.sizeAttenuation,\n    });\n\n    const nodesParticlePositions = new Float32Array(maxNodeParticleCount * 3);\n\n    for (let i = 0; i < maxNodeParticleCount; i++) {\n        const x = Math.random() * r - r / 2;\n        const y = Math.random() * rHalfY * 2 - rHalfY;\n        const z = Math.random() * r - r / 2;\n\n        nodesParticlePositions[i * 3] = x;\n        nodesParticlePositions[i * 3 + 1] = y;\n        nodesParticlePositions[i * 3 + 2] = z;\n\n        // add it to the geometry\n        particlesData.push({\n            velocity: new THREE.Vector3(\n                -1 + Math.random() * 2,\n                -1 + Math.random() * 2,\n                -1 + Math.random() * 2,\n            ),\n            numConnections: 0,\n        });\n    }\n    const nodeParticles = new THREE.BufferGeometry();\n    nodeParticles.setDrawRange(0, cloudSettings.particleCount);\n    nodeParticles.setAttribute(\n        'position',\n        new THREE.BufferAttribute(nodesParticlePositions, 3).setUsage(\n            THREE.DynamicDrawUsage,\n        ),\n    );\n\n    // create the particle system\n    const pointCloud = new THREE.Points(nodeParticles, particleMaterial);\n    group.position.set(\n        cloudSettings.position.x,\n        cloudSettings.position.y,\n        cloudSettings.position.z,\n    );\n    pointCloud.layers.enable(1);\n    group.add(pointCloud);\n\n    const geometry = new THREE.BufferGeometry();\n\n    geometry.setAttribute(\n        'position',\n        new THREE.BufferAttribute(positions, 3).setUsage(\n            THREE.DynamicDrawUsage,\n        ),\n    );\n    geometry.setAttribute(\n        'color',\n        new THREE.BufferAttribute(colors, 3).setUsage(THREE.DynamicDrawUsage),\n    );\n\n    geometry.computeBoundingSphere();\n\n    geometry.setDrawRange(0, 0);\n\n    const material = new THREE.LineBasicMaterial({\n        vertexColors: true,\n        blending: THREE.AdditiveBlending,\n        transparent: true,\n    });\n\n    const linesMesh = new THREE.LineSegments(geometry, material);\n    linesMesh.visible = cloudSettings.showLines;\n    group.add(linesMesh);\n\n    return {\n        r,\n        rHalf,\n        rHalfY,\n        colors,\n        linesMesh,\n        nodesParticlePositions,\n        particlesData,\n        pointCloud,\n        positions,\n        settings: cloudSettings,\n    };\n}\n\nexport async function init(\n    setThreeEnv: React.Dispatch<React.SetStateAction<ThreeEnv | undefined>>,\n    threeContainer: React.RefObject<HTMLDivElement>,\n    showStats: boolean,\n) {\n    const height = (threeContainer.current as any).clientHeight;\n    const width = (threeContainer.current as any).clientWidth;\n    const threeEnv = await createThree(height, width);\n    (threeContainer.current as any).appendChild(threeEnv.renderer.domElement);\n    if (showStats) {\n        const stats: any = Stats() as any;\n        (threeContainer.current as any).appendChild(stats.dom);\n        threeEnv.stats = stats;\n    }\n\n    window.addEventListener(\n        'resize',\n        () => onWindowResize(threeEnv, threeContainer, setThreeEnv),\n\n        false,\n    );\n\n    const nodeCloud = new THREE.Group();\n    const txCloud = new THREE.Group();\n    threeEnv.scene.add(nodeCloud);\n    threeEnv.scene.add(txCloud);\n    animate(\n        threeEnv,\n        createCloud(nodeCloud, {\n            r: 1000,\n            rHalfY: 2,\n            position: new THREE.Vector3(0, 0, 0),\n            showDots: true,\n            showLines: true,\n            minDistance: 150,\n            limitConnections: false,\n            maxConnections: 20,\n            particleCount: 300,\n            dotSize: 3,\n            pointColor: '#ffffff',\n            transparent: false,\n            sizeAttenuation: false,\n        }),\n        createCloud(txCloud, {\n            r: 1000,\n            rHalfY: 2,\n            position: new THREE.Vector3(0, 0, 0),\n            showDots: true,\n            showLines: false,\n            minDistance: 150,\n            limitConnections: false,\n            maxConnections: 0,\n            particleCount: 500,\n            dotSize: 2,\n            pointColor: '#007f1b',\n            transparent: false,\n            sizeAttenuation: false,\n        }),\n    );\n    setThreeEnv(threeEnv);\n}\n","import * as THREE from 'three';\n\nexport const TxPlaneMaterial = new THREE.MeshBasicMaterial({\n    color: 0x002009,\n    side: THREE.DoubleSide,\n});\n\nexport const TxDataPlaneMaterial = new THREE.MeshBasicMaterial({\n    color: 0x006009,\n    side: THREE.DoubleSide,\n});\n\nexport const TxValueMaterial = new THREE.MeshBasicMaterial({\n    color: 0x009f1b,\n\n    side: THREE.DoubleSide,\n});\n\nexport const FrameMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n\nexport const CubeMaterial = new THREE.MeshBasicMaterial({\n    color: 0x000f28,\n    opacity: 1,\n    transparent: false,\n});\n\nexport const SelectedCubeMaterial = new THREE.MeshBasicMaterial({\n    color: 0x007f1b,\n    transparent: true,\n    opacity: 0.5,\n});\n\nexport const LinkMaterial = new THREE.MeshBasicMaterial({\n    color: 0x848484,\n    opacity: 1,\n    transparent: false,\n});\n\nexport const TextMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff });\n\nexport const BlockPlaneMaterial = new THREE.MeshBasicMaterial({\n    color: 0x000f28,\n    side: THREE.DoubleSide,\n});\n\nexport const SelectedTransactionMaterial = new THREE.MeshBasicMaterial({\n    color: 0x3d1111,\n    side: THREE.DoubleSide,\n});\n","import * as THREE from 'three';\n// @ts-ignore\nimport { TWEEN } from 'three/examples/jsm/libs/tween.module.min.js';\n\nexport function scaleTo(\n    scale: THREE.Vector3,\n    objectToScale: THREE.Group | THREE.Mesh,\n    time?: number,\n) {\n    new TWEEN.Tween(objectToScale.scale)\n        .to(scale, time ? time : 2000)\n\n        .start();\n}\n\nexport function createFrame(\n    position: THREE.Vector3,\n    width: number,\n    height: number,\n    material: THREE.Material,\n): THREE.Group {\n    const frameGroup = new THREE.Group();\n    const frameThickness = 5;\n\n    const frame1 = new THREE.Mesh(\n        new THREE.BoxGeometry(width, frameThickness, frameThickness),\n        material,\n    );\n    frame1.position.set(0, height / 2, 0);\n    frame1.layers.enable(1);\n\n    frameGroup.add(frame1);\n\n    const frame2 = new THREE.Mesh(\n        new THREE.BoxGeometry(width, frameThickness, frameThickness),\n        material,\n    );\n    frame2.position.set(0, -height / 2, 0);\n    frame2.layers.enable(1);\n    frameGroup.add(frame2);\n\n    const frame3 = new THREE.Mesh(\n        new THREE.BoxGeometry(\n            frameThickness,\n            height + frameThickness,\n            frameThickness,\n        ),\n        material,\n    );\n    frame3.position.set(height / 2, 0, 0);\n    frame3.layers.enable(1);\n    frameGroup.add(frame3);\n\n    const frame4 = new THREE.Mesh(\n        new THREE.BoxGeometry(\n            frameThickness,\n            height + frameThickness,\n            frameThickness,\n        ),\n        material,\n    );\n    frame4.position.set(-height / 2, 0, 0);\n    frame4.layers.enable(1);\n    frameGroup.add(frame4);\n\n    frameGroup.position.set(position.x, position.y, position.z);\n\n    return frameGroup;\n}\n","import { ethers } from 'ethers';\nimport * as THREE from 'three';\nimport { Vector3 } from 'three';\nimport { ThreeEnv } from './ThreeEnv';\n// @ts-ignore\nimport { TWEEN } from 'three/examples/jsm/libs/tween.module.min.js';\nimport { FrameMaterial, TextMaterial } from './Materials';\nimport { CUBE_LENGTH, FRAME_THICKNESS } from './Geometries';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\n\nimport { scaleTo } from './Shared';\n\nconst CHAIN_START_X_SHIFT = -800;\nconst INITIAL_BLOCK_PART_SCALE = 0.1;\nconst TIME_DISTANCE_OFFSET = 100;\nconst SEC_DISTANCE = 10;\nexport const MAX_GAS_USED = 31000000;\nexport const MIN_GAS_USED = 0;\nexport const BLOCKS_TO_SHOW = 50;\n\nfunction timeDiffToDistance(timeDiff: number): number {\n    return timeDiff * SEC_DISTANCE + TIME_DISTANCE_OFFSET;\n}\n\nfunction vanishTransparency(material: THREE.MeshBasicMaterial) {\n    new TWEEN.Tween(material)\n        .to({ opacity: 1 }, 5000)\n        .start()\n        .onComplete(() => {\n            material.transparent = false;\n        });\n}\n\nfunction moveOldChainPart(\n    threeEnv: ThreeEnv,\n    startX: number,\n    blockGroupTimeDiff: number,\n    onComplete: () => void,\n) {\n    new TWEEN.Tween(threeEnv.blockchainGroup.position)\n        .to(\n            {\n                x:\n                    threeEnv.blockchainGroup.position.x +\n                    startX -\n                    CHAIN_START_X_SHIFT -\n                    timeDiffToDistance(blockGroupTimeDiff),\n                y: 0,\n                z: 0,\n            },\n            1000,\n        )\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .start()\n        .onComplete(onComplete);\n}\n\nfunction moveNewChainPart(blockGroup: THREE.Group, onComplete: () => void) {\n    new TWEEN.Tween(blockGroup.position)\n        .to(\n            {\n                x: 0,\n                y: 0,\n                z: 0,\n            },\n            1000,\n        )\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .start()\n        .onComplete(onComplete);\n}\n\nfunction removeBlocks(threeEnv: ThreeEnv, lastBlockNumber: number) {\n    Object.keys(threeEnv.blockObjects)\n        .filter((key) => parseInt(key) <= lastBlockNumber - BLOCKS_TO_SHOW)\n        .forEach((key) => {\n            threeEnv.blockObjects[parseInt(key)].block.removeFromParent();\n            threeEnv.blockObjects[parseInt(key)].link?.removeFromParent();\n            threeEnv.blockObjects[parseInt(key)].textGeometry.dispose();\n            delete threeEnv.blockObjects[parseInt(key)];\n        });\n}\nexport function createBlocks(\n    threeEnv: ThreeEnv,\n    blockBatchs: ethers.providers.Block[][],\n) {\n    const blocks = blockBatchs[blockBatchs.length - 1];\n\n    removeBlocks(threeEnv, blocks[0].number);\n\n    let startX = CHAIN_START_X_SHIFT;\n    let blockTime = blocks[0].timestamp;\n\n    let blockGroupTimeDiff =\n        blockBatchs.length > 1\n            ? blockBatchs[blockBatchs.length - 1][\n                  blockBatchs[blockBatchs.length - 1].length - 1\n              ].timestamp - blockBatchs[blockBatchs.length - 2][0].timestamp\n            : 0;\n\n    const blockGroup = new THREE.Group();\n\n    const cubeMaterial = new THREE.MeshBasicMaterial({\n        color: 0x000f28,\n        opacity: blockBatchs.length > 1 ? 0.1 : 1,\n        transparent: blockBatchs.length > 1 ? true : false,\n    });\n    const linkMaterial = new THREE.MeshBasicMaterial({\n        color: 0x848484,\n        opacity: blockBatchs.length > 1 ? 0.1 : 1,\n        transparent: blockBatchs.length > 1 ? true : false,\n    });\n\n    for (let i = 0; i < blocks.length; i++) {\n        const currentBlock = blocks[i];\n        const gasUsedRelation =\n            (blocks[i].gasUsed.toNumber() - MIN_GAS_USED) /\n            (MAX_GAS_USED - MIN_GAS_USED);\n        const timeDiff = blockTime - currentBlock.timestamp;\n        startX = createBlock(\n            threeEnv,\n            startX,\n            currentBlock,\n            200 * gasUsedRelation,\n            timeDiff,\n            blockGroup,\n            i !== 0,\n            cubeMaterial,\n            linkMaterial,\n            threeEnv.fonts[0],\n        );\n        blockTime = currentBlock.timestamp;\n    }\n\n    if (blockBatchs.length > 1) {\n        blockGroup.position.setX(\n            (-(\n                startX +\n                CHAIN_START_X_SHIFT -\n                timeDiffToDistance(blockGroupTimeDiff)\n            ) /\n                2) *\n                INITIAL_BLOCK_PART_SCALE,\n        );\n        blockGroup.scale.set(\n            INITIAL_BLOCK_PART_SCALE,\n            INITIAL_BLOCK_PART_SCALE,\n            INITIAL_BLOCK_PART_SCALE,\n        );\n    }\n\n    if (blockGroupTimeDiff > 0) {\n        blockGroup.add(\n            createLink(\n                timeDiffToDistance(blockGroupTimeDiff) + TIME_DISTANCE_OFFSET,\n                startX,\n                linkMaterial,\n                threeEnv,\n            ),\n        );\n    }\n\n    threeEnv.scene.add(blockGroup);\n\n    moveOldChainPart(threeEnv, startX, blockGroupTimeDiff, () => {\n        if (blockBatchs.length > 1) {\n            vanishTransparency(cubeMaterial);\n        }\n\n        moveNewChainPart(blockGroup, () => {\n            if (blockBatchs.length > 1) {\n                vanishTransparency(linkMaterial);\n            }\n            const newBG = new THREE.Group();\n            threeEnv.scene.remove(threeEnv.blockchainGroup);\n            threeEnv.scene.remove(blockGroup);\n            newBG.add(threeEnv.blockchainGroup);\n\n            newBG.add(blockGroup);\n\n            threeEnv.scene.add(newBG);\n            threeEnv.blockchainGroup = newBG;\n        });\n        if (blockBatchs.length > 1) {\n            scaleTo(new THREE.Vector3(1, 1, 1), blockGroup);\n        }\n    });\n}\n\nfunction createBlock(\n    threeEnv: ThreeEnv,\n    startX: number,\n    block: ethers.providers.Block,\n    flexSize: number,\n    timeDiff: number,\n    blockChainGroup: THREE.Group,\n    showLink: boolean,\n    cubeMaterial: THREE.MeshBasicMaterial,\n    linkMaterial: THREE.MeshBasicMaterial,\n    font: any,\n): number {\n    const fontSize = 20;\n    const scale = (300 + flexSize) / CUBE_LENGTH;\n\n    const cube = new THREE.Mesh(threeEnv.geometries.Cube, cubeMaterial);\n    cube.userData.block = block;\n\n    const blockGroup = new THREE.Group();\n    const box = new THREE.Box3();\n    box.setFromCenterAndSize(\n        cube.position,\n        new THREE.Vector3(CUBE_LENGTH, CUBE_LENGTH, CUBE_LENGTH),\n    );\n\n    const textGeometry = new TextGeometry(`#${block.number}`, {\n        font,\n        height: 2,\n        size: fontSize,\n    });\n\n    const textMesh1 = new THREE.Mesh(textGeometry, TextMaterial);\n    textMesh1.geometry.computeBoundingBox();\n    const textMeshSize = new THREE.Vector3();\n    textMesh1.geometry.boundingBox?.getSize(textMeshSize);\n    textMesh1.position.set(\n        0 - textMeshSize.length() / 2,\n        -(fontSize / 2),\n        CUBE_LENGTH / 2,\n    );\n    blockGroup.add(textMesh1);\n\n    blockGroup.add(cube);\n\n    createFramgeSegments(CUBE_LENGTH, cube.position, blockGroup, threeEnv);\n\n    blockGroup.position.set(\n        startX - (CUBE_LENGTH / 2) * scale - timeDiffToDistance(timeDiff),\n        0,\n        0,\n    );\n    blockGroup.scale.set(scale, scale, scale);\n    blockChainGroup.add(blockGroup);\n\n    cube.geometry.computeBoundingBox();\n\n    const wp = new Vector3();\n    cube.getWorldPosition(wp);\n\n    const size = new Vector3();\n    const boundingBox = new THREE.Box3().setFromObject(blockGroup);\n    boundingBox.getSize(size);\n\n    const nextStartX = wp.x - size.x / 2;\n\n    let link;\n\n    if (showLink) {\n        (link = createLink(\n            startX - nextStartX - size.x,\n            startX,\n            linkMaterial,\n            threeEnv,\n        )),\n            blockChainGroup.add(link);\n    }\n\n    threeEnv.blockObjects[block.number] = {\n        block: blockGroup,\n        link,\n        textGeometry,\n    };\n\n    return nextStartX;\n}\n\nfunction createLink(\n    length: number,\n    startX: number,\n    linkMaterial: THREE.MeshBasicMaterial,\n    threeEnv: ThreeEnv,\n): THREE.Mesh {\n    const link = new THREE.Mesh(threeEnv.geometries.Frame, linkMaterial);\n    link.scale.setX(length / FRAME_THICKNESS),\n        link.position.set(startX - length / 2, 0, 0);\n    return link;\n}\n\nexport function createFramgeSegments(\n    length: number,\n    cubePosition: THREE.Vector3,\n    group: THREE.Group,\n    threeEnv: ThreeEnv,\n) {\n    const frame1 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame1.scale.setX((length + FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame1.position.set(\n        cubePosition.x,\n        cubePosition.y - length / 2,\n        cubePosition.z - length / 2,\n    );\n    frame1.layers.enable(1);\n    group.add(frame1);\n\n    const frame2 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame2.scale.setX((length + FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame2.position.set(\n        cubePosition.x,\n        cubePosition.y - length / 2,\n        cubePosition.z + length / 2,\n    );\n    frame2.layers.enable(1);\n    group.add(frame2);\n\n    const frame3 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame3.scale.setX((length + FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame3.position.set(\n        cubePosition.x,\n        cubePosition.y + length / 2,\n        cubePosition.z + length / 2,\n    );\n    frame3.layers.enable(1);\n    group.add(frame3);\n\n    const frame4 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame4.scale.setX((length + FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame4.position.set(\n        cubePosition.x,\n        cubePosition.y + length / 2,\n        cubePosition.z - length / 2,\n    );\n    frame4.layers.enable(1);\n    group.add(frame4);\n\n    const frame5 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame5.scale.setZ((length - FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame5.position.set(\n        cubePosition.x + length / 2,\n        cubePosition.y + length / 2,\n        cubePosition.z,\n    );\n    frame5.layers.enable(1);\n    group.add(frame5);\n\n    const frame6 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame6.scale.setZ((length - FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame6.position.set(\n        cubePosition.x - length / 2,\n        cubePosition.y + length / 2,\n        cubePosition.z,\n    );\n    frame6.layers.enable(1);\n    group.add(frame6);\n\n    const frame7 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame7.scale.setZ((length - FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame7.position.set(\n        cubePosition.x - length / 2,\n        cubePosition.y - length / 2,\n        cubePosition.z,\n    );\n    frame7.layers.enable(1);\n    group.add(frame7);\n\n    const frame8 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame8.scale.setZ((length - FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame8.position.set(\n        cubePosition.x + length / 2,\n        cubePosition.y - length / 2,\n        cubePosition.z,\n    );\n    frame8.layers.enable(1);\n    group.add(frame8);\n\n    const frame9 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame9.scale.setY((length - FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame9.position.set(\n        cubePosition.x + length / 2,\n        cubePosition.y,\n        cubePosition.z - length / 2,\n    );\n    frame9.layers.enable(1);\n    group.add(frame9);\n\n    const frame10 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame10.scale.setY((length - FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame10.position.set(\n        cubePosition.x - length / 2,\n        cubePosition.y,\n        cubePosition.z + length / 2,\n    );\n    frame10.layers.enable(1);\n    group.add(frame10);\n\n    const frame11 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame11.scale.setY((length - FRAME_THICKNESS) / FRAME_THICKNESS);\n    frame11.position.set(\n        cubePosition.x - length / 2,\n        cubePosition.y,\n        cubePosition.z - length / 2,\n    );\n    frame11.layers.enable(1);\n    group.add(frame11);\n\n    const frame12 = new THREE.Mesh(threeEnv.geometries.Frame, FrameMaterial);\n    frame12.scale.setY((length - FRAME_THICKNESS) / FRAME_THICKNESS);\n\n    frame12.position.set(\n        cubePosition.x + length / 2,\n        cubePosition.y,\n        cubePosition.z + length / 2,\n    );\n    frame12.layers.enable(1);\n    group.add(frame12);\n}\n","import { ethers } from 'ethers';\nimport * as THREE from 'three';\nimport { Vector3 } from 'three';\n// @ts-ignore\nimport { TWEEN } from 'three/examples/jsm/libs/tween.module.min.js';\nimport {\n    TxDataPlaneMaterial,\n    TxPlaneMaterial,\n    TxValueMaterial,\n} from './Materials';\nimport { ThreeEnv } from './ThreeEnv';\n\nexport async function moveMesh(\n    mesh: THREE.Mesh,\n    position: THREE.Vector3,\n    time: number,\n): Promise<void> {\n    return new Promise((resolve: any, reject: any) => {\n        new TWEEN.Tween(mesh.position)\n            .to(\n                {\n                    x: position.x,\n                    y: position.y,\n                    z: position.z,\n                },\n                time,\n            )\n            .easing(TWEEN.Easing.Quadratic.Out)\n            .start()\n            .onComplete(() => resolve());\n    });\n}\n\nexport async function rotateMesh(\n    mesh: THREE.Mesh,\n    time: number,\n): Promise<void> {\n    return new Promise((resolve: any, reject: any) => {\n        new TWEEN.Tween(mesh.rotation)\n            .to({ x: 0, y: 0, z: 0 }, time)\n            .easing(TWEEN.Easing.Quadratic.Out)\n\n            .start()\n            .onComplete(() => resolve());\n    });\n}\n\nexport async function scaleMesh(\n    mesh: THREE.Mesh,\n    targetScale: number,\n    time: number,\n): Promise<void> {\n    return new Promise((resolve: any, reject: any) => {\n        new TWEEN.Tween(mesh.scale)\n            .to(\n                {\n                    x: targetScale,\n                    y: targetScale,\n                    z: targetScale,\n                },\n                time,\n            )\n            .start()\n            .onComplete(() => resolve());\n    });\n}\n\nexport function createFullBlock(\n    block: ethers.providers.Block,\n    scale: THREE.Vector3,\n    ethProvider: ethers.providers.Provider,\n    threeEnv: ThreeEnv,\n): THREE.Group {\n    const fullBlockGroup = new THREE.Group();\n    fullBlockGroup.scale.set(1 / scale.x, 1 / scale.y, 1 / scale.z);\n\n    createTxPlane(block, fullBlockGroup, ethProvider, threeEnv);\n\n    return fullBlockGroup;\n}\n\nasync function createTxPlane(\n    block: ethers.providers.Block,\n    fullBlockGroup: THREE.Object3D,\n    ethProvider: ethers.providers.Provider,\n    threeEnv: ThreeEnv,\n) {\n    const distance = 180 / block.transactions.length;\n    const startX = -90;\n    const txPerRow = Math.ceil(Math.sqrt(block.transactions.length));\n\n    const blockWithTransactions = await ethProvider.getBlockWithTransactions(\n        block.number,\n    );\n\n    const txGasLimit = blockWithTransactions.transactions.map((tx) =>\n        tx.gasLimit.toNumber(),\n    );\n    const maxGasLimit = Math.max(...txGasLimit);\n\n    const dataSize = blockWithTransactions.transactions.map((tx) =>\n        tx.data?.length > 2 ? tx.data.length - 2 : 0,\n    );\n    const maxDataSize = Math.max(...dataSize);\n\n    const ethValue = blockWithTransactions.transactions.map((tx) =>\n        parseFloat(ethers.utils.formatEther(tx.value)),\n    );\n    const maxEthValue = Math.max(...ethValue);\n\n    for (let i = 0; i < block.transactions.length; i++) {\n        const tx = blockWithTransactions.transactions[i];\n\n        // const txMaterial = new THREE.MeshBasicMaterial({\n        //     color: 0x007f1b,\n        //     side: THREE.DoubleSide,\n        //     transparent: true,\n        //     opacity: 0.5 + 0.5 * (tx.data.length / maxDataSize),\n        // });\n\n        const plane = new THREE.Mesh(\n            threeEnv.geometries.TxPlane,\n            tx.data.length > 2 ? TxDataPlaneMaterial : TxPlaneMaterial,\n        );\n        plane.userData.transaction = tx;\n        plane.position.setX(startX + distance * i);\n        plane.rotateY(Math.PI / 2);\n        fullBlockGroup.add(plane);\n        const gasLimitScale =\n            0.5 + 0.5 * (tx.gasLimit.toNumber() / maxGasLimit);\n        plane.scale.set(gasLimitScale, gasLimitScale, gasLimitScale);\n        const farX = (i % txPerRow) * 50 - ((txPerRow - 1) * 50) / 2;\n        const farY =\n            1300 +\n            txPerRow * 50 -\n            Math.floor(i / txPerRow) * 50 -\n            ((txPerRow - 1) * 50) / 2;\n\n        const wait = Math.random() * 1000 + 1000;\n\n        moveMesh(plane, new Vector3(farX, farY, 0), wait);\n        rotateMesh(plane, 500);\n\n        const ethValue = parseFloat(ethers.utils.formatEther(tx.value));\n\n        if (ethValue > 0) {\n            setTimeout(() => {\n                const valueBoxHeight = (ethValue / maxEthValue) * 400 + 5;\n                const valueBox = new THREE.Mesh(\n                    threeEnv.geometries.TxValue,\n                    TxValueMaterial,\n                );\n                valueBox.position.set(farX, farY, 0);\n\n                new TWEEN.Tween(valueBox.scale)\n                    .to(new Vector3(1, 1, valueBoxHeight), 1000)\n                    .onUpdate(() => {\n                        valueBox.position.set(farX, farY, valueBox.scale.z / 2);\n                    })\n                    .start();\n\n                fullBlockGroup.add(valueBox);\n            }, wait);\n        }\n    }\n}\n","import { ethers } from 'ethers';\nimport * as THREE from 'three';\nimport {\n    ACCOUNT_DISTNCE,\n    ACCOUNT_PLANE_LENGT,\n    ARROW_HEAD_SIZE,\n} from './Geometries';\nimport {\n    SelectedTransactionMaterial,\n    LinkMaterial,\n    TextMaterial,\n} from './Materials';\nimport { scaleTo } from './Shared';\nimport { ThreeEnv } from './ThreeEnv';\nimport { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry';\n\nfunction createText(\n    text: string,\n    font: any,\n    material: THREE.MeshBasicMaterial,\n): { mesh: THREE.Mesh; size: THREE.Vector3 } {\n    const textGeo = new TextGeometry(text, {\n        font,\n        height: 2,\n        size: 25,\n    });\n    const textMesh = new THREE.Mesh(textGeo, material);\n\n    const bBox = new THREE.Box3().setFromObject(textMesh);\n    const size = new THREE.Vector3();\n    bBox.getSize(size);\n    return { mesh: textMesh, size };\n}\n\nexport function createTransactionMesh(\n    font: any,\n    parent: THREE.Object3D<THREE.Event>,\n    tx: ethers.providers.TransactionResponse,\n    threeEnv: ThreeEnv,\n): THREE.Group {\n    const parnentBBox = new THREE.Box3().setFromObject(parent);\n    const parentSize = new THREE.Vector3();\n    parnentBBox.getSize(parentSize);\n\n    const txMeshGroup = new THREE.Group();\n\n    const toPlane = new THREE.Mesh(\n        threeEnv.geometries.SelectedTxPlane,\n        SelectedTransactionMaterial,\n    );\n    toPlane.position.set(ACCOUNT_DISTNCE / 2 + ACCOUNT_PLANE_LENGT / 2, 0, -2);\n    txMeshGroup.add(toPlane);\n\n    const toText = createText(\n        tx.to\n            ? tx.to.slice(0, 4) +\n                  '...' +\n                  tx.to.slice(tx.to.length - 2, tx.to.length)\n            : '0x0',\n        font,\n        TextMaterial,\n    );\n    toText.mesh.position.set(ACCOUNT_DISTNCE / 2 + 15, -toText.size.y / 2, -1);\n    txMeshGroup.add(toText.mesh);\n\n    const arrowHead = new THREE.Mesh(\n        threeEnv.geometries.ArrowHead,\n        LinkMaterial,\n    );\n    arrowHead.position.set(ACCOUNT_DISTNCE / 2 - 50, 0, -1);\n    arrowHead.rotateY(Math.PI / 2);\n    arrowHead.rotateZ(Math.PI / 2);\n    txMeshGroup.add(arrowHead);\n\n    const remainder = tx.value.mod(1e14);\n    const ethValue = ethers.utils.formatEther(tx.value.sub(remainder));\n\n    const valueText = createText(ethValue + ' ETH', font, LinkMaterial);\n\n    valueText.mesh.position.set(\n        ACCOUNT_DISTNCE / 2 - valueText.size.x - ARROW_HEAD_SIZE - 60,\n        -valueText.size.y / 2,\n        -1,\n    );\n\n    txMeshGroup.add(valueText.mesh);\n\n    const fromPlane = new THREE.Mesh(\n        threeEnv.geometries.SelectedTxPlane,\n        SelectedTransactionMaterial,\n    );\n    fromPlane.position.set(\n        valueText.mesh.position.x - ACCOUNT_PLANE_LENGT / 2 - 30,\n        0,\n        -2,\n    );\n    txMeshGroup.add(fromPlane);\n\n    const fromText = createText(\n        tx.from.slice(0, 4) +\n            '...' +\n            tx.from.slice(tx.from.length - 2, tx.from.length),\n        font,\n        TextMaterial,\n    );\n    fromText.mesh.position.set(\n        valueText.mesh.position.x - ACCOUNT_PLANE_LENGT - 30 + 15,\n        -fromText.size.y / 2,\n        -1,\n    );\n    txMeshGroup.add(fromText.mesh);\n\n    const bBox = new THREE.Box3().setFromObject(txMeshGroup);\n    const size = new THREE.Vector3();\n    bBox.getSize(size);\n\n    txMeshGroup.position.set(\n        parent.position.x - parentSize.x / 2 - (size.x / 2) * 2 - 200,\n        1350,\n        parent.position.z,\n    );\n    txMeshGroup.scale.set(0.01, 0.01, 0.01);\n    scaleTo(new THREE.Vector3(2, 2, 2), txMeshGroup, 1000);\n\n    return txMeshGroup;\n}\n","import { ethers } from 'ethers';\nimport * as THREE from 'three';\nimport { Object3D } from 'three';\nimport { createFullBlock } from './FullBlock';\nimport { CubeMaterial, FrameMaterial, SelectedCubeMaterial } from './Materials';\nimport { createFrame } from './Shared';\nimport { ThreeEnv } from './ThreeEnv';\nimport { createTransactionMesh } from './Transaction';\n\nexport function onClick(\n    threeEnv: ThreeEnv | undefined,\n    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    ethProvider: ethers.providers.Provider,\n    selectBlock: (block: ethers.providers.Block) => void,\n    selectTransaction: (\n        transaction: ethers.providers.TransactionResponse,\n    ) => void,\n) {\n    if (threeEnv) {\n        //event.preventDefault();\n        const mouse = new THREE.Vector2();\n\n        const canvasBounds = threeEnv.renderer\n            .getContext()\n            .canvas.getBoundingClientRect();\n        mouse.x =\n            ((event.clientX - canvasBounds.left) /\n                (canvasBounds.right - canvasBounds.left)) *\n                2 -\n            1;\n        mouse.y =\n            -(\n                (event.clientY - canvasBounds.top) /\n                (canvasBounds.bottom - canvasBounds.top)\n            ) *\n                2 +\n            1;\n\n        threeEnv.raycaster.setFromCamera(mouse, threeEnv.camera);\n        const objects: any[] = [];\n        threeEnv.blockchainGroup.traverseVisible((obj) => objects.push(obj));\n\n        const intersects = threeEnv.raycaster.intersectObjects(objects, false);\n        intersects.sort(sortIntersections);\n        const filtered = intersects.filter((intersect) =>\n            intersect.object.userData.block\n                ? true\n                : false || intersect.object.userData.transaction\n                ? true\n                : false,\n        );\n\n        const selectedElement: THREE.Intersection | undefined = filtered[0];\n\n        if (selectedElement && selectedElement.object.userData.block) {\n            blockSelected(selectedElement, threeEnv, ethProvider, selectBlock);\n        } else if (\n            selectedElement &&\n            selectedElement.object.userData.transaction\n        ) {\n            transactionSelected(selectedElement, threeEnv, selectTransaction);\n        }\n    }\n}\n\nfunction blockSelected(\n    selectedElement: THREE.Intersection,\n    threeEnv: ThreeEnv,\n    ethProvider: ethers.providers.Provider,\n    selectBlock: (block: ethers.providers.Block) => void,\n) {\n    if (\n        threeEnv.selectedBlock &&\n        selectedElement.object.userData.block?.number !==\n            threeEnv.selectedBlock.userData.block?.number\n    ) {\n        (threeEnv.selectedBlock as any).material = CubeMaterial;\n        (threeEnv.selectedBlock.parent as Object3D).remove(\n            threeEnv.selectedBlock.userData.fullBlock,\n        );\n        delete threeEnv.selectedBlock.userData.fullBlock;\n    }\n\n    if (\n        (threeEnv.selectedBlock &&\n            selectedElement.object.userData.block?.number !==\n                threeEnv.selectedBlock.userData.block?.number) ||\n        !threeEnv.selectedBlock\n    ) {\n        (selectedElement.object as any).material = SelectedCubeMaterial;\n\n        const fullBlockGroup = createFullBlock(\n            selectedElement.object.userData.block,\n            (selectedElement.object.parent as Object3D).scale,\n            ethProvider,\n            threeEnv,\n        );\n        (selectedElement.object.parent as Object3D).add(fullBlockGroup);\n        selectedElement.object.userData.fullBlock = fullBlockGroup;\n\n        threeEnv.selectedBlock = selectedElement.object;\n        selectBlock(selectedElement.object.userData.block);\n    }\n}\n\nfunction transactionSelected(\n    selectedElement: THREE.Intersection,\n    threeEnv: ThreeEnv,\n    selectTransaction: (\n        transaction: ethers.providers.TransactionResponse,\n    ) => void,\n) {\n    if (selectedElement.object.parent) {\n        const tx = selectedElement.object.userData\n            .transaction as ethers.providers.TransactionResponse;\n        if (threeEnv.selectedTransaction) {\n            threeEnv.selectedTransaction.parent?.remove(\n                threeEnv.selectedTransaction.userData.transactionFrame,\n            );\n            threeEnv.selectedTransaction.parent?.remove(\n                threeEnv.selectedTransaction.userData.selectedTxView,\n            );\n        }\n\n        const size: number = (selectedElement.object as any).geometry.parameters\n            .width;\n\n        const transactionFrame = createFrame(\n            selectedElement.object.position,\n            size + 7,\n            size + 7,\n            FrameMaterial,\n        );\n        selectedElement.object.parent?.add(transactionFrame);\n        selectedElement.object.userData.transactionFrame = transactionFrame;\n\n        const selectedTxView = createTransactionMesh(\n            threeEnv.fonts[0],\n            selectedElement.object.parent,\n            tx,\n            threeEnv,\n        );\n        selectedElement.object.parent?.add(selectedTxView);\n        selectedElement.object.userData.selectedTxView = selectedTxView;\n\n        threeEnv.selectedTransaction = selectedElement.object;\n\n        selectTransaction(tx);\n    }\n}\n\nfunction sortIntersections(a: any, b: any) {\n    return a.distance - b.distance;\n}\n","import { ethers } from 'ethers';\nimport Icon from '../../shared/Icon';\nimport '../Block.css';\n\ninterface BlockInfoBoxViewProps {\n    block: ethers.providers.Block;\n    minimize: () => void;\n    unselect: () => void;\n}\n\nfunction BlockInfoBoxView(props: BlockInfoBoxViewProps) {\n    return (\n        <div className=\"card  w-100 info-card\">\n            <div className=\"card-body\">\n                <div className=\"row row-space\">\n                    <div className=\"col-6\">\n                        <strong>Block #{props.block.number}</strong>\n                    </div>\n                    <div className=\"col-6 small text-end\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-sm menu-btn\"\n                            onClick={props.minimize}\n                        >\n                            <Icon iconClass=\"fas fa-window-minimize\" />\n                        </button>\n\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-sm menu-btn\"\n                            onClick={props.unselect}\n                        >\n                            <Icon iconClass=\"fas fa-times\" />\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"row small\">\n                    <div className=\"col-4\">Gas Used:</div>\n                    <div className=\"col-8 info-value\">\n                        {props.block.gasUsed.toString()}\n                    </div>\n                </div>\n                <div className=\"row small\">\n                    <div className=\"col-4\">Transactions:</div>\n                    <div className=\"col-8 info-value\">\n                        {props.block.transactions.length}\n                    </div>\n                </div>\n                <div className=\"row small row-space\">\n                    <div className=\"col-4\">Hash:</div>\n                    <div className=\"col-8 info-value small\">\n                        {props.block.hash}\n                    </div>\n                </div>\n                <div className=\"row small \">\n                    <div className=\"col-12\">\n                        <a\n                            className=\" btn btn-sm menu-btn etherscan-link w-100\"\n                            href={`https://etherscan.io/block/${props.block.number}`}\n                            target=\"_blank\"\n                        >\n                            Show on Etherscan\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default BlockInfoBoxView;\n","import { ethers } from 'ethers';\nimport Icon from '../../shared/Icon';\nimport '../Block.css';\n\ninterface TxInfoBoxViewProps {\n    transaction: ethers.providers.TransactionResponse;\n    minimize: () => void;\n    unselect: () => void;\n}\n\nfunction TxInfoBoxView(props: TxInfoBoxViewProps) {\n    return (\n        <div className=\"card  w-100 info-card\">\n            <div className=\"card-body\">\n                <div className=\"row row-space\">\n                    <div className=\"col-7\">\n                        <strong>\n                            Transaction{' '}\n                            {props.transaction.hash.slice(0, 4) +\n                                '...' +\n                                props.transaction.hash.slice(\n                                    props.transaction.hash.length - 3,\n                                    props.transaction.hash.length,\n                                )}\n                        </strong>\n                    </div>\n                    <div className=\"col-5 small text-end\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-sm menu-btn\"\n                            onClick={props.minimize}\n                        >\n                            <Icon iconClass=\"fas fa-window-minimize\" />\n                        </button>\n\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-sm  menu-btn\"\n                            onClick={props.unselect}\n                        >\n                            <Icon iconClass=\"fas fa-times\" />\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"row small\">\n                    <div className=\"col-4\">Gas Limit:</div>\n                    <div className=\"col-8 info-value\">\n                        {props.transaction.gasLimit.toString()}\n                    </div>\n                </div>\n                <div className=\"row small\">\n                    <div className=\"col-4\">Data:</div>\n                    <div className=\"col-8 info-value\">\n                        {(props.transaction.data.length - 2) / 2} bytes\n                    </div>\n                </div>\n                <div className=\"row small row-space\">\n                    <div className=\"col-4\">Hash:</div>\n                    <div className=\"col-8 info-value small\">\n                        {props.transaction.hash}\n                    </div>\n                </div>\n                <div className=\"row small \">\n                    <div className=\"col-12\">\n                        <a\n                            className=\" btn btn-sm menu-btn etherscan-link w-100\"\n                            href={`https://etherscan.io/tx/${props.transaction.hash}`}\n                            target=\"_blank\"\n                        >\n                            Show on Etherscan\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default TxInfoBoxView;\n","import { ethers } from 'ethers';\nimport Icon from '../../shared/Icon';\nimport '../Block.css';\nimport 'bootstrap';\n\ninterface HelpInfoBoxViewProps {\n    unselect: () => void;\n}\n\nfunction HelpInfoBoxView(props: HelpInfoBoxViewProps) {\n    return (\n        <div className=\"card info-card\">\n            <div className=\"card-body\">\n                <div className=\"row row-space\">\n                    <div className=\"col-7\">\n                        <h2>Viblex</h2>\n                    </div>\n                    <div className=\"col-5 small text-end\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-sm  menu-btn\"\n                            onClick={props.unselect}\n                        >\n                            <Icon iconClass=\"fas fa-times\" />\n                        </button>\n                    </div>\n                </div>\n\n                <div className=\"row small\">\n                    <div className=\"col-12\">\n                        <div\n                            className=\"accordion accordion-flush\"\n                            id=\"accordionFlushInfoBox\"\n                        >\n                            <div className=\"accordion-item\">\n                                <h2\n                                    className=\"accordion-header\"\n                                    id=\"flush-headingGettingStarted\"\n                                >\n                                    <button\n                                        className=\"accordion-button \"\n                                        type=\"button\"\n                                        data-bs-toggle=\"collapse\"\n                                        data-bs-target=\"#flush-collapseGettingStarted\"\n                                        aria-expanded=\"false\"\n                                        aria-controls=\"flush-collapseGettingStarted\"\n                                    >\n                                        Getting started\n                                    </button>\n                                </h2>\n                                <div\n                                    id=\"flush-collapseGettingStarted\"\n                                    className=\"accordion-collapse collapse show\"\n                                    aria-labelledby=\"flush-headingGettingStarted\"\n                                    data-bs-parent=\"#accordionFlushInfoBox\"\n                                >\n                                    <div className=\"accordion-body accordion-list\">\n                                        <ul className=\"fa-ul\">\n                                            <li>\n                                                <span className=\"fa-li\">\n                                                    <Icon iconClass=\"fas fa-cube\" />\n                                                </span>\n                                                Select a block by clicking on\n                                                the block cube.\n                                            </li>\n                                            <li>\n                                                <span className=\"fa-li\">\n                                                    <Icon iconClass=\"fas fa-th\" />\n                                                </span>\n                                                If a block is slected a\n                                                transaction can be selected by\n                                                clicking on the transaction\n                                                plane.\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"accordion-item\">\n                                <h2\n                                    className=\"accordion-header\"\n                                    id=\"flush-headingTwo\"\n                                >\n                                    <button\n                                        className=\"accordion-button collapsed\"\n                                        type=\"button\"\n                                        data-bs-toggle=\"collapse\"\n                                        data-bs-target=\"#flush-collapseComponents\"\n                                        aria-expanded=\"false\"\n                                        aria-controls=\"flush-collapseComponents\"\n                                    >\n                                        Component help\n                                    </button>\n                                </h2>\n                                <div\n                                    id=\"flush-collapseComponents\"\n                                    className=\"accordion-collapse collapse\"\n                                    aria-labelledby=\"flush-headingTwo\"\n                                    data-bs-parent=\"#accordionFlushInfoBox\"\n                                >\n                                    <div className=\"accordion-body accordion-list\">\n                                        <ul className=\"fa-ul\">\n                                            <li>\n                                                <span className=\"fa-li\">\n                                                    <Icon iconClass=\"fas fa-expand-arrows-alt\" />\n                                                </span>\n                                                Cube size: gas used\n                                            </li>\n                                            <li>\n                                                <span className=\"fa-li\">\n                                                    <Icon iconClass=\"fas fa-arrows-alt-h\" />\n                                                </span>\n                                                Cube distance: time between\n                                                blocks\n                                            </li>\n                                            <li>\n                                                <span className=\"fa-li\">\n                                                    <Icon iconClass=\"fas fa-square-full\" />\n                                                </span>\n                                                Square size: transaction gas\n                                                limit\n                                            </li>\n                                            <li>\n                                                <span className=\"fa-li\">\n                                                    <Icon iconClass=\"fas fa-palette\" />\n                                                </span>\n                                                Dark square: value transaction\n                                            </li>\n                                            <li>\n                                                <span className=\"fa-li\">\n                                                    <Icon iconClass=\"fas fa-chart-bar\" />\n                                                </span>\n                                                Square cube height: transaction\n                                                ETH value\n                                            </li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"accordion-item\">\n                                <h2\n                                    className=\"accordion-header\"\n                                    id=\"flush-headingThree\"\n                                >\n                                    <button\n                                        className=\"accordion-button collapsed\"\n                                        type=\"button\"\n                                        data-bs-toggle=\"collapse\"\n                                        data-bs-target=\"#flush-collapseAbout\"\n                                        aria-expanded=\"false\"\n                                        aria-controls=\"flush-collapseAbout\"\n                                    >\n                                        About\n                                    </button>\n                                </h2>\n                                <div\n                                    id=\"flush-collapseAbout\"\n                                    className=\"accordion-collapse collapse\"\n                                    aria-labelledby=\"flush-headingThree\"\n                                    data-bs-parent=\"#accordionFlushInfoBox\"\n                                >\n                                    <div className=\"accordion-body\">\n                                        Visual blockchain explorer developed by{' '}\n                                        <a\n                                            className=\"external-link\"\n                                            href=\"https://github.com/hai-ko\"\n                                        >\n                                            Heiko Burkhardt\n                                        </a>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default HelpInfoBoxView;\n","import { ethers } from 'ethers';\nimport Icon from '../../shared/Icon';\nimport BlockInfoBoxView from './BlockInfoBoxView';\nimport { BlockViewState } from '../BlockView';\nimport '../Block.css';\nimport TxInfoBoxView from './TxInfoBoxView';\nimport HelpInfoBoxView from './HelpInfoBoxView';\n\ninterface InfoBoxViewProps {\n    selectedElement:\n        | ethers.providers.Block\n        | ethers.providers.TransactionResponse\n        | undefined;\n    blockViewState: BlockViewState;\n    minimize: () => void;\n    maximize: () => void;\n    unselect: () => void;\n    showHelp: () => void;\n}\n\nfunction InfoBoxView(props: InfoBoxViewProps) {\n    switch (props.blockViewState) {\n        case BlockViewState.HelpSelected:\n            return <HelpInfoBoxView unselect={props.unselect} />;\n\n        case BlockViewState.TransactionSelectedMin:\n        case BlockViewState.BlockSelectedMin:\n            return (\n                <div className=\"small w-100 info-card d-flex justify-content-end\">\n                    <div>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-sm menu-btn\"\n                            onClick={props.maximize}\n                        >\n                            <Icon iconClass=\"fas fa-window-maximize\" />\n                        </button>\n\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-sm menu-btn \"\n                            onClick={props.unselect}\n                        >\n                            <Icon iconClass=\"fas fa-times\" />\n                        </button>\n                    </div>\n                </div>\n            );\n\n        case BlockViewState.TransactionSelected:\n            return (\n                <TxInfoBoxView\n                    transaction={\n                        props.selectedElement as ethers.providers.TransactionResponse\n                    }\n                    minimize={props.minimize}\n                    unselect={props.unselect}\n                />\n            );\n\n        case BlockViewState.BlockSelected:\n            return (\n                <BlockInfoBoxView\n                    block={props.selectedElement as ethers.providers.Block}\n                    minimize={props.minimize}\n                    unselect={props.unselect}\n                />\n            );\n        case BlockViewState.NoSelection:\n        default:\n            return (\n                <div className=\"small w-100 info-card d-flex justify-content-end\">\n                    <div>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-sm menu-btn \"\n                            onClick={props.showHelp}\n                        >\n                            <Icon iconClass=\"fas fa-question\" />\n                        </button>\n                    </div>\n                </div>\n            );\n    }\n}\n\nexport default InfoBoxView;\n","import './Block.css';\n\nfunction MessageBoxView() {\n    return (\n        <div className=\"message-box w-100 d-flex  justify-content-center\">\n            <div className=\"row w-100 d-flex  justify-content-center\">\n                <div className=\"col-8\">\n                    <div className=\"card  info-card \">\n                        <div className=\"card-body\">\n                            <div className=\"row\">\n                                <div className=\"col-12 text-center \">\n                                    <p className=\"first-p\">\n                                        No Ethereum provider detected.\n                                    </p>\n\n                                    <p>\n                                        Please install a plugin like MetaMask.\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MessageBoxView;\n","import React, { useEffect, useRef, useState } from 'react';\nimport Menu from '../shared/Menu';\nimport { init, onWindowResize, ThreeEnv } from './utils/ThreeEnv';\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { ethers } from 'ethers';\nimport { BLOCKS_TO_SHOW, createBlocks } from './utils/Block';\nimport { onClick } from './utils/Intersection';\nimport InfoBoxView from './info-box/InfoBoxView';\nimport { CubeMaterial } from './utils/Materials';\nimport { Object3D } from 'three';\nimport PageVisibility from 'react-page-visibility';\nimport { useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport MessageBoxView from './MessageBoxView';\nimport './Block.css';\n\ninterface BlockViewProps {\n    view?: string;\n    setView?: (view: string) => void;\n}\n\nexport enum BlockViewState {\n    WaitForConnection,\n    NoConnection,\n    NoSelection,\n    HelpSelected,\n    BlockSelected,\n    BlockSelectedMin,\n    TransactionSelected,\n    TransactionSelectedMin,\n}\n\nasync function createConnection(\n    setProvider: React.Dispatch<\n        React.SetStateAction<ethers.providers.Provider | undefined>\n    >,\n    setBlockViewState: React.Dispatch<React.SetStateAction<BlockViewState>>,\n    rpc: string,\n) {\n    if (rpc) {\n        setProvider(\n            new ethers.providers.JsonRpcProvider(decodeURIComponent(rpc)),\n        );\n        setBlockViewState(BlockViewState.HelpSelected);\n    } else {\n        const provider = await detectEthereumProvider();\n\n        if (provider) {\n            const ethersProvider = new ethers.providers.Web3Provider(\n                provider as any,\n            );\n            setProvider(ethersProvider);\n            setBlockViewState(BlockViewState.HelpSelected);\n        } else {\n            setBlockViewState(BlockViewState.NoConnection);\n        }\n    }\n}\n\nasync function getBlocks(\n    threeEnv: ThreeEnv,\n    ethProvider: ethers.providers.Provider,\n    loadedBlocks: ethers.providers.Block[][],\n    setBlocks: React.Dispatch<React.SetStateAction<ethers.providers.Block[][]>>,\n    setGetBlocksTimeout: React.Dispatch<\n        React.SetStateAction<NodeJS.Timeout | undefined>\n    >,\n) {\n    const currentBlockNumber = await ethProvider.getBlockNumber();\n    let blocksToLoad = BLOCKS_TO_SHOW;\n\n    if (loadedBlocks.length > 0) {\n        const lastBlock = loadedBlocks[loadedBlocks.length - 1][0];\n        blocksToLoad = currentBlockNumber - lastBlock.number;\n    }\n\n    let newLoadedBlocks = [...loadedBlocks];\n\n    if (blocksToLoad > 0) {\n        const blocks: Promise<ethers.providers.Block>[] = [\n            ...Array(blocksToLoad).keys(),\n        ].map((index) => ethProvider.getBlock(currentBlockNumber - index));\n\n        newLoadedBlocks = loadedBlocks[loadedBlocks.length - 1]\n            ? [loadedBlocks[loadedBlocks.length - 1], await Promise.all(blocks)]\n            : [await Promise.all(blocks)];\n\n        setBlocks(newLoadedBlocks);\n    }\n\n    setGetBlocksTimeout(\n        setTimeout(\n            () =>\n                getBlocks(\n                    threeEnv,\n                    ethProvider,\n                    newLoadedBlocks,\n                    setBlocks,\n                    setGetBlocksTimeout,\n                ),\n            30000,\n        ),\n    );\n}\n\nfunction BlockView(props: BlockViewProps) {\n    const rpc = queryString.parse(useLocation().search).rpc as string;\n    const stats = queryString.parse(useLocation().search).stats as string;\n\n    const [getBlocksTimeout, setGetBlocksTimeout] = useState<NodeJS.Timeout>();\n    const threeContainer = useRef<HTMLDivElement>(null);\n    const [threeEnv, setThreeEnv] = useState<ThreeEnv | undefined>();\n    const [ethProvider, setEthProvider] = useState<\n        ethers.providers.Provider | undefined\n    >();\n    const [blocks, setBlocks] = useState<ethers.providers.Block[][]>([]);\n    const [selectedElement, setSelectedElement] = useState<\n        | ethers.providers.Block\n        | ethers.providers.TransactionResponse\n        | undefined\n    >();\n    const [blockViewState, setBlockViewState] = useState<BlockViewState>(\n        BlockViewState.WaitForConnection,\n    );\n\n    const selectBlock = (block: ethers.providers.Block) => {\n        setSelectedElement(block);\n        if (blockViewState !== BlockViewState.BlockSelectedMin) {\n            setBlockViewState(BlockViewState.BlockSelected);\n        }\n    };\n\n    const selectTransaction = (\n        transaction: ethers.providers.TransactionResponse,\n    ) => {\n        setSelectedElement(transaction);\n        if (blockViewState !== BlockViewState.TransactionSelectedMin) {\n            setBlockViewState(BlockViewState.TransactionSelected);\n        }\n    };\n\n    const minimize = () => {\n        if (blockViewState === BlockViewState.BlockSelected) {\n            setBlockViewState(BlockViewState.BlockSelectedMin);\n        } else if (blockViewState === BlockViewState.TransactionSelected) {\n            setBlockViewState(BlockViewState.TransactionSelectedMin);\n        }\n    };\n\n    const maximize = () => {\n        if (blockViewState === BlockViewState.BlockSelectedMin) {\n            setBlockViewState(BlockViewState.BlockSelected);\n        } else if (blockViewState === BlockViewState.TransactionSelectedMin) {\n            setBlockViewState(BlockViewState.TransactionSelected);\n        }\n    };\n\n    const unselect = () => {\n        if (\n            blockViewState !== BlockViewState.NoSelection &&\n            blockViewState !== BlockViewState.HelpSelected &&\n            threeEnv\n        ) {\n            const block = threeEnv.selectedBlock as any;\n            block.material = CubeMaterial;\n            (block.parent as Object3D).remove(block.userData.fullBlock);\n            delete block.userData.fullBlock;\n            threeEnv.selectedBlock = undefined;\n        }\n        setBlockViewState(BlockViewState.NoSelection);\n    };\n\n    const showHelp = () => {\n        setBlockViewState(BlockViewState.HelpSelected);\n    };\n\n    const visibilityHandler = (isVisable: boolean) => {\n        if (!isVisable && getBlocksTimeout) {\n            clearTimeout(getBlocksTimeout);\n            setGetBlocksTimeout(undefined);\n        } else if (\n            isVisable &&\n            !getBlocksTimeout &&\n            threeEnv &&\n            ethProvider &&\n            blocks.length > 0\n        ) {\n            getBlocks(\n                threeEnv,\n                ethProvider,\n                blocks,\n                setBlocks,\n                setGetBlocksTimeout,\n            );\n        }\n    };\n\n    useEffect(() => {\n        if (!ethProvider) {\n            createConnection(setEthProvider, setBlockViewState, rpc);\n        } else if (threeEnv && blocks.length === 0) {\n            getBlocks(\n                threeEnv,\n                ethProvider,\n                blocks,\n                setBlocks,\n                setGetBlocksTimeout,\n            );\n        }\n        return () => {\n            if (getBlocksTimeout) {\n                clearTimeout(getBlocksTimeout);\n            }\n        };\n    }, [ethProvider, threeEnv]);\n\n    useEffect(() => {\n        if (blocks.length > 0 && threeEnv) {\n            createBlocks(threeEnv, blocks);\n        }\n    }, [blocks, threeEnv]);\n\n    useEffect(() => {\n        if (threeContainer && !threeEnv) {\n            init(\n                setThreeEnv,\n\n                threeContainer,\n                stats === 'true',\n            );\n        }\n    }, [threeContainer, threeEnv]);\n\n    useEffect(() => {\n        if (threeEnv) {\n            onWindowResize(threeEnv, threeContainer, setThreeEnv);\n        }\n    }, [threeEnv]);\n\n    return (\n        <PageVisibility onChange={visibilityHandler}>\n            <div\n                ref={threeContainer}\n                className=\"w-100 h-100 three-container\"\n                onClick={(\n                    event: React.MouseEvent<HTMLDivElement, MouseEvent>,\n                ) => {\n                    if (ethProvider)\n                        onClick(\n                            threeEnv,\n                            event,\n                            ethProvider,\n                            selectBlock,\n                            selectTransaction,\n                        );\n                }}\n            >\n                {blockViewState === BlockViewState.NoConnection && (\n                    <MessageBoxView />\n                )}\n                <Menu\n                    setView={props.setView}\n                    defaultView={props.view}\n                    infoBox={\n                        <InfoBoxView\n                            selectedElement={selectedElement}\n                            blockViewState={blockViewState}\n                            minimize={minimize}\n                            maximize={maximize}\n                            unselect={unselect}\n                            showHelp={showHelp}\n                        />\n                    }\n                />\n            </div>\n        </PageVisibility>\n    );\n}\n\nexport default BlockView;\n","import './Graph.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { GraphStyle } from './../utils/GraphStyle';\nimport { GraphNode } from './../utils/NodePosition';\nimport { GraphViewState } from './GraphContainer';\nimport { ReplayTransaction } from '../../lib/TransactionSequence';\nimport Icon from '../../shared/Icon';\n\ninterface TxSequenceNodeProps {\n    node: GraphNode<ReplayTransaction>;\n    graphStyle: GraphStyle;\n    isReturn: boolean;\n    onMouseLeave?: () => void;\n    onMouseOver?: () => void;\n    selectedNodeId?: string;\n    graphViewState: GraphViewState;\n    nodeToMax?: string;\n    setSelectedNode?: (nodeId: string | undefined) => void;\n    setNodeToMax?: (nodeId: string | undefined) => void;\n    txId: number;\n}\n\nfunction TxSequenceNode(props: TxSequenceNodeProps) {\n    const isNodeSelected =\n        props.selectedNodeId === props.node.id ||\n        props.nodeToMax === props.node.id;\n\n    const nodeDivStyle: React.CSSProperties = {\n        width: props.graphStyle.ELEMENT_WIDTH.toString() + 'px',\n        height:\n            (isNodeSelected\n                ? props.graphStyle.ELEMENT_HEIGHT +\n                  props.graphStyle.EXPAND_HEIGHT\n                : props.graphStyle.ELEMENT_HEIGHT\n            ).toString() + 'px',\n        borderWidth: props.graphStyle.SEGMENT_THICKNESS + 'px',\n        borderColor: isNodeSelected\n            ? props.graphStyle.SEGMENT_HIGHLIGHTED_COLOR\n            : props.graphStyle.ELEMENT_BORDER_COLOR,\n        borderStyle: 'solid',\n    };\n\n    return (\n        <div\n            className={`node contract ${\n                props.isReturn ? 'contract-other' : 'contract-node'\n            }`}\n            style={nodeDivStyle}\n            onMouseDown={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setNodeToMax &&\n                    props.onMouseLeave\n                ) {\n                    props.setNodeToMax(props.node.id);\n                    props.onMouseLeave();\n                }\n            }}\n            onMouseLeave={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setSelectedNode &&\n                    props.onMouseLeave\n                ) {\n                    props.setSelectedNode(undefined);\n                    props.onMouseLeave();\n                }\n            }}\n            onMouseOver={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setSelectedNode &&\n                    props.onMouseOver\n                ) {\n                    props.setSelectedNode(props.node.id);\n                    props.onMouseOver();\n                }\n            }}\n        >\n            <div className=\"row\">\n                <div className=\"col file-title text-left d-flex justify-content-between align-items-center\">\n                    <div className=\"seq-input-data\">\n                        {props.node.element &&\n                            `${\n                                props.txId\n                            }/${props.node.element.action.input.slice(0, 10)}`}\n                    </div>\n                    <div>\n                        <span className=\"badge bg-light text-dark call-type\">\n                            {props.node.element &&\n                                (props.isReturn\n                                    ? 'result'\n                                    : props.node.element.action.callType)}\n                        </span>\n                    </div>\n                </div>\n            </div>\n            {isNodeSelected && props.node.element && (\n                <>\n                    {!props.isReturn && (\n                        <div className=\"row tx-info\">\n                            <div className=\"col-2 text-left \">\n                                <Icon iconClass=\"fas fa-arrow-alt-circle-right\" />\n                            </div>\n                            <div className=\"col-10\">\n                                <span className=\"seq-input-data\">\n                                    {(props.node.element.action.input.length -\n                                        2) /\n                                        2}\n                                </span>{' '}\n                                bytes\n                            </div>\n                        </div>\n                    )}\n                    {!props.isReturn && (\n                        <div className=\"row tx-info\">\n                            <div className=\"col-2 text-left \">\n                                <Icon iconClass=\"fab fa-ethereum\" />\n                            </div>\n                            <div className=\"col-10 seq-input-data\">\n                                {props.node.element.action.value}\n                            </div>\n                        </div>\n                    )}\n                    {props.isReturn && (\n                        <div className=\"row tx-info\">\n                            <div className=\"col-2 text-left \">\n                                <Icon iconClass=\"fas fa-arrow-alt-circle-left\" />\n                            </div>\n                            <div className=\"col-10\">\n                                <span className=\"seq-input-data\">\n                                    {' '}\n                                    {(props.node.element.result.output.length -\n                                        2) /\n                                        2}\n                                </span>{' '}\n                                bytes\n                            </div>\n                        </div>\n                    )}\n                    {props.isReturn && (\n                        <div className=\"row tx-info\">\n                            <div className=\"col-2 text-left \">\n                                <Icon iconClass=\"fas fa-gas-pump\" />\n                            </div>\n                            <div className=\"col-10 seq-input-data\">\n                                {props.node.element.result.gasUsed}\n                            </div>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default TxSequenceNode;\n","import './Graph.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { GraphStyle } from './../utils/GraphStyle';\nimport { GraphNode } from './../utils/NodePosition';\nimport { getFileDisplayName } from '../../lib/FileHandling';\nimport { GraphViewState } from './GraphContainer';\n\ninterface TxAccountNodeProps {\n    node: GraphNode<string>;\n    graphStyle: GraphStyle;\n    onMouseLeave?: () => void;\n    onMouseOver?: () => void;\n    selectedNodeId?: string;\n    graphViewState: GraphViewState;\n    nodeToMax?: string;\n    setSelectedNode?: (nodeId: string | undefined) => void;\n    setNodeToMax?: (nodeId: string | undefined) => void;\n}\n\nfunction TxAccountNode(props: TxAccountNodeProps) {\n    const isNodeSelected =\n        props.selectedNodeId === props.node.id ||\n        props.nodeToMax === props.node.id;\n\n    const nodeDivStyle: React.CSSProperties = {\n        width: props.graphStyle.ELEMENT_WIDTH.toString() + 'px',\n        height: props.graphStyle.ELEMENT_HEIGHT + 'px',\n        borderWidth: props.graphStyle.SEGMENT_THICKNESS + 'px',\n        borderColor: isNodeSelected\n            ? props.graphStyle.SEGMENT_HIGHLIGHTED_COLOR\n            : props.graphStyle.ELEMENT_BORDER_COLOR,\n        borderStyle: 'solid',\n    };\n\n    return (\n        <div\n            className={`node account-node`}\n            style={nodeDivStyle}\n            onMouseDown={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setNodeToMax &&\n                    props.onMouseLeave\n                ) {\n                    props.setNodeToMax(props.node.id);\n                    props.onMouseLeave();\n                }\n            }}\n            onMouseLeave={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setSelectedNode &&\n                    props.onMouseLeave\n                ) {\n                    props.setSelectedNode(undefined);\n                    props.onMouseLeave();\n                }\n            }}\n            onMouseOver={() => {\n                if (\n                    props.graphViewState === GraphViewState.Ready &&\n                    props.setSelectedNode &&\n                    props.onMouseOver\n                ) {\n                    props.setSelectedNode(props.node.id);\n                    props.onMouseOver();\n                }\n            }}\n        >\n            <div className=\"row\">\n                <div className=\"col file-title text-center seq-input-data\">\n                    {props.node.element && props.node.element}\n                </div>\n            </div>\n            {/* {isNodeSelected && (\n                <div className=\"row kind-info\">\n                    <div className=\"col-12\">\n                        <span className=\"badge bg-light text-dark\">\n                            &nbsp;{getIcon(props.node.element.element.kind)}\n                            &nbsp;&nbsp;{props.node.element.element.kind}&nbsp;\n                        </span>\n                    </div>\n                </div>\n            )} */}\n        </div>\n    );\n}\n\nexport default TxAccountNode;\n","import { useEffect, useRef, useState } from 'react';\nimport Trace from './TestTrace.json';\nimport {\n    getAllAcccountAddresses,\n    ReplayTransaction,\n} from '../../lib/TransactionSequence';\nimport Menu from '../../shared/Menu';\nimport {\n    animate,\n    autoFit,\n    initSequenceDiagram,\n    onWindowResize,\n    Three,\n} from '../utils/ThreeEnv';\nimport { zoomIn, zoomOut } from '../utils/Zoom';\nimport { PortalParts, RenderedSequenceNodes, SeqNodeType } from './Node';\nimport TxSequenceNode from './TxSequenceNode';\nimport ReactDOM from 'react-dom';\nimport { GraphViewState } from './GraphContainer';\nimport TxAccountNode from './TxAccountNode';\nimport { GraphNode } from '../utils/NodePosition';\n\ninterface TransactionSequenceViewProps {\n    setView: (view: string) => void;\n    view: string;\n}\n\nfunction TransactionSequenceView(props: TransactionSequenceViewProps) {\n    const threeContainer = useRef<HTMLDivElement>(null);\n    const [three, setThree] = useState<Three | undefined>();\n    const [selectedNodeId, setSelectedNodeId] = useState<string | undefined>();\n    const [renderedNodes, setRenderedNodes] = useState<RenderedSequenceNodes>();\n    const [graphViewState, setGraphViewState] = useState<GraphViewState>(\n        GraphViewState.Wait,\n    );\n\n    useEffect(() => {\n        if (graphViewState === GraphViewState.Ready && three) {\n            onWindowResize(three, threeContainer, setThree);\n        }\n    }, [graphViewState]);\n\n    useEffect(() => {\n        if (threeContainer && !three) {\n            setRenderedNodes(\n                initSequenceDiagram(\n                    setThree,\n                    Trace.result.trace,\n                    threeContainer,\n                    setGraphViewState,\n                ),\n            );\n        }\n    }, [threeContainer, three]);\n\n    useEffect(() => {\n        if (three) {\n            animate(three);\n        }\n    }, [three]);\n\n    const fit = () => {\n        if (three && renderedNodes) {\n            autoFit(\n                three,\n                renderedNodes.sequenceDiagramNodes.map((pair) => pair.object3D),\n                renderedNodes.graphStyle,\n            );\n        }\n    };\n\n    useEffect(() => {\n        fit();\n    }, [props.view, renderedNodes, three]);\n\n    const maxNode = (nodeId: string | undefined) => {};\n\n    const portals = renderedNodes\n        ? renderedNodes.sequenceDiagramNodes.map((node) =>\n              node.seqNodeType === SeqNodeType.Account\n                  ? ReactDOM.createPortal(\n                        <TxAccountNode\n                            graphStyle={node.portal.graphStyle}\n                            node={node.portal.node as GraphNode<string>}\n                            onMouseLeave={node.portal.onMouseLeave}\n                            onMouseOver={node.portal.onMouseOver}\n                            setSelectedNode={setSelectedNodeId}\n                            selectedNodeId={selectedNodeId}\n                            setNodeToMax={maxNode}\n                            graphViewState={graphViewState}\n                            nodeToMax={selectedNodeId}\n                        />,\n                        node.portal.nodeDiv,\n                    )\n                  : ReactDOM.createPortal(\n                        <TxSequenceNode\n                            graphStyle={node.portal.graphStyle}\n                            node={\n                                node.portal.node as GraphNode<ReplayTransaction>\n                            }\n                            onMouseLeave={node.portal.onMouseLeave}\n                            onMouseOver={node.portal.onMouseOver}\n                            setSelectedNode={setSelectedNodeId}\n                            selectedNodeId={selectedNodeId}\n                            setNodeToMax={maxNode}\n                            graphViewState={graphViewState}\n                            nodeToMax={selectedNodeId}\n                            isReturn={\n                                node.seqNodeType ===\n                                SeqNodeType.TransactionResult\n                            }\n                            txId={node.txId}\n                        />,\n                        node.portal.nodeDiv,\n                    ),\n          )\n        : null;\n\n    return (\n        <>\n            {/* {maxedNode && renderedNodes && (\n            <FileView\n                graphStyle={renderedNodes.graphStyle}\n                node={maxedNode}\n                exitMaxNode={exitMaxNode}\n            />\n        )} */}\n            <div\n                ref={threeContainer}\n                // style={{ display: !maxedNode ? 'block' : 'none' }}\n                className=\"w-100 h-100 three-container\"\n            >\n                {portals}\n                <Menu\n                    zoomIn={() => zoomIn(three)}\n                    zoomOut={() => zoomOut(three)}\n                    autoZoom={fit}\n                    setView={props.setView}\n                    defaultView={props.view}\n                />\n            </div>\n        </>\n    );\n}\n\nexport default TransactionSequenceView;\n","import 'bootstrap/dist/css/bootstrap.min.css';\n\ninterface StandaloneWrapperProps {\n    element: JSX.Element;\n}\n\nfunction StandaloneWrapper(props: StandaloneWrapperProps) {\n    return props.element;\n}\n\nexport default StandaloneWrapper;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport type { PluginApi } from '@remixproject/plugin-utils';\nimport { PluginClient } from '@remixproject/plugin';\nimport { createClient } from '@remixproject/plugin-webview';\nimport { IRemixApi } from '@remixproject/plugin-api';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import 'bootstrap/dist/js/bootstrap.bundle.min.js';\nimport { ParsedSolFile } from './lib/ParseSolidity';\nimport { useRef } from 'react';\nimport { getAllRemixFiles } from './remix-utils/RemixFileHandler';\nimport GraphContainer from './graph/views/GraphContainer';\nimport BlockView from './block/BlockView';\nimport TransactionSequenceView from './graph/views/TransactionSequenceView';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport StandaloneWrapper from './StandaloneWrapper';\n\nfunction App() {\n    const [client, setClient] = useState<\n        | (PluginClient<any, Readonly<IRemixApi>> &\n              PluginApi<Readonly<IRemixApi>>)\n        | undefined\n    >();\n\n    const [files, setFiles] = useState<ParsedSolFile[]>();\n    const [view, setView] = useState<string>('files');\n\n    useEffect(() => {\n        if (!client) {\n            const client = createClient(\n                new PluginClient({\n                    allowOrigins: ['https://remix.ethereum.org'],\n                }),\n            );\n            client.onload(async () => {\n                //@ts-ignore\n                const solidityParser = SolidityParser.parse;\n\n                setFiles(await getAllRemixFiles(client, solidityParser));\n            });\n            setClient(client);\n        }\n    }, [client]);\n\n    const graphContainer = useRef<HTMLDivElement>(null);\n\n    const getSelectedView = (): JSX.Element => {\n        switch (view) {\n            case 'block':\n                return <BlockView view={view} setView={setView} />;\n            case 'transactions':\n                return (\n                    <TransactionSequenceView view={view} setView={setView} />\n                );\n            case 'files':\n            case 'contracts':\n                return graphContainer.current && files ? (\n                    <GraphContainer\n                        files={files}\n                        view={view}\n                        setView={setView}\n                    />\n                ) : (\n                    <></>\n                );\n\n            default:\n                return <div>Unknown view slected.</div>;\n        }\n    };\n\n    const remixView = (\n        <div className=\"App h-100 w-100\" ref={graphContainer}>\n            {getSelectedView()}\n        </div>\n    );\n\n    return (\n        <Routes>\n            <Route path=\"/remix\" element={remixView} />\n            <Route\n                path=\"/\"\n                element={<StandaloneWrapper element={<BlockView />} />}\n            />\n        </Routes>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}